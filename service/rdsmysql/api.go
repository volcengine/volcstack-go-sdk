// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysql

import (
	"github.com/volcengine/volcstack-go-sdk/private/protocol"
	"github.com/volcengine/volcstack-go-sdk/private/protocol/volcstackquery"
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opCreateAccountCommon = "CreateAccount"

// CreateAccountCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateAccountCommon operation. The "output" return
// value will be populated with the CreateAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAccountCommon Send returns without error.
//
// See CreateAccountCommon for more information on using the CreateAccountCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateAccountCommonRequest method.
//    req, resp := client.CreateAccountCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateAccountCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateAccountCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateAccountCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateAccountCommon for usage and error information.
func (c *RDSMYSQL) CreateAccountCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateAccountCommonRequest(input)
	return out, req.Send()
}

// CreateAccountCommonWithContext is the same as CreateAccountCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAccountCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateAccountCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateAccountCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAccount = "CreateAccount"

// CreateAccountRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateAccount operation. The "output" return
// value will be populated with the CreateAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAccountCommon Send returns without error.
//
// See CreateAccount for more information on using the CreateAccount
// API call, and error handling.
//
//    // Example sending a request using the CreateAccountRequest method.
//    req, resp := client.CreateAccountRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateAccountRequest(input *CreateAccountInput) (req *request.Request, output *CreateAccountOutput) {
	op := &request.Operation{
		Name:       opCreateAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateAccountInput{}
	}

	output = &CreateAccountOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// CreateAccount API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateAccount for usage and error information.
func (c *RDSMYSQL) CreateAccount(input *CreateAccountInput) (*CreateAccountOutput, error) {
	req, out := c.CreateAccountRequest(input)
	return out, req.Send()
}

// CreateAccountWithContext is the same as CreateAccount with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAccount for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateAccountWithContext(ctx volcstack.Context, input *CreateAccountInput, opts ...request.Option) (*CreateAccountOutput, error) {
	req, out := c.CreateAccountRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBackupCommon = "CreateBackup"

// CreateBackupCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateBackupCommon operation. The "output" return
// value will be populated with the CreateBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupCommon Send returns without error.
//
// See CreateBackupCommon for more information on using the CreateBackupCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupCommonRequest method.
//    req, resp := client.CreateBackupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateBackupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateBackupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBackupCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateBackupCommon for usage and error information.
func (c *RDSMYSQL) CreateBackupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateBackupCommonRequest(input)
	return out, req.Send()
}

// CreateBackupCommonWithContext is the same as CreateBackupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateBackupCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateBackupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBackup = "CreateBackup"

// CreateBackupRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateBackup operation. The "output" return
// value will be populated with the CreateBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupCommon Send returns without error.
//
// See CreateBackup for more information on using the CreateBackup
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupRequest method.
//    req, resp := client.CreateBackupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateBackupRequest(input *CreateBackupInput) (req *request.Request, output *CreateBackupOutput) {
	op := &request.Operation{
		Name:       opCreateBackup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateBackupInput{}
	}

	output = &CreateBackupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// CreateBackup API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateBackup for usage and error information.
func (c *RDSMYSQL) CreateBackup(input *CreateBackupInput) (*CreateBackupOutput, error) {
	req, out := c.CreateBackupRequest(input)
	return out, req.Send()
}

// CreateBackupWithContext is the same as CreateBackup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateBackupWithContext(ctx volcstack.Context, input *CreateBackupInput, opts ...request.Option) (*CreateBackupOutput, error) {
	req, out := c.CreateBackupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstanceCommon = "CreateDBInstance"

// CreateDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBInstanceCommon operation. The "output" return
// value will be populated with the CreateDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceCommon Send returns without error.
//
// See CreateDBInstanceCommon for more information on using the CreateDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceCommonRequest method.
//    req, resp := client.CreateDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBInstanceCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateDBInstanceCommon for usage and error information.
func (c *RDSMYSQL) CreateDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceCommonRequest(input)
	return out, req.Send()
}

// CreateDBInstanceCommonWithContext is the same as CreateDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstance = "CreateDBInstance"

// CreateDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBInstance operation. The "output" return
// value will be populated with the CreateDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceCommon Send returns without error.
//
// See CreateDBInstance for more information on using the CreateDBInstance
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceRequest method.
//    req, resp := client.CreateDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateDBInstanceRequest(input *CreateDBInstanceInput) (req *request.Request, output *CreateDBInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBInstanceInput{}
	}

	output = &CreateDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBInstance API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateDBInstance for usage and error information.
func (c *RDSMYSQL) CreateDBInstance(input *CreateDBInstanceInput) (*CreateDBInstanceOutput, error) {
	req, out := c.CreateDBInstanceRequest(input)
	return out, req.Send()
}

// CreateDBInstanceWithContext is the same as CreateDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateDBInstanceWithContext(ctx volcstack.Context, input *CreateDBInstanceInput, opts ...request.Option) (*CreateDBInstanceOutput, error) {
	req, out := c.CreateDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstanceIPListCommon = "CreateDBInstanceIPList"

// CreateDBInstanceIPListCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBInstanceIPListCommon operation. The "output" return
// value will be populated with the CreateDBInstanceIPListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceIPListCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceIPListCommon Send returns without error.
//
// See CreateDBInstanceIPListCommon for more information on using the CreateDBInstanceIPListCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceIPListCommonRequest method.
//    req, resp := client.CreateDBInstanceIPListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateDBInstanceIPListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBInstanceIPListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBInstanceIPListCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateDBInstanceIPListCommon for usage and error information.
func (c *RDSMYSQL) CreateDBInstanceIPListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceIPListCommonRequest(input)
	return out, req.Send()
}

// CreateDBInstanceIPListCommonWithContext is the same as CreateDBInstanceIPListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstanceIPListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateDBInstanceIPListCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceIPListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstanceIPList = "CreateDBInstanceIPList"

// CreateDBInstanceIPListRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBInstanceIPList operation. The "output" return
// value will be populated with the CreateDBInstanceIPListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceIPListCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceIPListCommon Send returns without error.
//
// See CreateDBInstanceIPList for more information on using the CreateDBInstanceIPList
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceIPListRequest method.
//    req, resp := client.CreateDBInstanceIPListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateDBInstanceIPListRequest(input *CreateDBInstanceIPListInput) (req *request.Request, output *CreateDBInstanceIPListOutput) {
	op := &request.Operation{
		Name:       opCreateDBInstanceIPList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBInstanceIPListInput{}
	}

	output = &CreateDBInstanceIPListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// CreateDBInstanceIPList API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateDBInstanceIPList for usage and error information.
func (c *RDSMYSQL) CreateDBInstanceIPList(input *CreateDBInstanceIPListInput) (*CreateDBInstanceIPListOutput, error) {
	req, out := c.CreateDBInstanceIPListRequest(input)
	return out, req.Send()
}

// CreateDBInstanceIPListWithContext is the same as CreateDBInstanceIPList with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstanceIPList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateDBInstanceIPListWithContext(ctx volcstack.Context, input *CreateDBInstanceIPListInput, opts ...request.Option) (*CreateDBInstanceIPListOutput, error) {
	req, out := c.CreateDBInstanceIPListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDatabaseCommon = "CreateDatabase"

// CreateDatabaseCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDatabaseCommon operation. The "output" return
// value will be populated with the CreateDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDatabaseCommon Send returns without error.
//
// See CreateDatabaseCommon for more information on using the CreateDatabaseCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDatabaseCommonRequest method.
//    req, resp := client.CreateDatabaseCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateDatabaseCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDatabaseCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDatabaseCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateDatabaseCommon for usage and error information.
func (c *RDSMYSQL) CreateDatabaseCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDatabaseCommonRequest(input)
	return out, req.Send()
}

// CreateDatabaseCommonWithContext is the same as CreateDatabaseCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDatabaseCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateDatabaseCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDatabaseCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDatabase = "CreateDatabase"

// CreateDatabaseRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDatabase operation. The "output" return
// value will be populated with the CreateDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDatabaseCommon Send returns without error.
//
// See CreateDatabase for more information on using the CreateDatabase
// API call, and error handling.
//
//    // Example sending a request using the CreateDatabaseRequest method.
//    req, resp := client.CreateDatabaseRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateDatabaseRequest(input *CreateDatabaseInput) (req *request.Request, output *CreateDatabaseOutput) {
	op := &request.Operation{
		Name:       opCreateDatabase,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDatabaseInput{}
	}

	output = &CreateDatabaseOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// CreateDatabase API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation CreateDatabase for usage and error information.
func (c *RDSMYSQL) CreateDatabase(input *CreateDatabaseInput) (*CreateDatabaseOutput, error) {
	req, out := c.CreateDatabaseRequest(input)
	return out, req.Send()
}

// CreateDatabaseWithContext is the same as CreateDatabase with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDatabase for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateDatabaseWithContext(ctx volcstack.Context, input *CreateDatabaseInput, opts ...request.Option) (*CreateDatabaseOutput, error) {
	req, out := c.CreateDatabaseRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBInstanceCommon = "DeleteDBInstance"

// DeleteDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBInstanceCommon operation. The "output" return
// value will be populated with the DeleteDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBInstanceCommon Send returns without error.
//
// See DeleteDBInstanceCommon for more information on using the DeleteDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBInstanceCommonRequest method.
//    req, resp := client.DeleteDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DeleteDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDBInstanceCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DeleteDBInstanceCommon for usage and error information.
func (c *RDSMYSQL) DeleteDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDBInstanceCommonRequest(input)
	return out, req.Send()
}

// DeleteDBInstanceCommonWithContext is the same as DeleteDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DeleteDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBInstance = "DeleteDBInstance"

// DeleteDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBInstance operation. The "output" return
// value will be populated with the DeleteDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBInstanceCommon Send returns without error.
//
// See DeleteDBInstance for more information on using the DeleteDBInstance
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBInstanceRequest method.
//    req, resp := client.DeleteDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DeleteDBInstanceRequest(input *DeleteDBInstanceInput) (req *request.Request, output *DeleteDBInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBInstanceInput{}
	}

	output = &DeleteDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDBInstance API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DeleteDBInstance for usage and error information.
func (c *RDSMYSQL) DeleteDBInstance(input *DeleteDBInstanceInput) (*DeleteDBInstanceOutput, error) {
	req, out := c.DeleteDBInstanceRequest(input)
	return out, req.Send()
}

// DeleteDBInstanceWithContext is the same as DeleteDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DeleteDBInstanceWithContext(ctx volcstack.Context, input *DeleteDBInstanceInput, opts ...request.Option) (*DeleteDBInstanceOutput, error) {
	req, out := c.DeleteDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBInstanceIPListCommon = "DeleteDBInstanceIPList"

// DeleteDBInstanceIPListCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBInstanceIPListCommon operation. The "output" return
// value will be populated with the DeleteDBInstanceIPListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBInstanceIPListCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBInstanceIPListCommon Send returns without error.
//
// See DeleteDBInstanceIPListCommon for more information on using the DeleteDBInstanceIPListCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBInstanceIPListCommonRequest method.
//    req, resp := client.DeleteDBInstanceIPListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DeleteDBInstanceIPListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDBInstanceIPListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDBInstanceIPListCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DeleteDBInstanceIPListCommon for usage and error information.
func (c *RDSMYSQL) DeleteDBInstanceIPListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDBInstanceIPListCommonRequest(input)
	return out, req.Send()
}

// DeleteDBInstanceIPListCommonWithContext is the same as DeleteDBInstanceIPListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBInstanceIPListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DeleteDBInstanceIPListCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDBInstanceIPListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBInstanceIPList = "DeleteDBInstanceIPList"

// DeleteDBInstanceIPListRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBInstanceIPList operation. The "output" return
// value will be populated with the DeleteDBInstanceIPListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBInstanceIPListCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBInstanceIPListCommon Send returns without error.
//
// See DeleteDBInstanceIPList for more information on using the DeleteDBInstanceIPList
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBInstanceIPListRequest method.
//    req, resp := client.DeleteDBInstanceIPListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DeleteDBInstanceIPListRequest(input *DeleteDBInstanceIPListInput) (req *request.Request, output *DeleteDBInstanceIPListOutput) {
	op := &request.Operation{
		Name:       opDeleteDBInstanceIPList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBInstanceIPListInput{}
	}

	output = &DeleteDBInstanceIPListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDBInstanceIPList API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DeleteDBInstanceIPList for usage and error information.
func (c *RDSMYSQL) DeleteDBInstanceIPList(input *DeleteDBInstanceIPListInput) (*DeleteDBInstanceIPListOutput, error) {
	req, out := c.DeleteDBInstanceIPListRequest(input)
	return out, req.Send()
}

// DeleteDBInstanceIPListWithContext is the same as DeleteDBInstanceIPList with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBInstanceIPList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DeleteDBInstanceIPListWithContext(ctx volcstack.Context, input *DeleteDBInstanceIPListInput, opts ...request.Option) (*DeleteDBInstanceIPListOutput, error) {
	req, out := c.DeleteDBInstanceIPListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDatabaseCommon = "DeleteDatabase"

// DeleteDatabaseCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDatabaseCommon operation. The "output" return
// value will be populated with the DeleteDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDatabaseCommon Send returns without error.
//
// See DeleteDatabaseCommon for more information on using the DeleteDatabaseCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDatabaseCommonRequest method.
//    req, resp := client.DeleteDatabaseCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DeleteDatabaseCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDatabaseCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDatabaseCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DeleteDatabaseCommon for usage and error information.
func (c *RDSMYSQL) DeleteDatabaseCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDatabaseCommonRequest(input)
	return out, req.Send()
}

// DeleteDatabaseCommonWithContext is the same as DeleteDatabaseCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDatabaseCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DeleteDatabaseCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDatabaseCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDatabase = "DeleteDatabase"

// DeleteDatabaseRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDatabase operation. The "output" return
// value will be populated with the DeleteDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDatabaseCommon Send returns without error.
//
// See DeleteDatabase for more information on using the DeleteDatabase
// API call, and error handling.
//
//    // Example sending a request using the DeleteDatabaseRequest method.
//    req, resp := client.DeleteDatabaseRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DeleteDatabaseRequest(input *DeleteDatabaseInput) (req *request.Request, output *DeleteDatabaseOutput) {
	op := &request.Operation{
		Name:       opDeleteDatabase,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDatabaseInput{}
	}

	output = &DeleteDatabaseOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDatabase API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DeleteDatabase for usage and error information.
func (c *RDSMYSQL) DeleteDatabase(input *DeleteDatabaseInput) (*DeleteDatabaseOutput, error) {
	req, out := c.DeleteDatabaseRequest(input)
	return out, req.Send()
}

// DeleteDatabaseWithContext is the same as DeleteDatabase with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDatabase for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DeleteDatabaseWithContext(ctx volcstack.Context, input *DeleteDatabaseInput, opts ...request.Option) (*DeleteDatabaseOutput, error) {
	req, out := c.DeleteDatabaseRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceCommon = "DescribeDBInstance"

// DescribeDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstanceCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceCommon Send returns without error.
//
// See DescribeDBInstanceCommon for more information on using the DescribeDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceCommonRequest method.
//    req, resp := client.DescribeDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DescribeDBInstanceCommon for usage and error information.
func (c *RDSMYSQL) DescribeDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceCommonWithContext is the same as DescribeDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstance = "DescribeDBInstance"

// DescribeDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstance operation. The "output" return
// value will be populated with the DescribeDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceCommon Send returns without error.
//
// See DescribeDBInstance for more information on using the DescribeDBInstance
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceRequest method.
//    req, resp := client.DescribeDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeDBInstanceRequest(input *DescribeDBInstanceInput) (req *request.Request, output *DescribeDBInstanceOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceInput{}
	}

	output = &DescribeDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstance API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DescribeDBInstance for usage and error information.
func (c *RDSMYSQL) DescribeDBInstance(input *DescribeDBInstanceInput) (*DescribeDBInstanceOutput, error) {
	req, out := c.DescribeDBInstanceRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceWithContext is the same as DescribeDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeDBInstanceWithContext(ctx volcstack.Context, input *DescribeDBInstanceInput, opts ...request.Option) (*DescribeDBInstanceOutput, error) {
	req, out := c.DescribeDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceConnectionCommon = "DescribeDBInstanceConnection"

// DescribeDBInstanceConnectionCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstanceConnectionCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceConnectionCommon Send returns without error.
//
// See DescribeDBInstanceConnectionCommon for more information on using the DescribeDBInstanceConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceConnectionCommonRequest method.
//    req, resp := client.DescribeDBInstanceConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeDBInstanceConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceConnectionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceConnectionCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DescribeDBInstanceConnectionCommon for usage and error information.
func (c *RDSMYSQL) DescribeDBInstanceConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceConnectionCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceConnectionCommonWithContext is the same as DescribeDBInstanceConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeDBInstanceConnectionCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceConnection = "DescribeDBInstanceConnection"

// DescribeDBInstanceConnectionRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstanceConnection operation. The "output" return
// value will be populated with the DescribeDBInstanceConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceConnectionCommon Send returns without error.
//
// See DescribeDBInstanceConnection for more information on using the DescribeDBInstanceConnection
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceConnectionRequest method.
//    req, resp := client.DescribeDBInstanceConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeDBInstanceConnectionRequest(input *DescribeDBInstanceConnectionInput) (req *request.Request, output *DescribeDBInstanceConnectionOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceConnection,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceConnectionInput{}
	}

	output = &DescribeDBInstanceConnectionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceConnection API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DescribeDBInstanceConnection for usage and error information.
func (c *RDSMYSQL) DescribeDBInstanceConnection(input *DescribeDBInstanceConnectionInput) (*DescribeDBInstanceConnectionOutput, error) {
	req, out := c.DescribeDBInstanceConnectionRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceConnectionWithContext is the same as DescribeDBInstanceConnection with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeDBInstanceConnectionWithContext(ctx volcstack.Context, input *DescribeDBInstanceConnectionInput, opts ...request.Option) (*DescribeDBInstanceConnectionOutput, error) {
	req, out := c.DescribeDBInstanceConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRecoverableTimeCommon = "DescribeRecoverableTime"

// DescribeRecoverableTimeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRecoverableTimeCommon operation. The "output" return
// value will be populated with the DescribeRecoverableTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRecoverableTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRecoverableTimeCommon Send returns without error.
//
// See DescribeRecoverableTimeCommon for more information on using the DescribeRecoverableTimeCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeRecoverableTimeCommonRequest method.
//    req, resp := client.DescribeRecoverableTimeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeRecoverableTimeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRecoverableTimeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRecoverableTimeCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DescribeRecoverableTimeCommon for usage and error information.
func (c *RDSMYSQL) DescribeRecoverableTimeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRecoverableTimeCommonRequest(input)
	return out, req.Send()
}

// DescribeRecoverableTimeCommonWithContext is the same as DescribeRecoverableTimeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRecoverableTimeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeRecoverableTimeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRecoverableTimeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRecoverableTime = "DescribeRecoverableTime"

// DescribeRecoverableTimeRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRecoverableTime operation. The "output" return
// value will be populated with the DescribeRecoverableTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRecoverableTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRecoverableTimeCommon Send returns without error.
//
// See DescribeRecoverableTime for more information on using the DescribeRecoverableTime
// API call, and error handling.
//
//    // Example sending a request using the DescribeRecoverableTimeRequest method.
//    req, resp := client.DescribeRecoverableTimeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeRecoverableTimeRequest(input *DescribeRecoverableTimeInput) (req *request.Request, output *DescribeRecoverableTimeOutput) {
	op := &request.Operation{
		Name:       opDescribeRecoverableTime,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeRecoverableTimeInput{}
	}

	output = &DescribeRecoverableTimeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRecoverableTime API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation DescribeRecoverableTime for usage and error information.
func (c *RDSMYSQL) DescribeRecoverableTime(input *DescribeRecoverableTimeInput) (*DescribeRecoverableTimeOutput, error) {
	req, out := c.DescribeRecoverableTimeRequest(input)
	return out, req.Send()
}

// DescribeRecoverableTimeWithContext is the same as DescribeRecoverableTime with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRecoverableTime for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeRecoverableTimeWithContext(ctx volcstack.Context, input *DescribeRecoverableTimeInput, opts ...request.Option) (*DescribeRecoverableTimeOutput, error) {
	req, out := c.DescribeRecoverableTimeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGrantAccountPrivilegeCommon = "GrantAccountPrivilege"

// GrantAccountPrivilegeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the GrantAccountPrivilegeCommon operation. The "output" return
// value will be populated with the GrantAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantAccountPrivilegeCommon Send returns without error.
//
// See GrantAccountPrivilegeCommon for more information on using the GrantAccountPrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the GrantAccountPrivilegeCommonRequest method.
//    req, resp := client.GrantAccountPrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) GrantAccountPrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGrantAccountPrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GrantAccountPrivilegeCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation GrantAccountPrivilegeCommon for usage and error information.
func (c *RDSMYSQL) GrantAccountPrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GrantAccountPrivilegeCommonRequest(input)
	return out, req.Send()
}

// GrantAccountPrivilegeCommonWithContext is the same as GrantAccountPrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GrantAccountPrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) GrantAccountPrivilegeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GrantAccountPrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGrantAccountPrivilege = "GrantAccountPrivilege"

// GrantAccountPrivilegeRequest generates a "volcstack/request.Request" representing the
// client's request for the GrantAccountPrivilege operation. The "output" return
// value will be populated with the GrantAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantAccountPrivilegeCommon Send returns without error.
//
// See GrantAccountPrivilege for more information on using the GrantAccountPrivilege
// API call, and error handling.
//
//    // Example sending a request using the GrantAccountPrivilegeRequest method.
//    req, resp := client.GrantAccountPrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) GrantAccountPrivilegeRequest(input *GrantAccountPrivilegeInput) (req *request.Request, output *GrantAccountPrivilegeOutput) {
	op := &request.Operation{
		Name:       opGrantAccountPrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GrantAccountPrivilegeInput{}
	}

	output = &GrantAccountPrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// GrantAccountPrivilege API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation GrantAccountPrivilege for usage and error information.
func (c *RDSMYSQL) GrantAccountPrivilege(input *GrantAccountPrivilegeInput) (*GrantAccountPrivilegeOutput, error) {
	req, out := c.GrantAccountPrivilegeRequest(input)
	return out, req.Send()
}

// GrantAccountPrivilegeWithContext is the same as GrantAccountPrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See GrantAccountPrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) GrantAccountPrivilegeWithContext(ctx volcstack.Context, input *GrantAccountPrivilegeInput, opts ...request.Option) (*GrantAccountPrivilegeOutput, error) {
	req, out := c.GrantAccountPrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAccountsCommon = "ListAccounts"

// ListAccountsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ListAccountsCommon operation. The "output" return
// value will be populated with the ListAccountsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAccountsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAccountsCommon Send returns without error.
//
// See ListAccountsCommon for more information on using the ListAccountsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAccountsCommonRequest method.
//    req, resp := client.ListAccountsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListAccountsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAccountsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAccountsCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListAccountsCommon for usage and error information.
func (c *RDSMYSQL) ListAccountsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAccountsCommonRequest(input)
	return out, req.Send()
}

// ListAccountsCommonWithContext is the same as ListAccountsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAccountsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListAccountsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAccountsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAccounts = "ListAccounts"

// ListAccountsRequest generates a "volcstack/request.Request" representing the
// client's request for the ListAccounts operation. The "output" return
// value will be populated with the ListAccountsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAccountsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAccountsCommon Send returns without error.
//
// See ListAccounts for more information on using the ListAccounts
// API call, and error handling.
//
//    // Example sending a request using the ListAccountsRequest method.
//    req, resp := client.ListAccountsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListAccountsRequest(input *ListAccountsInput) (req *request.Request, output *ListAccountsOutput) {
	op := &request.Operation{
		Name:       opListAccounts,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAccountsInput{}
	}

	output = &ListAccountsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListAccounts API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListAccounts for usage and error information.
func (c *RDSMYSQL) ListAccounts(input *ListAccountsInput) (*ListAccountsOutput, error) {
	req, out := c.ListAccountsRequest(input)
	return out, req.Send()
}

// ListAccountsWithContext is the same as ListAccounts with the addition of
// the ability to pass a context and additional request options.
//
// See ListAccounts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListAccountsWithContext(ctx volcstack.Context, input *ListAccountsInput, opts ...request.Option) (*ListAccountsOutput, error) {
	req, out := c.ListAccountsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBackupsCommon = "ListBackups"

// ListBackupsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ListBackupsCommon operation. The "output" return
// value will be populated with the ListBackupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBackupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBackupsCommon Send returns without error.
//
// See ListBackupsCommon for more information on using the ListBackupsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListBackupsCommonRequest method.
//    req, resp := client.ListBackupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListBackupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListBackupsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBackupsCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListBackupsCommon for usage and error information.
func (c *RDSMYSQL) ListBackupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListBackupsCommonRequest(input)
	return out, req.Send()
}

// ListBackupsCommonWithContext is the same as ListBackupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListBackupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListBackupsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListBackupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListBackups = "ListBackups"

// ListBackupsRequest generates a "volcstack/request.Request" representing the
// client's request for the ListBackups operation. The "output" return
// value will be populated with the ListBackupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListBackupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListBackupsCommon Send returns without error.
//
// See ListBackups for more information on using the ListBackups
// API call, and error handling.
//
//    // Example sending a request using the ListBackupsRequest method.
//    req, resp := client.ListBackupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListBackupsRequest(input *ListBackupsInput) (req *request.Request, output *ListBackupsOutput) {
	op := &request.Operation{
		Name:       opListBackups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListBackupsInput{}
	}

	output = &ListBackupsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListBackups API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListBackups for usage and error information.
func (c *RDSMYSQL) ListBackups(input *ListBackupsInput) (*ListBackupsOutput, error) {
	req, out := c.ListBackupsRequest(input)
	return out, req.Send()
}

// ListBackupsWithContext is the same as ListBackups with the addition of
// the ability to pass a context and additional request options.
//
// See ListBackups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListBackupsWithContext(ctx volcstack.Context, input *ListBackupsInput, opts ...request.Option) (*ListBackupsOutput, error) {
	req, out := c.ListBackupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDBInstanceIPListsCommon = "ListDBInstanceIPLists"

// ListDBInstanceIPListsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ListDBInstanceIPListsCommon operation. The "output" return
// value will be populated with the ListDBInstanceIPListsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDBInstanceIPListsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDBInstanceIPListsCommon Send returns without error.
//
// See ListDBInstanceIPListsCommon for more information on using the ListDBInstanceIPListsCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDBInstanceIPListsCommonRequest method.
//    req, resp := client.ListDBInstanceIPListsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListDBInstanceIPListsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDBInstanceIPListsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDBInstanceIPListsCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListDBInstanceIPListsCommon for usage and error information.
func (c *RDSMYSQL) ListDBInstanceIPListsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDBInstanceIPListsCommonRequest(input)
	return out, req.Send()
}

// ListDBInstanceIPListsCommonWithContext is the same as ListDBInstanceIPListsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDBInstanceIPListsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListDBInstanceIPListsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDBInstanceIPListsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDBInstanceIPLists = "ListDBInstanceIPLists"

// ListDBInstanceIPListsRequest generates a "volcstack/request.Request" representing the
// client's request for the ListDBInstanceIPLists operation. The "output" return
// value will be populated with the ListDBInstanceIPListsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDBInstanceIPListsCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDBInstanceIPListsCommon Send returns without error.
//
// See ListDBInstanceIPLists for more information on using the ListDBInstanceIPLists
// API call, and error handling.
//
//    // Example sending a request using the ListDBInstanceIPListsRequest method.
//    req, resp := client.ListDBInstanceIPListsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListDBInstanceIPListsRequest(input *ListDBInstanceIPListsInput) (req *request.Request, output *ListDBInstanceIPListsOutput) {
	op := &request.Operation{
		Name:       opListDBInstanceIPLists,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDBInstanceIPListsInput{}
	}

	output = &ListDBInstanceIPListsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDBInstanceIPLists API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListDBInstanceIPLists for usage and error information.
func (c *RDSMYSQL) ListDBInstanceIPLists(input *ListDBInstanceIPListsInput) (*ListDBInstanceIPListsOutput, error) {
	req, out := c.ListDBInstanceIPListsRequest(input)
	return out, req.Send()
}

// ListDBInstanceIPListsWithContext is the same as ListDBInstanceIPLists with the addition of
// the ability to pass a context and additional request options.
//
// See ListDBInstanceIPLists for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListDBInstanceIPListsWithContext(ctx volcstack.Context, input *ListDBInstanceIPListsInput, opts ...request.Option) (*ListDBInstanceIPListsOutput, error) {
	req, out := c.ListDBInstanceIPListsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDBInstancesCommon = "ListDBInstances"

// ListDBInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ListDBInstancesCommon operation. The "output" return
// value will be populated with the ListDBInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDBInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDBInstancesCommon Send returns without error.
//
// See ListDBInstancesCommon for more information on using the ListDBInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDBInstancesCommonRequest method.
//    req, resp := client.ListDBInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListDBInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDBInstancesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDBInstancesCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListDBInstancesCommon for usage and error information.
func (c *RDSMYSQL) ListDBInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDBInstancesCommonRequest(input)
	return out, req.Send()
}

// ListDBInstancesCommonWithContext is the same as ListDBInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDBInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListDBInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDBInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDBInstances = "ListDBInstances"

// ListDBInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the ListDBInstances operation. The "output" return
// value will be populated with the ListDBInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDBInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDBInstancesCommon Send returns without error.
//
// See ListDBInstances for more information on using the ListDBInstances
// API call, and error handling.
//
//    // Example sending a request using the ListDBInstancesRequest method.
//    req, resp := client.ListDBInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListDBInstancesRequest(input *ListDBInstancesInput) (req *request.Request, output *ListDBInstancesOutput) {
	op := &request.Operation{
		Name:       opListDBInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDBInstancesInput{}
	}

	output = &ListDBInstancesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDBInstances API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListDBInstances for usage and error information.
func (c *RDSMYSQL) ListDBInstances(input *ListDBInstancesInput) (*ListDBInstancesOutput, error) {
	req, out := c.ListDBInstancesRequest(input)
	return out, req.Send()
}

// ListDBInstancesWithContext is the same as ListDBInstances with the addition of
// the ability to pass a context and additional request options.
//
// See ListDBInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListDBInstancesWithContext(ctx volcstack.Context, input *ListDBInstancesInput, opts ...request.Option) (*ListDBInstancesOutput, error) {
	req, out := c.ListDBInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDatabasesCommon = "ListDatabases"

// ListDatabasesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ListDatabasesCommon operation. The "output" return
// value will be populated with the ListDatabasesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDatabasesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDatabasesCommon Send returns without error.
//
// See ListDatabasesCommon for more information on using the ListDatabasesCommon
// API call, and error handling.
//
//    // Example sending a request using the ListDatabasesCommonRequest method.
//    req, resp := client.ListDatabasesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListDatabasesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListDatabasesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDatabasesCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListDatabasesCommon for usage and error information.
func (c *RDSMYSQL) ListDatabasesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListDatabasesCommonRequest(input)
	return out, req.Send()
}

// ListDatabasesCommonWithContext is the same as ListDatabasesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListDatabasesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListDatabasesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListDatabasesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListDatabases = "ListDatabases"

// ListDatabasesRequest generates a "volcstack/request.Request" representing the
// client's request for the ListDatabases operation. The "output" return
// value will be populated with the ListDatabasesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListDatabasesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListDatabasesCommon Send returns without error.
//
// See ListDatabases for more information on using the ListDatabases
// API call, and error handling.
//
//    // Example sending a request using the ListDatabasesRequest method.
//    req, resp := client.ListDatabasesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ListDatabasesRequest(input *ListDatabasesInput) (req *request.Request, output *ListDatabasesOutput) {
	op := &request.Operation{
		Name:       opListDatabases,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListDatabasesInput{}
	}

	output = &ListDatabasesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ListDatabases API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ListDatabases for usage and error information.
func (c *RDSMYSQL) ListDatabases(input *ListDatabasesInput) (*ListDatabasesOutput, error) {
	req, out := c.ListDatabasesRequest(input)
	return out, req.Send()
}

// ListDatabasesWithContext is the same as ListDatabases with the addition of
// the ability to pass a context and additional request options.
//
// See ListDatabases for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ListDatabasesWithContext(ctx volcstack.Context, input *ListDatabasesInput, opts ...request.Option) (*ListDatabasesOutput, error) {
	req, out := c.ListDatabasesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceIPListCommon = "ModifyDBInstanceIPList"

// ModifyDBInstanceIPListCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBInstanceIPListCommon operation. The "output" return
// value will be populated with the ModifyDBInstanceIPListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceIPListCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceIPListCommon Send returns without error.
//
// See ModifyDBInstanceIPListCommon for more information on using the ModifyDBInstanceIPListCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceIPListCommonRequest method.
//    req, resp := client.ModifyDBInstanceIPListCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ModifyDBInstanceIPListCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBInstanceIPListCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceIPListCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ModifyDBInstanceIPListCommon for usage and error information.
func (c *RDSMYSQL) ModifyDBInstanceIPListCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceIPListCommonRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceIPListCommonWithContext is the same as ModifyDBInstanceIPListCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceIPListCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ModifyDBInstanceIPListCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceIPListCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceIPList = "ModifyDBInstanceIPList"

// ModifyDBInstanceIPListRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBInstanceIPList operation. The "output" return
// value will be populated with the ModifyDBInstanceIPListCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceIPListCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceIPListCommon Send returns without error.
//
// See ModifyDBInstanceIPList for more information on using the ModifyDBInstanceIPList
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceIPListRequest method.
//    req, resp := client.ModifyDBInstanceIPListRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ModifyDBInstanceIPListRequest(input *ModifyDBInstanceIPListInput) (req *request.Request, output *ModifyDBInstanceIPListOutput) {
	op := &request.Operation{
		Name:       opModifyDBInstanceIPList,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBInstanceIPListInput{}
	}

	output = &ModifyDBInstanceIPListOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyDBInstanceIPList API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ModifyDBInstanceIPList for usage and error information.
func (c *RDSMYSQL) ModifyDBInstanceIPList(input *ModifyDBInstanceIPListInput) (*ModifyDBInstanceIPListOutput, error) {
	req, out := c.ModifyDBInstanceIPListRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceIPListWithContext is the same as ModifyDBInstanceIPList with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceIPList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ModifyDBInstanceIPListWithContext(ctx volcstack.Context, input *ModifyDBInstanceIPListInput, opts ...request.Option) (*ModifyDBInstanceIPListOutput, error) {
	req, out := c.ModifyDBInstanceIPListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRecoveryDBInstanceCommon = "RecoveryDBInstance"

// RecoveryDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RecoveryDBInstanceCommon operation. The "output" return
// value will be populated with the RecoveryDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RecoveryDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RecoveryDBInstanceCommon Send returns without error.
//
// See RecoveryDBInstanceCommon for more information on using the RecoveryDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RecoveryDBInstanceCommonRequest method.
//    req, resp := client.RecoveryDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) RecoveryDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRecoveryDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RecoveryDBInstanceCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation RecoveryDBInstanceCommon for usage and error information.
func (c *RDSMYSQL) RecoveryDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RecoveryDBInstanceCommonRequest(input)
	return out, req.Send()
}

// RecoveryDBInstanceCommonWithContext is the same as RecoveryDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RecoveryDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) RecoveryDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RecoveryDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRecoveryDBInstance = "RecoveryDBInstance"

// RecoveryDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RecoveryDBInstance operation. The "output" return
// value will be populated with the RecoveryDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RecoveryDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RecoveryDBInstanceCommon Send returns without error.
//
// See RecoveryDBInstance for more information on using the RecoveryDBInstance
// API call, and error handling.
//
//    // Example sending a request using the RecoveryDBInstanceRequest method.
//    req, resp := client.RecoveryDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) RecoveryDBInstanceRequest(input *RecoveryDBInstanceInput) (req *request.Request, output *RecoveryDBInstanceOutput) {
	op := &request.Operation{
		Name:       opRecoveryDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RecoveryDBInstanceInput{}
	}

	output = &RecoveryDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RecoveryDBInstance API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation RecoveryDBInstance for usage and error information.
func (c *RDSMYSQL) RecoveryDBInstance(input *RecoveryDBInstanceInput) (*RecoveryDBInstanceOutput, error) {
	req, out := c.RecoveryDBInstanceRequest(input)
	return out, req.Send()
}

// RecoveryDBInstanceWithContext is the same as RecoveryDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RecoveryDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) RecoveryDBInstanceWithContext(ctx volcstack.Context, input *RecoveryDBInstanceInput, opts ...request.Option) (*RecoveryDBInstanceOutput, error) {
	req, out := c.RecoveryDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetAccountPasswordCommon = "ResetAccountPassword"

// ResetAccountPasswordCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetAccountPasswordCommon operation. The "output" return
// value will be populated with the ResetAccountPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetAccountPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetAccountPasswordCommon Send returns without error.
//
// See ResetAccountPasswordCommon for more information on using the ResetAccountPasswordCommon
// API call, and error handling.
//
//    // Example sending a request using the ResetAccountPasswordCommonRequest method.
//    req, resp := client.ResetAccountPasswordCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ResetAccountPasswordCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetAccountPasswordCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetAccountPasswordCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ResetAccountPasswordCommon for usage and error information.
func (c *RDSMYSQL) ResetAccountPasswordCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetAccountPasswordCommonRequest(input)
	return out, req.Send()
}

// ResetAccountPasswordCommonWithContext is the same as ResetAccountPasswordCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAccountPasswordCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ResetAccountPasswordCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetAccountPasswordCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetAccountPassword = "ResetAccountPassword"

// ResetAccountPasswordRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetAccountPassword operation. The "output" return
// value will be populated with the ResetAccountPasswordCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetAccountPasswordCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetAccountPasswordCommon Send returns without error.
//
// See ResetAccountPassword for more information on using the ResetAccountPassword
// API call, and error handling.
//
//    // Example sending a request using the ResetAccountPasswordRequest method.
//    req, resp := client.ResetAccountPasswordRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) ResetAccountPasswordRequest(input *ResetAccountPasswordInput) (req *request.Request, output *ResetAccountPasswordOutput) {
	op := &request.Operation{
		Name:       opResetAccountPassword,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetAccountPasswordInput{}
	}

	output = &ResetAccountPasswordOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResetAccountPassword API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation ResetAccountPassword for usage and error information.
func (c *RDSMYSQL) ResetAccountPassword(input *ResetAccountPasswordInput) (*ResetAccountPasswordOutput, error) {
	req, out := c.ResetAccountPasswordRequest(input)
	return out, req.Send()
}

// ResetAccountPasswordWithContext is the same as ResetAccountPassword with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAccountPassword for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) ResetAccountPasswordWithContext(ctx volcstack.Context, input *ResetAccountPasswordInput, opts ...request.Option) (*ResetAccountPasswordOutput, error) {
	req, out := c.ResetAccountPasswordRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestartDBInstanceCommon = "RestartDBInstance"

// RestartDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RestartDBInstanceCommon operation. The "output" return
// value will be populated with the RestartDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestartDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestartDBInstanceCommon Send returns without error.
//
// See RestartDBInstanceCommon for more information on using the RestartDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RestartDBInstanceCommonRequest method.
//    req, resp := client.RestartDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) RestartDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestartDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestartDBInstanceCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation RestartDBInstanceCommon for usage and error information.
func (c *RDSMYSQL) RestartDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestartDBInstanceCommonRequest(input)
	return out, req.Send()
}

// RestartDBInstanceCommonWithContext is the same as RestartDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RestartDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) RestartDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestartDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestartDBInstance = "RestartDBInstance"

// RestartDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RestartDBInstance operation. The "output" return
// value will be populated with the RestartDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestartDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestartDBInstanceCommon Send returns without error.
//
// See RestartDBInstance for more information on using the RestartDBInstance
// API call, and error handling.
//
//    // Example sending a request using the RestartDBInstanceRequest method.
//    req, resp := client.RestartDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) RestartDBInstanceRequest(input *RestartDBInstanceInput) (req *request.Request, output *RestartDBInstanceOutput) {
	op := &request.Operation{
		Name:       opRestartDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestartDBInstanceInput{}
	}

	output = &RestartDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// RestartDBInstance API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation RestartDBInstance for usage and error information.
func (c *RDSMYSQL) RestartDBInstance(input *RestartDBInstanceInput) (*RestartDBInstanceOutput, error) {
	req, out := c.RestartDBInstanceRequest(input)
	return out, req.Send()
}

// RestartDBInstanceWithContext is the same as RestartDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RestartDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) RestartDBInstanceWithContext(ctx volcstack.Context, input *RestartDBInstanceInput, opts ...request.Option) (*RestartDBInstanceOutput, error) {
	req, out := c.RestartDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRevokeAccountPrivilegeCommon = "RevokeAccountPrivilege"

// RevokeAccountPrivilegeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RevokeAccountPrivilegeCommon operation. The "output" return
// value will be populated with the RevokeAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokeAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokeAccountPrivilegeCommon Send returns without error.
//
// See RevokeAccountPrivilegeCommon for more information on using the RevokeAccountPrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the RevokeAccountPrivilegeCommonRequest method.
//    req, resp := client.RevokeAccountPrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) RevokeAccountPrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRevokeAccountPrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RevokeAccountPrivilegeCommon API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation RevokeAccountPrivilegeCommon for usage and error information.
func (c *RDSMYSQL) RevokeAccountPrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RevokeAccountPrivilegeCommonRequest(input)
	return out, req.Send()
}

// RevokeAccountPrivilegeCommonWithContext is the same as RevokeAccountPrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RevokeAccountPrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) RevokeAccountPrivilegeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RevokeAccountPrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRevokeAccountPrivilege = "RevokeAccountPrivilege"

// RevokeAccountPrivilegeRequest generates a "volcstack/request.Request" representing the
// client's request for the RevokeAccountPrivilege operation. The "output" return
// value will be populated with the RevokeAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RevokeAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after RevokeAccountPrivilegeCommon Send returns without error.
//
// See RevokeAccountPrivilege for more information on using the RevokeAccountPrivilege
// API call, and error handling.
//
//    // Example sending a request using the RevokeAccountPrivilegeRequest method.
//    req, resp := client.RevokeAccountPrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) RevokeAccountPrivilegeRequest(input *RevokeAccountPrivilegeInput) (req *request.Request, output *RevokeAccountPrivilegeOutput) {
	op := &request.Operation{
		Name:       opRevokeAccountPrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RevokeAccountPrivilegeInput{}
	}

	output = &RevokeAccountPrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// RevokeAccountPrivilege API operation for RDS_MYSQL.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL's
// API operation RevokeAccountPrivilege for usage and error information.
func (c *RDSMYSQL) RevokeAccountPrivilege(input *RevokeAccountPrivilegeInput) (*RevokeAccountPrivilegeOutput, error) {
	req, out := c.RevokeAccountPrivilegeRequest(input)
	return out, req.Send()
}

// RevokeAccountPrivilegeWithContext is the same as RevokeAccountPrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See RevokeAccountPrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) RevokeAccountPrivilegeWithContext(ctx volcstack.Context, input *RevokeAccountPrivilegeInput, opts ...request.Option) (*RevokeAccountPrivilegeOutput, error) {
	req, out := c.RevokeAccountPrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BasicInfoForDescribeDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	ChargeStatus *string `type:"string"`

	ChargeType *string `type:"string"`

	CreateTime *string `type:"string"`

	DBEngine *string `type:"string"`

	DBEngineVersion *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceSpec *InstanceSpecForDescribeDBInstanceOutput `type:"structure"`

	InstanceStatus *string `type:"string"`

	InstanceType *string `type:"string"`

	ReadOnlyInstanceIds []*string `type:"list"`

	Region *string `type:"string"`

	StorageSpaceGB *int32 `type:"int32"`

	UpdateTime *string `type:"string"`

	VpcID *string `type:"string"`

	Zone *string `type:"string"`
}

// String returns the string representation
func (s BasicInfoForDescribeDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BasicInfoForDescribeDBInstanceOutput) GoString() string {
	return s.String()
}

// SetChargeStatus sets the ChargeStatus field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetChargeStatus(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.ChargeStatus = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetChargeType(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.ChargeType = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetCreateTime(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.CreateTime = &v
	return s
}

// SetDBEngine sets the DBEngine field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetDBEngine(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.DBEngine = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetDBEngineVersion(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.DBEngineVersion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetInstanceId(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetInstanceName(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.InstanceName = &v
	return s
}

// SetInstanceSpec sets the InstanceSpec field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetInstanceSpec(v *InstanceSpecForDescribeDBInstanceOutput) *BasicInfoForDescribeDBInstanceOutput {
	s.InstanceSpec = v
	return s
}

// SetInstanceStatus sets the InstanceStatus field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetInstanceStatus(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.InstanceStatus = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetInstanceType(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.InstanceType = &v
	return s
}

// SetReadOnlyInstanceIds sets the ReadOnlyInstanceIds field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetReadOnlyInstanceIds(v []*string) *BasicInfoForDescribeDBInstanceOutput {
	s.ReadOnlyInstanceIds = v
	return s
}

// SetRegion sets the Region field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetRegion(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.Region = &v
	return s
}

// SetStorageSpaceGB sets the StorageSpaceGB field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetStorageSpaceGB(v int32) *BasicInfoForDescribeDBInstanceOutput {
	s.StorageSpaceGB = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetUpdateTime(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.UpdateTime = &v
	return s
}

// SetVpcID sets the VpcID field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetVpcID(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.VpcID = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *BasicInfoForDescribeDBInstanceOutput) SetZone(v string) *BasicInfoForDescribeDBInstanceOutput {
	s.Zone = &v
	return s
}

type ConnectionInfoForDescribeDBInstanceConnectionOutput struct {
	_ struct{} `type:"structure"`

	EnableReadOnly *string `type:"string"`

	EnableReadWriteSplitting *string `type:"string"`

	InternalDomain *string `type:"string"`

	InternalPort *string `type:"string"`

	PublicDomain *string `type:"string"`

	PublicPort *string `type:"string"`
}

// String returns the string representation
func (s ConnectionInfoForDescribeDBInstanceConnectionOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ConnectionInfoForDescribeDBInstanceConnectionOutput) GoString() string {
	return s.String()
}

// SetEnableReadOnly sets the EnableReadOnly field's value.
func (s *ConnectionInfoForDescribeDBInstanceConnectionOutput) SetEnableReadOnly(v string) *ConnectionInfoForDescribeDBInstanceConnectionOutput {
	s.EnableReadOnly = &v
	return s
}

// SetEnableReadWriteSplitting sets the EnableReadWriteSplitting field's value.
func (s *ConnectionInfoForDescribeDBInstanceConnectionOutput) SetEnableReadWriteSplitting(v string) *ConnectionInfoForDescribeDBInstanceConnectionOutput {
	s.EnableReadWriteSplitting = &v
	return s
}

// SetInternalDomain sets the InternalDomain field's value.
func (s *ConnectionInfoForDescribeDBInstanceConnectionOutput) SetInternalDomain(v string) *ConnectionInfoForDescribeDBInstanceConnectionOutput {
	s.InternalDomain = &v
	return s
}

// SetInternalPort sets the InternalPort field's value.
func (s *ConnectionInfoForDescribeDBInstanceConnectionOutput) SetInternalPort(v string) *ConnectionInfoForDescribeDBInstanceConnectionOutput {
	s.InternalPort = &v
	return s
}

// SetPublicDomain sets the PublicDomain field's value.
func (s *ConnectionInfoForDescribeDBInstanceConnectionOutput) SetPublicDomain(v string) *ConnectionInfoForDescribeDBInstanceConnectionOutput {
	s.PublicDomain = &v
	return s
}

// SetPublicPort sets the PublicPort field's value.
func (s *ConnectionInfoForDescribeDBInstanceConnectionOutput) SetPublicPort(v string) *ConnectionInfoForDescribeDBInstanceConnectionOutput {
	s.PublicPort = &v
	return s
}

type ConnectionInfoForDescribeDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	EnableReadOnly *string `type:"string"`

	EnableReadWriteSplitting *string `type:"string"`

	InternalDomain *string `type:"string"`

	InternalPort *string `type:"string"`

	PublicDomain *string `type:"string"`

	PublicPort *string `type:"string"`
}

// String returns the string representation
func (s ConnectionInfoForDescribeDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ConnectionInfoForDescribeDBInstanceOutput) GoString() string {
	return s.String()
}

// SetEnableReadOnly sets the EnableReadOnly field's value.
func (s *ConnectionInfoForDescribeDBInstanceOutput) SetEnableReadOnly(v string) *ConnectionInfoForDescribeDBInstanceOutput {
	s.EnableReadOnly = &v
	return s
}

// SetEnableReadWriteSplitting sets the EnableReadWriteSplitting field's value.
func (s *ConnectionInfoForDescribeDBInstanceOutput) SetEnableReadWriteSplitting(v string) *ConnectionInfoForDescribeDBInstanceOutput {
	s.EnableReadWriteSplitting = &v
	return s
}

// SetInternalDomain sets the InternalDomain field's value.
func (s *ConnectionInfoForDescribeDBInstanceOutput) SetInternalDomain(v string) *ConnectionInfoForDescribeDBInstanceOutput {
	s.InternalDomain = &v
	return s
}

// SetInternalPort sets the InternalPort field's value.
func (s *ConnectionInfoForDescribeDBInstanceOutput) SetInternalPort(v string) *ConnectionInfoForDescribeDBInstanceOutput {
	s.InternalPort = &v
	return s
}

// SetPublicDomain sets the PublicDomain field's value.
func (s *ConnectionInfoForDescribeDBInstanceOutput) SetPublicDomain(v string) *ConnectionInfoForDescribeDBInstanceOutput {
	s.PublicDomain = &v
	return s
}

// SetPublicPort sets the PublicPort field's value.
func (s *ConnectionInfoForDescribeDBInstanceOutput) SetPublicPort(v string) *ConnectionInfoForDescribeDBInstanceOutput {
	s.PublicPort = &v
	return s
}

type CreateAccountInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPassword *string `type:"string"`

	AccountType *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateAccountInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAccountInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *CreateAccountInput) SetAccountName(v string) *CreateAccountInput {
	s.AccountName = &v
	return s
}

// SetAccountPassword sets the AccountPassword field's value.
func (s *CreateAccountInput) SetAccountPassword(v string) *CreateAccountInput {
	s.AccountPassword = &v
	return s
}

// SetAccountType sets the AccountType field's value.
func (s *CreateAccountInput) SetAccountType(v string) *CreateAccountInput {
	s.AccountType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateAccountInput) SetInstanceId(v string) *CreateAccountInput {
	s.InstanceId = &v
	return s
}

type CreateAccountOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s CreateAccountOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAccountOutput) GoString() string {
	return s.String()
}

type CreateBackupInput struct {
	_ struct{} `type:"structure"`

	BackupDataType *string `type:"string"`

	BackupMode *string `type:"string"`

	BackupStrategy *string `type:"string"`

	BackupType *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateBackupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupInput) GoString() string {
	return s.String()
}

// SetBackupDataType sets the BackupDataType field's value.
func (s *CreateBackupInput) SetBackupDataType(v string) *CreateBackupInput {
	s.BackupDataType = &v
	return s
}

// SetBackupMode sets the BackupMode field's value.
func (s *CreateBackupInput) SetBackupMode(v string) *CreateBackupInput {
	s.BackupMode = &v
	return s
}

// SetBackupStrategy sets the BackupStrategy field's value.
func (s *CreateBackupInput) SetBackupStrategy(v string) *CreateBackupInput {
	s.BackupStrategy = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *CreateBackupInput) SetBackupType(v string) *CreateBackupInput {
	s.BackupType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateBackupInput) SetInstanceId(v string) *CreateBackupInput {
	s.InstanceId = &v
	return s
}

type CreateBackupOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s CreateBackupOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupOutput) GoString() string {
	return s.String()
}

type CreateDBInstanceIPListInput struct {
	_ struct{} `type:"structure"`

	GroupName *string `type:"string"`

	IPList []*string `type:"list"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateDBInstanceIPListInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceIPListInput) GoString() string {
	return s.String()
}

// SetGroupName sets the GroupName field's value.
func (s *CreateDBInstanceIPListInput) SetGroupName(v string) *CreateDBInstanceIPListInput {
	s.GroupName = &v
	return s
}

// SetIPList sets the IPList field's value.
func (s *CreateDBInstanceIPListInput) SetIPList(v []*string) *CreateDBInstanceIPListInput {
	s.IPList = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBInstanceIPListInput) SetInstanceId(v string) *CreateDBInstanceIPListInput {
	s.InstanceId = &v
	return s
}

type CreateDBInstanceIPListOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s CreateDBInstanceIPListOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceIPListOutput) GoString() string {
	return s.String()
}

type CreateDBInstanceInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	ChargeType *string `type:"string"`

	DBEngine *string `type:"string"`

	DBEngineVersion *string `type:"string"`

	InstanceCategory *string `type:"string"`

	InstanceSpecName *string `type:"string"`

	InstanceType *string `type:"string"`

	Number *int32 `type:"int32"`

	PrepaidPeriod *string `type:"string"`

	Region *string `type:"string"`

	StorageSpaceGB *int32 `type:"int32"`

	StorageType *string `type:"string"`

	UsedTime *int32 `type:"int32"`

	VpcID *string `type:"string"`

	Zone *string `type:"string"`
}

// String returns the string representation
func (s CreateDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *CreateDBInstanceInput) SetAutoRenew(v bool) *CreateDBInstanceInput {
	s.AutoRenew = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *CreateDBInstanceInput) SetChargeType(v string) *CreateDBInstanceInput {
	s.ChargeType = &v
	return s
}

// SetDBEngine sets the DBEngine field's value.
func (s *CreateDBInstanceInput) SetDBEngine(v string) *CreateDBInstanceInput {
	s.DBEngine = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *CreateDBInstanceInput) SetDBEngineVersion(v string) *CreateDBInstanceInput {
	s.DBEngineVersion = &v
	return s
}

// SetInstanceCategory sets the InstanceCategory field's value.
func (s *CreateDBInstanceInput) SetInstanceCategory(v string) *CreateDBInstanceInput {
	s.InstanceCategory = &v
	return s
}

// SetInstanceSpecName sets the InstanceSpecName field's value.
func (s *CreateDBInstanceInput) SetInstanceSpecName(v string) *CreateDBInstanceInput {
	s.InstanceSpecName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *CreateDBInstanceInput) SetInstanceType(v string) *CreateDBInstanceInput {
	s.InstanceType = &v
	return s
}

// SetNumber sets the Number field's value.
func (s *CreateDBInstanceInput) SetNumber(v int32) *CreateDBInstanceInput {
	s.Number = &v
	return s
}

// SetPrepaidPeriod sets the PrepaidPeriod field's value.
func (s *CreateDBInstanceInput) SetPrepaidPeriod(v string) *CreateDBInstanceInput {
	s.PrepaidPeriod = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *CreateDBInstanceInput) SetRegion(v string) *CreateDBInstanceInput {
	s.Region = &v
	return s
}

// SetStorageSpaceGB sets the StorageSpaceGB field's value.
func (s *CreateDBInstanceInput) SetStorageSpaceGB(v int32) *CreateDBInstanceInput {
	s.StorageSpaceGB = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *CreateDBInstanceInput) SetStorageType(v string) *CreateDBInstanceInput {
	s.StorageType = &v
	return s
}

// SetUsedTime sets the UsedTime field's value.
func (s *CreateDBInstanceInput) SetUsedTime(v int32) *CreateDBInstanceInput {
	s.UsedTime = &v
	return s
}

// SetVpcID sets the VpcID field's value.
func (s *CreateDBInstanceInput) SetVpcID(v string) *CreateDBInstanceInput {
	s.VpcID = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *CreateDBInstanceInput) SetZone(v string) *CreateDBInstanceInput {
	s.Zone = &v
	return s
}

type CreateDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBInstanceOutput) SetInstanceId(v string) *CreateDBInstanceOutput {
	s.InstanceId = &v
	return s
}

type CreateDatabaseInput struct {
	_ struct{} `type:"structure"`

	CharacterSetName *string `type:"string"`

	DBName *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateDatabaseInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDatabaseInput) GoString() string {
	return s.String()
}

// SetCharacterSetName sets the CharacterSetName field's value.
func (s *CreateDatabaseInput) SetCharacterSetName(v string) *CreateDatabaseInput {
	s.CharacterSetName = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *CreateDatabaseInput) SetDBName(v string) *CreateDatabaseInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDatabaseInput) SetInstanceId(v string) *CreateDatabaseInput {
	s.InstanceId = &v
	return s
}

type CreateDatabaseOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s CreateDatabaseOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDatabaseOutput) GoString() string {
	return s.String()
}

type DBPrivilegeForListAccountsOutput struct {
	_ struct{} `type:"structure"`

	AccountPrivilege *string `type:"string"`

	AccountPrivilegeStr *string `type:"string"`

	DBName *string `type:"string"`
}

// String returns the string representation
func (s DBPrivilegeForListAccountsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DBPrivilegeForListAccountsOutput) GoString() string {
	return s.String()
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *DBPrivilegeForListAccountsOutput) SetAccountPrivilege(v string) *DBPrivilegeForListAccountsOutput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeStr sets the AccountPrivilegeStr field's value.
func (s *DBPrivilegeForListAccountsOutput) SetAccountPrivilegeStr(v string) *DBPrivilegeForListAccountsOutput {
	s.AccountPrivilegeStr = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *DBPrivilegeForListAccountsOutput) SetDBName(v string) *DBPrivilegeForListAccountsOutput {
	s.DBName = &v
	return s
}

type DataForListAccountsOutput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountStatus *string `type:"string"`

	AccountType *string `type:"string"`

	DBPrivileges []*DBPrivilegeForListAccountsOutput `type:"list"`
}

// String returns the string representation
func (s DataForListAccountsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListAccountsOutput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *DataForListAccountsOutput) SetAccountName(v string) *DataForListAccountsOutput {
	s.AccountName = &v
	return s
}

// SetAccountStatus sets the AccountStatus field's value.
func (s *DataForListAccountsOutput) SetAccountStatus(v string) *DataForListAccountsOutput {
	s.AccountStatus = &v
	return s
}

// SetAccountType sets the AccountType field's value.
func (s *DataForListAccountsOutput) SetAccountType(v string) *DataForListAccountsOutput {
	s.AccountType = &v
	return s
}

// SetDBPrivileges sets the DBPrivileges field's value.
func (s *DataForListAccountsOutput) SetDBPrivileges(v []*DBPrivilegeForListAccountsOutput) *DataForListAccountsOutput {
	s.DBPrivileges = v
	return s
}

type DataForListBackupsOutput struct {
	_ struct{} `type:"structure"`

	BackupEndTime *string `type:"string"`

	BackupFileName *string `type:"string"`

	BackupFileSize *int64 `type:"int64"`

	BackupId *string `type:"string"`

	BackupMode *string `type:"string"`

	BackupStartTime *string `type:"string"`

	BackupStatus *string `type:"string"`

	BackupStrategy *string `type:"string"`

	BackupType *string `type:"string"`

	CreateType *string `type:"string"`
}

// String returns the string representation
func (s DataForListBackupsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListBackupsOutput) GoString() string {
	return s.String()
}

// SetBackupEndTime sets the BackupEndTime field's value.
func (s *DataForListBackupsOutput) SetBackupEndTime(v string) *DataForListBackupsOutput {
	s.BackupEndTime = &v
	return s
}

// SetBackupFileName sets the BackupFileName field's value.
func (s *DataForListBackupsOutput) SetBackupFileName(v string) *DataForListBackupsOutput {
	s.BackupFileName = &v
	return s
}

// SetBackupFileSize sets the BackupFileSize field's value.
func (s *DataForListBackupsOutput) SetBackupFileSize(v int64) *DataForListBackupsOutput {
	s.BackupFileSize = &v
	return s
}

// SetBackupId sets the BackupId field's value.
func (s *DataForListBackupsOutput) SetBackupId(v string) *DataForListBackupsOutput {
	s.BackupId = &v
	return s
}

// SetBackupMode sets the BackupMode field's value.
func (s *DataForListBackupsOutput) SetBackupMode(v string) *DataForListBackupsOutput {
	s.BackupMode = &v
	return s
}

// SetBackupStartTime sets the BackupStartTime field's value.
func (s *DataForListBackupsOutput) SetBackupStartTime(v string) *DataForListBackupsOutput {
	s.BackupStartTime = &v
	return s
}

// SetBackupStatus sets the BackupStatus field's value.
func (s *DataForListBackupsOutput) SetBackupStatus(v string) *DataForListBackupsOutput {
	s.BackupStatus = &v
	return s
}

// SetBackupStrategy sets the BackupStrategy field's value.
func (s *DataForListBackupsOutput) SetBackupStrategy(v string) *DataForListBackupsOutput {
	s.BackupStrategy = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *DataForListBackupsOutput) SetBackupType(v string) *DataForListBackupsOutput {
	s.BackupType = &v
	return s
}

// SetCreateType sets the CreateType field's value.
func (s *DataForListBackupsOutput) SetCreateType(v string) *DataForListBackupsOutput {
	s.CreateType = &v
	return s
}

type DataForListDBInstanceIPListsOutput struct {
	_ struct{} `type:"structure"`

	GroupName *string `type:"string"`

	IPList []*string `type:"list"`
}

// String returns the string representation
func (s DataForListDBInstanceIPListsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListDBInstanceIPListsOutput) GoString() string {
	return s.String()
}

// SetGroupName sets the GroupName field's value.
func (s *DataForListDBInstanceIPListsOutput) SetGroupName(v string) *DataForListDBInstanceIPListsOutput {
	s.GroupName = &v
	return s
}

// SetIPList sets the IPList field's value.
func (s *DataForListDBInstanceIPListsOutput) SetIPList(v []*string) *DataForListDBInstanceIPListsOutput {
	s.IPList = v
	return s
}

type DataForListDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	ChargeStatus *string `type:"string"`

	ChargeType *string `type:"string"`

	CreateTime *string `type:"string"`

	DBEngine *string `type:"string"`

	DBEngineVersion *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceSpec *InstanceSpecForListDBInstancesOutput `type:"structure"`

	InstanceStatus *string `type:"string"`

	InstanceType *string `type:"string"`

	ReadOnlyInstanceIds []*string `type:"list"`

	Region *string `type:"string"`

	StorageSpaceGB *int32 `type:"int32"`

	UpdateTime *string `type:"string"`

	VpcID *string `type:"string"`

	Zone *string `type:"string"`
}

// String returns the string representation
func (s DataForListDBInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListDBInstancesOutput) GoString() string {
	return s.String()
}

// SetChargeStatus sets the ChargeStatus field's value.
func (s *DataForListDBInstancesOutput) SetChargeStatus(v string) *DataForListDBInstancesOutput {
	s.ChargeStatus = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *DataForListDBInstancesOutput) SetChargeType(v string) *DataForListDBInstancesOutput {
	s.ChargeType = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DataForListDBInstancesOutput) SetCreateTime(v string) *DataForListDBInstancesOutput {
	s.CreateTime = &v
	return s
}

// SetDBEngine sets the DBEngine field's value.
func (s *DataForListDBInstancesOutput) SetDBEngine(v string) *DataForListDBInstancesOutput {
	s.DBEngine = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *DataForListDBInstancesOutput) SetDBEngineVersion(v string) *DataForListDBInstancesOutput {
	s.DBEngineVersion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DataForListDBInstancesOutput) SetInstanceId(v string) *DataForListDBInstancesOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *DataForListDBInstancesOutput) SetInstanceName(v string) *DataForListDBInstancesOutput {
	s.InstanceName = &v
	return s
}

// SetInstanceSpec sets the InstanceSpec field's value.
func (s *DataForListDBInstancesOutput) SetInstanceSpec(v *InstanceSpecForListDBInstancesOutput) *DataForListDBInstancesOutput {
	s.InstanceSpec = v
	return s
}

// SetInstanceStatus sets the InstanceStatus field's value.
func (s *DataForListDBInstancesOutput) SetInstanceStatus(v string) *DataForListDBInstancesOutput {
	s.InstanceStatus = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DataForListDBInstancesOutput) SetInstanceType(v string) *DataForListDBInstancesOutput {
	s.InstanceType = &v
	return s
}

// SetReadOnlyInstanceIds sets the ReadOnlyInstanceIds field's value.
func (s *DataForListDBInstancesOutput) SetReadOnlyInstanceIds(v []*string) *DataForListDBInstancesOutput {
	s.ReadOnlyInstanceIds = v
	return s
}

// SetRegion sets the Region field's value.
func (s *DataForListDBInstancesOutput) SetRegion(v string) *DataForListDBInstancesOutput {
	s.Region = &v
	return s
}

// SetStorageSpaceGB sets the StorageSpaceGB field's value.
func (s *DataForListDBInstancesOutput) SetStorageSpaceGB(v int32) *DataForListDBInstancesOutput {
	s.StorageSpaceGB = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DataForListDBInstancesOutput) SetUpdateTime(v string) *DataForListDBInstancesOutput {
	s.UpdateTime = &v
	return s
}

// SetVpcID sets the VpcID field's value.
func (s *DataForListDBInstancesOutput) SetVpcID(v string) *DataForListDBInstancesOutput {
	s.VpcID = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *DataForListDBInstancesOutput) SetZone(v string) *DataForListDBInstancesOutput {
	s.Zone = &v
	return s
}

type DataForListDatabasesOutput struct {
	_ struct{} `type:"structure"`

	AccountNames *string `type:"string"`

	CharacterSetName *string `type:"string"`

	DBName *string `type:"string"`

	DBStatus *string `type:"string"`
}

// String returns the string representation
func (s DataForListDatabasesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DataForListDatabasesOutput) GoString() string {
	return s.String()
}

// SetAccountNames sets the AccountNames field's value.
func (s *DataForListDatabasesOutput) SetAccountNames(v string) *DataForListDatabasesOutput {
	s.AccountNames = &v
	return s
}

// SetCharacterSetName sets the CharacterSetName field's value.
func (s *DataForListDatabasesOutput) SetCharacterSetName(v string) *DataForListDatabasesOutput {
	s.CharacterSetName = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *DataForListDatabasesOutput) SetDBName(v string) *DataForListDatabasesOutput {
	s.DBName = &v
	return s
}

// SetDBStatus sets the DBStatus field's value.
func (s *DataForListDatabasesOutput) SetDBStatus(v string) *DataForListDatabasesOutput {
	s.DBStatus = &v
	return s
}

type DeleteDBInstanceIPListInput struct {
	_ struct{} `type:"structure"`

	GroupName *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDBInstanceIPListInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceIPListInput) GoString() string {
	return s.String()
}

// SetGroupName sets the GroupName field's value.
func (s *DeleteDBInstanceIPListInput) SetGroupName(v string) *DeleteDBInstanceIPListInput {
	s.GroupName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteDBInstanceIPListInput) SetInstanceId(v string) *DeleteDBInstanceIPListInput {
	s.InstanceId = &v
	return s
}

type DeleteDBInstanceIPListOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDBInstanceIPListOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceIPListOutput) GoString() string {
	return s.String()
}

type DeleteDBInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteDBInstanceInput) SetInstanceId(v string) *DeleteDBInstanceInput {
	s.InstanceId = &v
	return s
}

type DeleteDBInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceOutput) GoString() string {
	return s.String()
}

type DeleteDatabaseInput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDatabaseInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDatabaseInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *DeleteDatabaseInput) SetDBName(v string) *DeleteDatabaseInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteDatabaseInput) SetInstanceId(v string) *DeleteDatabaseInput {
	s.InstanceId = &v
	return s
}

type DeleteDatabaseOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDatabaseOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDatabaseOutput) GoString() string {
	return s.String()
}

type DescribeDBInstanceConnectionInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstanceConnectionInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceConnectionInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceConnectionInput) SetInstanceId(v string) *DescribeDBInstanceConnectionInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceConnectionOutput struct {
	_ struct{} `type:"structure"`

	ConnectionInfo *ConnectionInfoForDescribeDBInstanceConnectionOutput `type:"structure"`
}

// String returns the string representation
func (s DescribeDBInstanceConnectionOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceConnectionOutput) GoString() string {
	return s.String()
}

// SetConnectionInfo sets the ConnectionInfo field's value.
func (s *DescribeDBInstanceConnectionOutput) SetConnectionInfo(v *ConnectionInfoForDescribeDBInstanceConnectionOutput) *DescribeDBInstanceConnectionOutput {
	s.ConnectionInfo = v
	return s
}

type DescribeDBInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceInput) SetInstanceId(v string) *DescribeDBInstanceInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	BasicInfo *BasicInfoForDescribeDBInstanceOutput `type:"structure"`

	ConnectionInfo *ConnectionInfoForDescribeDBInstanceOutput `type:"structure"`

	DataSyncMode *string `type:"string"`

	StorageType *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceOutput) GoString() string {
	return s.String()
}

// SetBasicInfo sets the BasicInfo field's value.
func (s *DescribeDBInstanceOutput) SetBasicInfo(v *BasicInfoForDescribeDBInstanceOutput) *DescribeDBInstanceOutput {
	s.BasicInfo = v
	return s
}

// SetConnectionInfo sets the ConnectionInfo field's value.
func (s *DescribeDBInstanceOutput) SetConnectionInfo(v *ConnectionInfoForDescribeDBInstanceOutput) *DescribeDBInstanceOutput {
	s.ConnectionInfo = v
	return s
}

// SetDataSyncMode sets the DataSyncMode field's value.
func (s *DescribeDBInstanceOutput) SetDataSyncMode(v string) *DescribeDBInstanceOutput {
	s.DataSyncMode = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *DescribeDBInstanceOutput) SetStorageType(v string) *DescribeDBInstanceOutput {
	s.StorageType = &v
	return s
}

type DescribeRecoverableTimeInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeRecoverableTimeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRecoverableTimeInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeRecoverableTimeInput) SetInstanceId(v string) *DescribeRecoverableTimeInput {
	s.InstanceId = &v
	return s
}

type DescribeRecoverableTimeOutput struct {
	_ struct{} `type:"structure"`

	EarliestRecoverableTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeRecoverableTimeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRecoverableTimeOutput) GoString() string {
	return s.String()
}

// SetEarliestRecoverableTime sets the EarliestRecoverableTime field's value.
func (s *DescribeRecoverableTimeOutput) SetEarliestRecoverableTime(v string) *DescribeRecoverableTimeOutput {
	s.EarliestRecoverableTime = &v
	return s
}

type GrantAccountPrivilegeInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPrivilege *string `type:"string"`

	AccountPrivilegeStr *string `type:"string"`

	DBName *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s GrantAccountPrivilegeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantAccountPrivilegeInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *GrantAccountPrivilegeInput) SetAccountName(v string) *GrantAccountPrivilegeInput {
	s.AccountName = &v
	return s
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *GrantAccountPrivilegeInput) SetAccountPrivilege(v string) *GrantAccountPrivilegeInput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeStr sets the AccountPrivilegeStr field's value.
func (s *GrantAccountPrivilegeInput) SetAccountPrivilegeStr(v string) *GrantAccountPrivilegeInput {
	s.AccountPrivilegeStr = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *GrantAccountPrivilegeInput) SetDBName(v string) *GrantAccountPrivilegeInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *GrantAccountPrivilegeInput) SetInstanceId(v string) *GrantAccountPrivilegeInput {
	s.InstanceId = &v
	return s
}

type GrantAccountPrivilegeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s GrantAccountPrivilegeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantAccountPrivilegeOutput) GoString() string {
	return s.String()
}

type InstanceSpecForDescribeDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	CpuNum *float64 `type:"double"`

	MemInGb *float64 `type:"double"`

	SpecName *string `type:"string"`
}

// String returns the string representation
func (s InstanceSpecForDescribeDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceSpecForDescribeDBInstanceOutput) GoString() string {
	return s.String()
}

// SetCpuNum sets the CpuNum field's value.
func (s *InstanceSpecForDescribeDBInstanceOutput) SetCpuNum(v float64) *InstanceSpecForDescribeDBInstanceOutput {
	s.CpuNum = &v
	return s
}

// SetMemInGb sets the MemInGb field's value.
func (s *InstanceSpecForDescribeDBInstanceOutput) SetMemInGb(v float64) *InstanceSpecForDescribeDBInstanceOutput {
	s.MemInGb = &v
	return s
}

// SetSpecName sets the SpecName field's value.
func (s *InstanceSpecForDescribeDBInstanceOutput) SetSpecName(v string) *InstanceSpecForDescribeDBInstanceOutput {
	s.SpecName = &v
	return s
}

type InstanceSpecForListDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	CpuNum *float64 `type:"double"`

	MemInGb *float64 `type:"double"`

	SpecName *string `type:"string"`
}

// String returns the string representation
func (s InstanceSpecForListDBInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceSpecForListDBInstancesOutput) GoString() string {
	return s.String()
}

// SetCpuNum sets the CpuNum field's value.
func (s *InstanceSpecForListDBInstancesOutput) SetCpuNum(v float64) *InstanceSpecForListDBInstancesOutput {
	s.CpuNum = &v
	return s
}

// SetMemInGb sets the MemInGb field's value.
func (s *InstanceSpecForListDBInstancesOutput) SetMemInGb(v float64) *InstanceSpecForListDBInstancesOutput {
	s.MemInGb = &v
	return s
}

// SetSpecName sets the SpecName field's value.
func (s *InstanceSpecForListDBInstancesOutput) SetSpecName(v string) *InstanceSpecForListDBInstancesOutput {
	s.SpecName = &v
	return s
}

type ListAccountsInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	InstanceId *string `type:"string"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`
}

// String returns the string representation
func (s ListAccountsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAccountsInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *ListAccountsInput) SetAccountName(v string) *ListAccountsInput {
	s.AccountName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListAccountsInput) SetInstanceId(v string) *ListAccountsInput {
	s.InstanceId = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListAccountsInput) SetLimit(v int32) *ListAccountsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListAccountsInput) SetOffset(v int32) *ListAccountsInput {
	s.Offset = &v
	return s
}

type ListAccountsOutput struct {
	_ struct{} `type:"structure"`

	Datas []*DataForListAccountsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListAccountsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAccountsOutput) GoString() string {
	return s.String()
}

// SetDatas sets the Datas field's value.
func (s *ListAccountsOutput) SetDatas(v []*DataForListAccountsOutput) *ListAccountsOutput {
	s.Datas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListAccountsOutput) SetTotal(v int32) *ListAccountsOutput {
	s.Total = &v
	return s
}

type ListBackupsInput struct {
	_ struct{} `type:"structure"`

	BackupDataType *string `type:"string"`

	BackupStatus *string `type:"string"`

	EndTime *string `type:"string"`

	InstanceId *string `type:"string"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	StartTime *string `type:"string"`
}

// String returns the string representation
func (s ListBackupsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBackupsInput) GoString() string {
	return s.String()
}

// SetBackupDataType sets the BackupDataType field's value.
func (s *ListBackupsInput) SetBackupDataType(v string) *ListBackupsInput {
	s.BackupDataType = &v
	return s
}

// SetBackupStatus sets the BackupStatus field's value.
func (s *ListBackupsInput) SetBackupStatus(v string) *ListBackupsInput {
	s.BackupStatus = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *ListBackupsInput) SetEndTime(v string) *ListBackupsInput {
	s.EndTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListBackupsInput) SetInstanceId(v string) *ListBackupsInput {
	s.InstanceId = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListBackupsInput) SetLimit(v int32) *ListBackupsInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListBackupsInput) SetOffset(v int32) *ListBackupsInput {
	s.Offset = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *ListBackupsInput) SetStartTime(v string) *ListBackupsInput {
	s.StartTime = &v
	return s
}

type ListBackupsOutput struct {
	_ struct{} `type:"structure"`

	Datas []*DataForListBackupsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListBackupsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListBackupsOutput) GoString() string {
	return s.String()
}

// SetDatas sets the Datas field's value.
func (s *ListBackupsOutput) SetDatas(v []*DataForListBackupsOutput) *ListBackupsOutput {
	s.Datas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListBackupsOutput) SetTotal(v int32) *ListBackupsOutput {
	s.Total = &v
	return s
}

type ListDBInstanceIPListsInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ListDBInstanceIPListsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDBInstanceIPListsInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListDBInstanceIPListsInput) SetInstanceId(v string) *ListDBInstanceIPListsInput {
	s.InstanceId = &v
	return s
}

type ListDBInstanceIPListsOutput struct {
	_ struct{} `type:"structure"`

	Datas []*DataForListDBInstanceIPListsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListDBInstanceIPListsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDBInstanceIPListsOutput) GoString() string {
	return s.String()
}

// SetDatas sets the Datas field's value.
func (s *ListDBInstanceIPListsOutput) SetDatas(v []*DataForListDBInstanceIPListsOutput) *ListDBInstanceIPListsOutput {
	s.Datas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListDBInstanceIPListsOutput) SetTotal(v int32) *ListDBInstanceIPListsOutput {
	s.Total = &v
	return s
}

type ListDBInstancesInput struct {
	_ struct{} `type:"structure"`

	CreateEndTime *string `type:"string"`

	CreateStartTime *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceStatus *string `type:"string"`

	InstanceType *string `type:"string"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	Region *string `type:"string"`

	Zone *string `type:"string"`
}

// String returns the string representation
func (s ListDBInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDBInstancesInput) GoString() string {
	return s.String()
}

// SetCreateEndTime sets the CreateEndTime field's value.
func (s *ListDBInstancesInput) SetCreateEndTime(v string) *ListDBInstancesInput {
	s.CreateEndTime = &v
	return s
}

// SetCreateStartTime sets the CreateStartTime field's value.
func (s *ListDBInstancesInput) SetCreateStartTime(v string) *ListDBInstancesInput {
	s.CreateStartTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListDBInstancesInput) SetInstanceId(v string) *ListDBInstancesInput {
	s.InstanceId = &v
	return s
}

// SetInstanceStatus sets the InstanceStatus field's value.
func (s *ListDBInstancesInput) SetInstanceStatus(v string) *ListDBInstancesInput {
	s.InstanceStatus = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ListDBInstancesInput) SetInstanceType(v string) *ListDBInstancesInput {
	s.InstanceType = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListDBInstancesInput) SetLimit(v int32) *ListDBInstancesInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListDBInstancesInput) SetOffset(v int32) *ListDBInstancesInput {
	s.Offset = &v
	return s
}

// SetRegion sets the Region field's value.
func (s *ListDBInstancesInput) SetRegion(v string) *ListDBInstancesInput {
	s.Region = &v
	return s
}

// SetZone sets the Zone field's value.
func (s *ListDBInstancesInput) SetZone(v string) *ListDBInstancesInput {
	s.Zone = &v
	return s
}

type ListDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	Datas []*DataForListDBInstancesOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListDBInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDBInstancesOutput) GoString() string {
	return s.String()
}

// SetDatas sets the Datas field's value.
func (s *ListDBInstancesOutput) SetDatas(v []*DataForListDBInstancesOutput) *ListDBInstancesOutput {
	s.Datas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListDBInstancesOutput) SetTotal(v int32) *ListDBInstancesOutput {
	s.Total = &v
	return s
}

type ListDatabasesInput struct {
	_ struct{} `type:"structure"`

	DBStatus *string `type:"string"`

	InstanceId *string `type:"string"`

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`
}

// String returns the string representation
func (s ListDatabasesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDatabasesInput) GoString() string {
	return s.String()
}

// SetDBStatus sets the DBStatus field's value.
func (s *ListDatabasesInput) SetDBStatus(v string) *ListDatabasesInput {
	s.DBStatus = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListDatabasesInput) SetInstanceId(v string) *ListDatabasesInput {
	s.InstanceId = &v
	return s
}

// SetLimit sets the Limit field's value.
func (s *ListDatabasesInput) SetLimit(v int32) *ListDatabasesInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListDatabasesInput) SetOffset(v int32) *ListDatabasesInput {
	s.Offset = &v
	return s
}

type ListDatabasesOutput struct {
	_ struct{} `type:"structure"`

	Datas []*DataForListDatabasesOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s ListDatabasesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListDatabasesOutput) GoString() string {
	return s.String()
}

// SetDatas sets the Datas field's value.
func (s *ListDatabasesOutput) SetDatas(v []*DataForListDatabasesOutput) *ListDatabasesOutput {
	s.Datas = v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListDatabasesOutput) SetTotal(v int32) *ListDatabasesOutput {
	s.Total = &v
	return s
}

type ModifyDBInstanceIPListInput struct {
	_ struct{} `type:"structure"`

	GroupName *string `type:"string"`

	IPList []*string `type:"list"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ModifyDBInstanceIPListInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceIPListInput) GoString() string {
	return s.String()
}

// SetGroupName sets the GroupName field's value.
func (s *ModifyDBInstanceIPListInput) SetGroupName(v string) *ModifyDBInstanceIPListInput {
	s.GroupName = &v
	return s
}

// SetIPList sets the IPList field's value.
func (s *ModifyDBInstanceIPListInput) SetIPList(v []*string) *ModifyDBInstanceIPListInput {
	s.IPList = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceIPListInput) SetInstanceId(v string) *ModifyDBInstanceIPListInput {
	s.InstanceId = &v
	return s
}

type ModifyDBInstanceIPListOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyDBInstanceIPListOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceIPListOutput) GoString() string {
	return s.String()
}

type RecoveryDBInstanceInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	BackupId *string `type:"string"`

	ChargeType *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceSpecName *string `type:"string"`

	PrepaidPeriod *string `type:"string"`

	RecoveryType *string `type:"string"`

	RestoreTime *string `type:"string"`

	StorageSpaceGB *int32 `type:"int32"`

	StorageType *string `type:"string"`

	UsedTime *int32 `type:"int32"`

	VpcID *string `type:"string"`
}

// String returns the string representation
func (s RecoveryDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RecoveryDBInstanceInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *RecoveryDBInstanceInput) SetAutoRenew(v bool) *RecoveryDBInstanceInput {
	s.AutoRenew = &v
	return s
}

// SetBackupId sets the BackupId field's value.
func (s *RecoveryDBInstanceInput) SetBackupId(v string) *RecoveryDBInstanceInput {
	s.BackupId = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *RecoveryDBInstanceInput) SetChargeType(v string) *RecoveryDBInstanceInput {
	s.ChargeType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RecoveryDBInstanceInput) SetInstanceId(v string) *RecoveryDBInstanceInput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *RecoveryDBInstanceInput) SetInstanceName(v string) *RecoveryDBInstanceInput {
	s.InstanceName = &v
	return s
}

// SetInstanceSpecName sets the InstanceSpecName field's value.
func (s *RecoveryDBInstanceInput) SetInstanceSpecName(v string) *RecoveryDBInstanceInput {
	s.InstanceSpecName = &v
	return s
}

// SetPrepaidPeriod sets the PrepaidPeriod field's value.
func (s *RecoveryDBInstanceInput) SetPrepaidPeriod(v string) *RecoveryDBInstanceInput {
	s.PrepaidPeriod = &v
	return s
}

// SetRecoveryType sets the RecoveryType field's value.
func (s *RecoveryDBInstanceInput) SetRecoveryType(v string) *RecoveryDBInstanceInput {
	s.RecoveryType = &v
	return s
}

// SetRestoreTime sets the RestoreTime field's value.
func (s *RecoveryDBInstanceInput) SetRestoreTime(v string) *RecoveryDBInstanceInput {
	s.RestoreTime = &v
	return s
}

// SetStorageSpaceGB sets the StorageSpaceGB field's value.
func (s *RecoveryDBInstanceInput) SetStorageSpaceGB(v int32) *RecoveryDBInstanceInput {
	s.StorageSpaceGB = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *RecoveryDBInstanceInput) SetStorageType(v string) *RecoveryDBInstanceInput {
	s.StorageType = &v
	return s
}

// SetUsedTime sets the UsedTime field's value.
func (s *RecoveryDBInstanceInput) SetUsedTime(v int32) *RecoveryDBInstanceInput {
	s.UsedTime = &v
	return s
}

// SetVpcID sets the VpcID field's value.
func (s *RecoveryDBInstanceInput) SetVpcID(v string) *RecoveryDBInstanceInput {
	s.VpcID = &v
	return s
}

type RecoveryDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s RecoveryDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RecoveryDBInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *RecoveryDBInstanceOutput) SetInstanceId(v string) *RecoveryDBInstanceOutput {
	s.InstanceId = &v
	return s
}

type ResetAccountPasswordInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPassword *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ResetAccountPasswordInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAccountPasswordInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *ResetAccountPasswordInput) SetAccountName(v string) *ResetAccountPasswordInput {
	s.AccountName = &v
	return s
}

// SetAccountPassword sets the AccountPassword field's value.
func (s *ResetAccountPasswordInput) SetAccountPassword(v string) *ResetAccountPasswordInput {
	s.AccountPassword = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResetAccountPasswordInput) SetInstanceId(v string) *ResetAccountPasswordInput {
	s.InstanceId = &v
	return s
}

type ResetAccountPasswordOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ResetAccountPasswordOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAccountPasswordOutput) GoString() string {
	return s.String()
}

type RestartDBInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s RestartDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RestartDBInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *RestartDBInstanceInput) SetInstanceId(v string) *RestartDBInstanceInput {
	s.InstanceId = &v
	return s
}

type RestartDBInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s RestartDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RestartDBInstanceOutput) GoString() string {
	return s.String()
}

type RevokeAccountPrivilegeInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	DBNames *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s RevokeAccountPrivilegeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeAccountPrivilegeInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *RevokeAccountPrivilegeInput) SetAccountName(v string) *RevokeAccountPrivilegeInput {
	s.AccountName = &v
	return s
}

// SetDBNames sets the DBNames field's value.
func (s *RevokeAccountPrivilegeInput) SetDBNames(v string) *RevokeAccountPrivilegeInput {
	s.DBNames = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RevokeAccountPrivilegeInput) SetInstanceId(v string) *RevokeAccountPrivilegeInput {
	s.InstanceId = &v
	return s
}

type RevokeAccountPrivilegeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s RevokeAccountPrivilegeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeAccountPrivilegeOutput) GoString() string {
	return s.String()
}

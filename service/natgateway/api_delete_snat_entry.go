// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opDeleteSnatEntryCommon = "DeleteSnatEntry"

// DeleteSnatEntryCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteSnatEntryCommon operation. The "output" return
// value will be populated with the DeleteSnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSnatEntryCommon Send returns without error.
//
// See DeleteSnatEntryCommon for more information on using the DeleteSnatEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteSnatEntryCommonRequest method.
//    req, resp := client.DeleteSnatEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteSnatEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSnatEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSnatEntryCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DeleteSnatEntryCommon for usage and error information.
func (c *NATGATEWAY) DeleteSnatEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSnatEntryCommonRequest(input)
	return out, req.Send()
}

// DeleteSnatEntryCommonWithContext is the same as DeleteSnatEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSnatEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteSnatEntryCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSnatEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSnatEntry = "DeleteSnatEntry"

// DeleteSnatEntryRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteSnatEntry operation. The "output" return
// value will be populated with the DeleteSnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSnatEntryCommon Send returns without error.
//
// See DeleteSnatEntry for more information on using the DeleteSnatEntry
// API call, and error handling.
//
//    // Example sending a request using the DeleteSnatEntryRequest method.
//    req, resp := client.DeleteSnatEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteSnatEntryRequest(input *DeleteSnatEntryInput) (req *request.Request, output *DeleteSnatEntryOutput) {
	op := &request.Operation{
		Name:       opDeleteSnatEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSnatEntryInput{}
	}

	output = &DeleteSnatEntryOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSnatEntry API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DeleteSnatEntry for usage and error information.
func (c *NATGATEWAY) DeleteSnatEntry(input *DeleteSnatEntryInput) (*DeleteSnatEntryOutput, error) {
	req, out := c.DeleteSnatEntryRequest(input)
	return out, req.Send()
}

// DeleteSnatEntryWithContext is the same as DeleteSnatEntry with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSnatEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteSnatEntryWithContext(ctx volcstack.Context, input *DeleteSnatEntryInput, opts ...request.Option) (*DeleteSnatEntryOutput, error) {
	req, out := c.DeleteSnatEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteSnatEntryInput struct {
	_ struct{} `type:"structure"`

	// SnatEntryId is a required field
	SnatEntryId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSnatEntryInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnatEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSnatEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteSnatEntryInput"}
	if s.SnatEntryId == nil {
		invalidParams.Add(request.NewErrParamRequired("SnatEntryId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSnatEntryId sets the SnatEntryId field's value.
func (s *DeleteSnatEntryInput) SetSnatEntryId(v string) *DeleteSnatEntryInput {
	s.SnatEntryId = &v
	return s
}

type DeleteSnatEntryOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteSnatEntryOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnatEntryOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteSnatEntryOutput) SetRequestId(v string) *DeleteSnatEntryOutput {
	s.RequestId = &v
	return s
}

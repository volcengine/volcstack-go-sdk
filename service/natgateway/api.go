// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opCreateNatGatewayCommon = "CreateNatGateway"

// CreateNatGatewayCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateNatGatewayCommon operation. The "output" return
// value will be populated with the CreateNatGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNatGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNatGatewayCommon Send returns without error.
//
// See CreateNatGatewayCommon for more information on using the CreateNatGatewayCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateNatGatewayCommonRequest method.
//    req, resp := client.CreateNatGatewayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) CreateNatGatewayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateNatGatewayCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateNatGatewayCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation CreateNatGatewayCommon for usage and error information.
func (c *NATGATEWAY) CreateNatGatewayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateNatGatewayCommonRequest(input)
	return out, req.Send()
}

// CreateNatGatewayCommonWithContext is the same as CreateNatGatewayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNatGatewayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) CreateNatGatewayCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateNatGatewayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNatGateway = "CreateNatGateway"

// CreateNatGatewayRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateNatGateway operation. The "output" return
// value will be populated with the CreateNatGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateNatGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateNatGatewayCommon Send returns without error.
//
// See CreateNatGateway for more information on using the CreateNatGateway
// API call, and error handling.
//
//    // Example sending a request using the CreateNatGatewayRequest method.
//    req, resp := client.CreateNatGatewayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) CreateNatGatewayRequest(input *CreateNatGatewayInput) (req *request.Request, output *CreateNatGatewayOutput) {
	op := &request.Operation{
		Name:       opCreateNatGateway,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNatGatewayInput{}
	}

	output = &CreateNatGatewayOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateNatGateway API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation CreateNatGateway for usage and error information.
func (c *NATGATEWAY) CreateNatGateway(input *CreateNatGatewayInput) (*CreateNatGatewayOutput, error) {
	req, out := c.CreateNatGatewayRequest(input)
	return out, req.Send()
}

// CreateNatGatewayWithContext is the same as CreateNatGateway with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNatGateway for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) CreateNatGatewayWithContext(ctx volcstack.Context, input *CreateNatGatewayInput, opts ...request.Option) (*CreateNatGatewayOutput, error) {
	req, out := c.CreateNatGatewayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSnatEntryCommon = "CreateSnatEntry"

// CreateSnatEntryCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateSnatEntryCommon operation. The "output" return
// value will be populated with the CreateSnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSnatEntryCommon Send returns without error.
//
// See CreateSnatEntryCommon for more information on using the CreateSnatEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSnatEntryCommonRequest method.
//    req, resp := client.CreateSnatEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) CreateSnatEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSnatEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSnatEntryCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation CreateSnatEntryCommon for usage and error information.
func (c *NATGATEWAY) CreateSnatEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSnatEntryCommonRequest(input)
	return out, req.Send()
}

// CreateSnatEntryCommonWithContext is the same as CreateSnatEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSnatEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) CreateSnatEntryCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSnatEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSnatEntry = "CreateSnatEntry"

// CreateSnatEntryRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateSnatEntry operation. The "output" return
// value will be populated with the CreateSnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSnatEntryCommon Send returns without error.
//
// See CreateSnatEntry for more information on using the CreateSnatEntry
// API call, and error handling.
//
//    // Example sending a request using the CreateSnatEntryRequest method.
//    req, resp := client.CreateSnatEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) CreateSnatEntryRequest(input *CreateSnatEntryInput) (req *request.Request, output *CreateSnatEntryOutput) {
	op := &request.Operation{
		Name:       opCreateSnatEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSnatEntryInput{}
	}

	output = &CreateSnatEntryOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSnatEntry API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation CreateSnatEntry for usage and error information.
func (c *NATGATEWAY) CreateSnatEntry(input *CreateSnatEntryInput) (*CreateSnatEntryOutput, error) {
	req, out := c.CreateSnatEntryRequest(input)
	return out, req.Send()
}

// CreateSnatEntryWithContext is the same as CreateSnatEntry with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSnatEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) CreateSnatEntryWithContext(ctx volcstack.Context, input *CreateSnatEntryInput, opts ...request.Option) (*CreateSnatEntryOutput, error) {
	req, out := c.CreateSnatEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNatGatewayCommon = "DeleteNatGateway"

// DeleteNatGatewayCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteNatGatewayCommon operation. The "output" return
// value will be populated with the DeleteNatGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNatGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNatGatewayCommon Send returns without error.
//
// See DeleteNatGatewayCommon for more information on using the DeleteNatGatewayCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteNatGatewayCommonRequest method.
//    req, resp := client.DeleteNatGatewayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteNatGatewayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteNatGatewayCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteNatGatewayCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DeleteNatGatewayCommon for usage and error information.
func (c *NATGATEWAY) DeleteNatGatewayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteNatGatewayCommonRequest(input)
	return out, req.Send()
}

// DeleteNatGatewayCommonWithContext is the same as DeleteNatGatewayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNatGatewayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteNatGatewayCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteNatGatewayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNatGateway = "DeleteNatGateway"

// DeleteNatGatewayRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteNatGateway operation. The "output" return
// value will be populated with the DeleteNatGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteNatGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteNatGatewayCommon Send returns without error.
//
// See DeleteNatGateway for more information on using the DeleteNatGateway
// API call, and error handling.
//
//    // Example sending a request using the DeleteNatGatewayRequest method.
//    req, resp := client.DeleteNatGatewayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteNatGatewayRequest(input *DeleteNatGatewayInput) (req *request.Request, output *DeleteNatGatewayOutput) {
	op := &request.Operation{
		Name:       opDeleteNatGateway,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNatGatewayInput{}
	}

	output = &DeleteNatGatewayOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteNatGateway API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DeleteNatGateway for usage and error information.
func (c *NATGATEWAY) DeleteNatGateway(input *DeleteNatGatewayInput) (*DeleteNatGatewayOutput, error) {
	req, out := c.DeleteNatGatewayRequest(input)
	return out, req.Send()
}

// DeleteNatGatewayWithContext is the same as DeleteNatGateway with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNatGateway for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteNatGatewayWithContext(ctx volcstack.Context, input *DeleteNatGatewayInput, opts ...request.Option) (*DeleteNatGatewayOutput, error) {
	req, out := c.DeleteNatGatewayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSnatEntryCommon = "DeleteSnatEntry"

// DeleteSnatEntryCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteSnatEntryCommon operation. The "output" return
// value will be populated with the DeleteSnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSnatEntryCommon Send returns without error.
//
// See DeleteSnatEntryCommon for more information on using the DeleteSnatEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteSnatEntryCommonRequest method.
//    req, resp := client.DeleteSnatEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteSnatEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteSnatEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSnatEntryCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DeleteSnatEntryCommon for usage and error information.
func (c *NATGATEWAY) DeleteSnatEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteSnatEntryCommonRequest(input)
	return out, req.Send()
}

// DeleteSnatEntryCommonWithContext is the same as DeleteSnatEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSnatEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteSnatEntryCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteSnatEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteSnatEntry = "DeleteSnatEntry"

// DeleteSnatEntryRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteSnatEntry operation. The "output" return
// value will be populated with the DeleteSnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteSnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteSnatEntryCommon Send returns without error.
//
// See DeleteSnatEntry for more information on using the DeleteSnatEntry
// API call, and error handling.
//
//    // Example sending a request using the DeleteSnatEntryRequest method.
//    req, resp := client.DeleteSnatEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DeleteSnatEntryRequest(input *DeleteSnatEntryInput) (req *request.Request, output *DeleteSnatEntryOutput) {
	op := &request.Operation{
		Name:       opDeleteSnatEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteSnatEntryInput{}
	}

	output = &DeleteSnatEntryOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteSnatEntry API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DeleteSnatEntry for usage and error information.
func (c *NATGATEWAY) DeleteSnatEntry(input *DeleteSnatEntryInput) (*DeleteSnatEntryOutput, error) {
	req, out := c.DeleteSnatEntryRequest(input)
	return out, req.Send()
}

// DeleteSnatEntryWithContext is the same as DeleteSnatEntry with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteSnatEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteSnatEntryWithContext(ctx volcstack.Context, input *DeleteSnatEntryInput, opts ...request.Option) (*DeleteSnatEntryOutput, error) {
	req, out := c.DeleteSnatEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNatGatewayAttributesCommon = "DescribeNatGatewayAttributes"

// DescribeNatGatewayAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeNatGatewayAttributesCommon operation. The "output" return
// value will be populated with the DescribeNatGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNatGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNatGatewayAttributesCommon Send returns without error.
//
// See DescribeNatGatewayAttributesCommon for more information on using the DescribeNatGatewayAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeNatGatewayAttributesCommonRequest method.
//    req, resp := client.DescribeNatGatewayAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeNatGatewayAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeNatGatewayAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNatGatewayAttributesCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeNatGatewayAttributesCommon for usage and error information.
func (c *NATGATEWAY) DescribeNatGatewayAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeNatGatewayAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeNatGatewayAttributesCommonWithContext is the same as DescribeNatGatewayAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNatGatewayAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeNatGatewayAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeNatGatewayAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNatGatewayAttributes = "DescribeNatGatewayAttributes"

// DescribeNatGatewayAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeNatGatewayAttributes operation. The "output" return
// value will be populated with the DescribeNatGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNatGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNatGatewayAttributesCommon Send returns without error.
//
// See DescribeNatGatewayAttributes for more information on using the DescribeNatGatewayAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeNatGatewayAttributesRequest method.
//    req, resp := client.DescribeNatGatewayAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeNatGatewayAttributesRequest(input *DescribeNatGatewayAttributesInput) (req *request.Request, output *DescribeNatGatewayAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeNatGatewayAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNatGatewayAttributesInput{}
	}

	output = &DescribeNatGatewayAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNatGatewayAttributes API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeNatGatewayAttributes for usage and error information.
func (c *NATGATEWAY) DescribeNatGatewayAttributes(input *DescribeNatGatewayAttributesInput) (*DescribeNatGatewayAttributesOutput, error) {
	req, out := c.DescribeNatGatewayAttributesRequest(input)
	return out, req.Send()
}

// DescribeNatGatewayAttributesWithContext is the same as DescribeNatGatewayAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNatGatewayAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeNatGatewayAttributesWithContext(ctx volcstack.Context, input *DescribeNatGatewayAttributesInput, opts ...request.Option) (*DescribeNatGatewayAttributesOutput, error) {
	req, out := c.DescribeNatGatewayAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNatGatewaysCommon = "DescribeNatGateways"

// DescribeNatGatewaysCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeNatGatewaysCommon operation. The "output" return
// value will be populated with the DescribeNatGatewaysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNatGatewaysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNatGatewaysCommon Send returns without error.
//
// See DescribeNatGatewaysCommon for more information on using the DescribeNatGatewaysCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeNatGatewaysCommonRequest method.
//    req, resp := client.DescribeNatGatewaysCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeNatGatewaysCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeNatGatewaysCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNatGatewaysCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeNatGatewaysCommon for usage and error information.
func (c *NATGATEWAY) DescribeNatGatewaysCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeNatGatewaysCommonRequest(input)
	return out, req.Send()
}

// DescribeNatGatewaysCommonWithContext is the same as DescribeNatGatewaysCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNatGatewaysCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeNatGatewaysCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeNatGatewaysCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNatGateways = "DescribeNatGateways"

// DescribeNatGatewaysRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeNatGateways operation. The "output" return
// value will be populated with the DescribeNatGatewaysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNatGatewaysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNatGatewaysCommon Send returns without error.
//
// See DescribeNatGateways for more information on using the DescribeNatGateways
// API call, and error handling.
//
//    // Example sending a request using the DescribeNatGatewaysRequest method.
//    req, resp := client.DescribeNatGatewaysRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeNatGatewaysRequest(input *DescribeNatGatewaysInput) (req *request.Request, output *DescribeNatGatewaysOutput) {
	op := &request.Operation{
		Name:       opDescribeNatGateways,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNatGatewaysInput{}
	}

	output = &DescribeNatGatewaysOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeNatGateways API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeNatGateways for usage and error information.
func (c *NATGATEWAY) DescribeNatGateways(input *DescribeNatGatewaysInput) (*DescribeNatGatewaysOutput, error) {
	req, out := c.DescribeNatGatewaysRequest(input)
	return out, req.Send()
}

// DescribeNatGatewaysWithContext is the same as DescribeNatGateways with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNatGateways for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeNatGatewaysWithContext(ctx volcstack.Context, input *DescribeNatGatewaysInput, opts ...request.Option) (*DescribeNatGatewaysOutput, error) {
	req, out := c.DescribeNatGatewaysRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSnatEntriesCommon = "DescribeSnatEntries"

// DescribeSnatEntriesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSnatEntriesCommon operation. The "output" return
// value will be populated with the DescribeSnatEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnatEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnatEntriesCommon Send returns without error.
//
// See DescribeSnatEntriesCommon for more information on using the DescribeSnatEntriesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnatEntriesCommonRequest method.
//    req, resp := client.DescribeSnatEntriesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeSnatEntriesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSnatEntriesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnatEntriesCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeSnatEntriesCommon for usage and error information.
func (c *NATGATEWAY) DescribeSnatEntriesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSnatEntriesCommonRequest(input)
	return out, req.Send()
}

// DescribeSnatEntriesCommonWithContext is the same as DescribeSnatEntriesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnatEntriesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeSnatEntriesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSnatEntriesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSnatEntries = "DescribeSnatEntries"

// DescribeSnatEntriesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSnatEntries operation. The "output" return
// value will be populated with the DescribeSnatEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnatEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnatEntriesCommon Send returns without error.
//
// See DescribeSnatEntries for more information on using the DescribeSnatEntries
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnatEntriesRequest method.
//    req, resp := client.DescribeSnatEntriesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeSnatEntriesRequest(input *DescribeSnatEntriesInput) (req *request.Request, output *DescribeSnatEntriesOutput) {
	op := &request.Operation{
		Name:       opDescribeSnatEntries,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSnatEntriesInput{}
	}

	output = &DescribeSnatEntriesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnatEntries API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeSnatEntries for usage and error information.
func (c *NATGATEWAY) DescribeSnatEntries(input *DescribeSnatEntriesInput) (*DescribeSnatEntriesOutput, error) {
	req, out := c.DescribeSnatEntriesRequest(input)
	return out, req.Send()
}

// DescribeSnatEntriesWithContext is the same as DescribeSnatEntries with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnatEntries for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeSnatEntriesWithContext(ctx volcstack.Context, input *DescribeSnatEntriesInput, opts ...request.Option) (*DescribeSnatEntriesOutput, error) {
	req, out := c.DescribeSnatEntriesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSnatEntryAttributesCommon = "DescribeSnatEntryAttributes"

// DescribeSnatEntryAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSnatEntryAttributesCommon operation. The "output" return
// value will be populated with the DescribeSnatEntryAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnatEntryAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnatEntryAttributesCommon Send returns without error.
//
// See DescribeSnatEntryAttributesCommon for more information on using the DescribeSnatEntryAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnatEntryAttributesCommonRequest method.
//    req, resp := client.DescribeSnatEntryAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeSnatEntryAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSnatEntryAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnatEntryAttributesCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeSnatEntryAttributesCommon for usage and error information.
func (c *NATGATEWAY) DescribeSnatEntryAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSnatEntryAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeSnatEntryAttributesCommonWithContext is the same as DescribeSnatEntryAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnatEntryAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeSnatEntryAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSnatEntryAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSnatEntryAttributes = "DescribeSnatEntryAttributes"

// DescribeSnatEntryAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSnatEntryAttributes operation. The "output" return
// value will be populated with the DescribeSnatEntryAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSnatEntryAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSnatEntryAttributesCommon Send returns without error.
//
// See DescribeSnatEntryAttributes for more information on using the DescribeSnatEntryAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeSnatEntryAttributesRequest method.
//    req, resp := client.DescribeSnatEntryAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) DescribeSnatEntryAttributesRequest(input *DescribeSnatEntryAttributesInput) (req *request.Request, output *DescribeSnatEntryAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeSnatEntryAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSnatEntryAttributesInput{}
	}

	output = &DescribeSnatEntryAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSnatEntryAttributes API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation DescribeSnatEntryAttributes for usage and error information.
func (c *NATGATEWAY) DescribeSnatEntryAttributes(input *DescribeSnatEntryAttributesInput) (*DescribeSnatEntryAttributesOutput, error) {
	req, out := c.DescribeSnatEntryAttributesRequest(input)
	return out, req.Send()
}

// DescribeSnatEntryAttributesWithContext is the same as DescribeSnatEntryAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSnatEntryAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DescribeSnatEntryAttributesWithContext(ctx volcstack.Context, input *DescribeSnatEntryAttributesInput, opts ...request.Option) (*DescribeSnatEntryAttributesOutput, error) {
	req, out := c.DescribeSnatEntryAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyNatGatewayAttributesCommon = "ModifyNatGatewayAttributes"

// ModifyNatGatewayAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyNatGatewayAttributesCommon operation. The "output" return
// value will be populated with the ModifyNatGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyNatGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyNatGatewayAttributesCommon Send returns without error.
//
// See ModifyNatGatewayAttributesCommon for more information on using the ModifyNatGatewayAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyNatGatewayAttributesCommonRequest method.
//    req, resp := client.ModifyNatGatewayAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) ModifyNatGatewayAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyNatGatewayAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyNatGatewayAttributesCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation ModifyNatGatewayAttributesCommon for usage and error information.
func (c *NATGATEWAY) ModifyNatGatewayAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyNatGatewayAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyNatGatewayAttributesCommonWithContext is the same as ModifyNatGatewayAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNatGatewayAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) ModifyNatGatewayAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyNatGatewayAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyNatGatewayAttributes = "ModifyNatGatewayAttributes"

// ModifyNatGatewayAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyNatGatewayAttributes operation. The "output" return
// value will be populated with the ModifyNatGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyNatGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyNatGatewayAttributesCommon Send returns without error.
//
// See ModifyNatGatewayAttributes for more information on using the ModifyNatGatewayAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyNatGatewayAttributesRequest method.
//    req, resp := client.ModifyNatGatewayAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) ModifyNatGatewayAttributesRequest(input *ModifyNatGatewayAttributesInput) (req *request.Request, output *ModifyNatGatewayAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyNatGatewayAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyNatGatewayAttributesInput{}
	}

	output = &ModifyNatGatewayAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyNatGatewayAttributes API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation ModifyNatGatewayAttributes for usage and error information.
func (c *NATGATEWAY) ModifyNatGatewayAttributes(input *ModifyNatGatewayAttributesInput) (*ModifyNatGatewayAttributesOutput, error) {
	req, out := c.ModifyNatGatewayAttributesRequest(input)
	return out, req.Send()
}

// ModifyNatGatewayAttributesWithContext is the same as ModifyNatGatewayAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNatGatewayAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) ModifyNatGatewayAttributesWithContext(ctx volcstack.Context, input *ModifyNatGatewayAttributesInput, opts ...request.Option) (*ModifyNatGatewayAttributesOutput, error) {
	req, out := c.ModifyNatGatewayAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifySnatEntryAttributesCommon = "ModifySnatEntryAttributes"

// ModifySnatEntryAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifySnatEntryAttributesCommon operation. The "output" return
// value will be populated with the ModifySnatEntryAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySnatEntryAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySnatEntryAttributesCommon Send returns without error.
//
// See ModifySnatEntryAttributesCommon for more information on using the ModifySnatEntryAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifySnatEntryAttributesCommonRequest method.
//    req, resp := client.ModifySnatEntryAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) ModifySnatEntryAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifySnatEntryAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifySnatEntryAttributesCommon API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation ModifySnatEntryAttributesCommon for usage and error information.
func (c *NATGATEWAY) ModifySnatEntryAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifySnatEntryAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifySnatEntryAttributesCommonWithContext is the same as ModifySnatEntryAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySnatEntryAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) ModifySnatEntryAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifySnatEntryAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifySnatEntryAttributes = "ModifySnatEntryAttributes"

// ModifySnatEntryAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifySnatEntryAttributes operation. The "output" return
// value will be populated with the ModifySnatEntryAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifySnatEntryAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifySnatEntryAttributesCommon Send returns without error.
//
// See ModifySnatEntryAttributes for more information on using the ModifySnatEntryAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifySnatEntryAttributesRequest method.
//    req, resp := client.ModifySnatEntryAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *NATGATEWAY) ModifySnatEntryAttributesRequest(input *ModifySnatEntryAttributesInput) (req *request.Request, output *ModifySnatEntryAttributesOutput) {
	op := &request.Operation{
		Name:       opModifySnatEntryAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifySnatEntryAttributesInput{}
	}

	output = &ModifySnatEntryAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifySnatEntryAttributes API operation for NATGATEWAY.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for NATGATEWAY's
// API operation ModifySnatEntryAttributes for usage and error information.
func (c *NATGATEWAY) ModifySnatEntryAttributes(input *ModifySnatEntryAttributesInput) (*ModifySnatEntryAttributesOutput, error) {
	req, out := c.ModifySnatEntryAttributesRequest(input)
	return out, req.Send()
}

// ModifySnatEntryAttributesWithContext is the same as ModifySnatEntryAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifySnatEntryAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) ModifySnatEntryAttributesWithContext(ctx volcstack.Context, input *ModifySnatEntryAttributesInput, opts ...request.Option) (*ModifySnatEntryAttributesOutput, error) {
	req, out := c.ModifySnatEntryAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateNatGatewayInput struct {
	_ struct{} `type:"structure"`

	Description *string `min:"1" max:"255" type:"string"`

	NatGatewayName *string `min:"1" max:"128" type:"string"`

	Spec *string `type:"string" enum:"SpecForCreateNatGatewayInput"`

	SubnetId *string `type:"string"`

	// VpcId is a required field
	VpcId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateNatGatewayInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNatGatewayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNatGatewayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateNatGatewayInput"}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.NatGatewayName != nil && len(*s.NatGatewayName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("NatGatewayName", 1))
	}
	if s.NatGatewayName != nil && len(*s.NatGatewayName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("NatGatewayName", 128, *s.NatGatewayName))
	}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateNatGatewayInput) SetDescription(v string) *CreateNatGatewayInput {
	s.Description = &v
	return s
}

// SetNatGatewayName sets the NatGatewayName field's value.
func (s *CreateNatGatewayInput) SetNatGatewayName(v string) *CreateNatGatewayInput {
	s.NatGatewayName = &v
	return s
}

// SetSpec sets the Spec field's value.
func (s *CreateNatGatewayInput) SetSpec(v string) *CreateNatGatewayInput {
	s.Spec = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *CreateNatGatewayInput) SetSubnetId(v string) *CreateNatGatewayInput {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateNatGatewayInput) SetVpcId(v string) *CreateNatGatewayInput {
	s.VpcId = &v
	return s
}

type CreateNatGatewayOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NatGatewayId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateNatGatewayOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNatGatewayOutput) GoString() string {
	return s.String()
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *CreateNatGatewayOutput) SetNatGatewayId(v string) *CreateNatGatewayOutput {
	s.NatGatewayId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateNatGatewayOutput) SetRequestId(v string) *CreateNatGatewayOutput {
	s.RequestId = &v
	return s
}

type CreateSnatEntryInput struct {
	_ struct{} `type:"structure"`

	// EipId is a required field
	EipId *string `type:"string" required:"true"`

	// NatGatewayId is a required field
	NatGatewayId *string `type:"string" required:"true"`

	SnatEntryName *string `min:"1" max:"128" type:"string"`

	// SubnetId is a required field
	SubnetId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateSnatEntryInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSnatEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSnatEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSnatEntryInput"}
	if s.EipId == nil {
		invalidParams.Add(request.NewErrParamRequired("EipId"))
	}
	if s.NatGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("NatGatewayId"))
	}
	if s.SnatEntryName != nil && len(*s.SnatEntryName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("SnatEntryName", 1))
	}
	if s.SnatEntryName != nil && len(*s.SnatEntryName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("SnatEntryName", 128, *s.SnatEntryName))
	}
	if s.SubnetId == nil {
		invalidParams.Add(request.NewErrParamRequired("SubnetId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEipId sets the EipId field's value.
func (s *CreateSnatEntryInput) SetEipId(v string) *CreateSnatEntryInput {
	s.EipId = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *CreateSnatEntryInput) SetNatGatewayId(v string) *CreateSnatEntryInput {
	s.NatGatewayId = &v
	return s
}

// SetSnatEntryName sets the SnatEntryName field's value.
func (s *CreateSnatEntryInput) SetSnatEntryName(v string) *CreateSnatEntryInput {
	s.SnatEntryName = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *CreateSnatEntryInput) SetSubnetId(v string) *CreateSnatEntryInput {
	s.SubnetId = &v
	return s
}

type CreateSnatEntryOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	SnatEntryId *string `type:"string"`
}

// String returns the string representation
func (s CreateSnatEntryOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSnatEntryOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateSnatEntryOutput) SetRequestId(v string) *CreateSnatEntryOutput {
	s.RequestId = &v
	return s
}

// SetSnatEntryId sets the SnatEntryId field's value.
func (s *CreateSnatEntryOutput) SetSnatEntryId(v string) *CreateSnatEntryOutput {
	s.SnatEntryId = &v
	return s
}

type DeleteNatGatewayInput struct {
	_ struct{} `type:"structure"`

	// NatGatewayId is a required field
	NatGatewayId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteNatGatewayInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNatGatewayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNatGatewayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteNatGatewayInput"}
	if s.NatGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("NatGatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *DeleteNatGatewayInput) SetNatGatewayId(v string) *DeleteNatGatewayInput {
	s.NatGatewayId = &v
	return s
}

type DeleteNatGatewayOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteNatGatewayOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNatGatewayOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteNatGatewayOutput) SetRequestId(v string) *DeleteNatGatewayOutput {
	s.RequestId = &v
	return s
}

type DeleteSnatEntryInput struct {
	_ struct{} `type:"structure"`

	// SnatEntryId is a required field
	SnatEntryId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSnatEntryInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnatEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSnatEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteSnatEntryInput"}
	if s.SnatEntryId == nil {
		invalidParams.Add(request.NewErrParamRequired("SnatEntryId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSnatEntryId sets the SnatEntryId field's value.
func (s *DeleteSnatEntryInput) SetSnatEntryId(v string) *DeleteSnatEntryInput {
	s.SnatEntryId = &v
	return s
}

type DeleteSnatEntryOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteSnatEntryOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnatEntryOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteSnatEntryOutput) SetRequestId(v string) *DeleteSnatEntryOutput {
	s.RequestId = &v
	return s
}

type DescribeNatGatewayAttributesInput struct {
	_ struct{} `type:"structure"`

	// NatGatewayId is a required field
	NatGatewayId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeNatGatewayAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNatGatewayAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeNatGatewayAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeNatGatewayAttributesInput"}
	if s.NatGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("NatGatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *DescribeNatGatewayAttributesInput) SetNatGatewayId(v string) *DescribeNatGatewayAttributesInput {
	s.NatGatewayId = &v
	return s
}

type DescribeNatGatewayAttributesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	BillingType *int64 `type:"integer"`

	BusinessStatus *string `type:"string"`

	CreationTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	EipAddresses []*EipAddressForDescribeNatGatewayAttributesOutput `type:"list"`

	LockReason *string `type:"string"`

	NatGatewayId *string `type:"string"`

	NatGatewayName *string `type:"string"`

	NetworkInterfaceId *string `type:"string"`

	OverdueTime *string `type:"string"`

	RequestId *string `type:"string"`

	Spec *string `type:"string"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`

	UpdatedAt *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s DescribeNatGatewayAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNatGatewayAttributesOutput) GoString() string {
	return s.String()
}

// SetBillingType sets the BillingType field's value.
func (s *DescribeNatGatewayAttributesOutput) SetBillingType(v int64) *DescribeNatGatewayAttributesOutput {
	s.BillingType = &v
	return s
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *DescribeNatGatewayAttributesOutput) SetBusinessStatus(v string) *DescribeNatGatewayAttributesOutput {
	s.BusinessStatus = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeNatGatewayAttributesOutput) SetCreationTime(v string) *DescribeNatGatewayAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *DescribeNatGatewayAttributesOutput) SetDeletedTime(v string) *DescribeNatGatewayAttributesOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeNatGatewayAttributesOutput) SetDescription(v string) *DescribeNatGatewayAttributesOutput {
	s.Description = &v
	return s
}

// SetEipAddresses sets the EipAddresses field's value.
func (s *DescribeNatGatewayAttributesOutput) SetEipAddresses(v []*EipAddressForDescribeNatGatewayAttributesOutput) *DescribeNatGatewayAttributesOutput {
	s.EipAddresses = v
	return s
}

// SetLockReason sets the LockReason field's value.
func (s *DescribeNatGatewayAttributesOutput) SetLockReason(v string) *DescribeNatGatewayAttributesOutput {
	s.LockReason = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *DescribeNatGatewayAttributesOutput) SetNatGatewayId(v string) *DescribeNatGatewayAttributesOutput {
	s.NatGatewayId = &v
	return s
}

// SetNatGatewayName sets the NatGatewayName field's value.
func (s *DescribeNatGatewayAttributesOutput) SetNatGatewayName(v string) *DescribeNatGatewayAttributesOutput {
	s.NatGatewayName = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *DescribeNatGatewayAttributesOutput) SetNetworkInterfaceId(v string) *DescribeNatGatewayAttributesOutput {
	s.NetworkInterfaceId = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *DescribeNatGatewayAttributesOutput) SetOverdueTime(v string) *DescribeNatGatewayAttributesOutput {
	s.OverdueTime = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeNatGatewayAttributesOutput) SetRequestId(v string) *DescribeNatGatewayAttributesOutput {
	s.RequestId = &v
	return s
}

// SetSpec sets the Spec field's value.
func (s *DescribeNatGatewayAttributesOutput) SetSpec(v string) *DescribeNatGatewayAttributesOutput {
	s.Spec = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeNatGatewayAttributesOutput) SetStatus(v string) *DescribeNatGatewayAttributesOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *DescribeNatGatewayAttributesOutput) SetSubnetId(v string) *DescribeNatGatewayAttributesOutput {
	s.SubnetId = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *DescribeNatGatewayAttributesOutput) SetUpdatedAt(v string) *DescribeNatGatewayAttributesOutput {
	s.UpdatedAt = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeNatGatewayAttributesOutput) SetVpcId(v string) *DescribeNatGatewayAttributesOutput {
	s.VpcId = &v
	return s
}

type DescribeNatGatewaysInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	NatGatewayIds []*string `type:"list"`

	NatGatewayName *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `max:"100" type:"integer"`

	Spec *string `type:"string" enum:"SpecForDescribeNatGatewaysInput"`

	SubnetId *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s DescribeNatGatewaysInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNatGatewaysInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeNatGatewaysInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeNatGatewaysInput"}
	if s.PageSize != nil && *s.PageSize > 100 {
		invalidParams.Add(request.NewErrParamMaxValue("PageSize", 100))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *DescribeNatGatewaysInput) SetDescription(v string) *DescribeNatGatewaysInput {
	s.Description = &v
	return s
}

// SetNatGatewayIds sets the NatGatewayIds field's value.
func (s *DescribeNatGatewaysInput) SetNatGatewayIds(v []*string) *DescribeNatGatewaysInput {
	s.NatGatewayIds = v
	return s
}

// SetNatGatewayName sets the NatGatewayName field's value.
func (s *DescribeNatGatewaysInput) SetNatGatewayName(v string) *DescribeNatGatewaysInput {
	s.NatGatewayName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeNatGatewaysInput) SetPageNumber(v int64) *DescribeNatGatewaysInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeNatGatewaysInput) SetPageSize(v int64) *DescribeNatGatewaysInput {
	s.PageSize = &v
	return s
}

// SetSpec sets the Spec field's value.
func (s *DescribeNatGatewaysInput) SetSpec(v string) *DescribeNatGatewaysInput {
	s.Spec = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *DescribeNatGatewaysInput) SetSubnetId(v string) *DescribeNatGatewaysInput {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeNatGatewaysInput) SetVpcId(v string) *DescribeNatGatewaysInput {
	s.VpcId = &v
	return s
}

type DescribeNatGatewaysOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NatGateways []*NatGatewayForDescribeNatGatewaysOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeNatGatewaysOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNatGatewaysOutput) GoString() string {
	return s.String()
}

// SetNatGateways sets the NatGateways field's value.
func (s *DescribeNatGatewaysOutput) SetNatGateways(v []*NatGatewayForDescribeNatGatewaysOutput) *DescribeNatGatewaysOutput {
	s.NatGateways = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeNatGatewaysOutput) SetPageNumber(v int64) *DescribeNatGatewaysOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeNatGatewaysOutput) SetPageSize(v int64) *DescribeNatGatewaysOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeNatGatewaysOutput) SetRequestId(v string) *DescribeNatGatewaysOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeNatGatewaysOutput) SetTotalCount(v int64) *DescribeNatGatewaysOutput {
	s.TotalCount = &v
	return s
}

type DescribeSnatEntriesInput struct {
	_ struct{} `type:"structure"`

	EipId *string `type:"string"`

	NatGatewayId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `max:"100" type:"integer"`

	SnatEntryIds []*string `type:"list"`

	SnatEntryName *string `type:"string"`

	SubnetId *string `type:"string"`
}

// String returns the string representation
func (s DescribeSnatEntriesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnatEntriesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSnatEntriesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSnatEntriesInput"}
	if s.PageSize != nil && *s.PageSize > 100 {
		invalidParams.Add(request.NewErrParamMaxValue("PageSize", 100))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEipId sets the EipId field's value.
func (s *DescribeSnatEntriesInput) SetEipId(v string) *DescribeSnatEntriesInput {
	s.EipId = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *DescribeSnatEntriesInput) SetNatGatewayId(v string) *DescribeSnatEntriesInput {
	s.NatGatewayId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSnatEntriesInput) SetPageNumber(v int64) *DescribeSnatEntriesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSnatEntriesInput) SetPageSize(v int64) *DescribeSnatEntriesInput {
	s.PageSize = &v
	return s
}

// SetSnatEntryIds sets the SnatEntryIds field's value.
func (s *DescribeSnatEntriesInput) SetSnatEntryIds(v []*string) *DescribeSnatEntriesInput {
	s.SnatEntryIds = v
	return s
}

// SetSnatEntryName sets the SnatEntryName field's value.
func (s *DescribeSnatEntriesInput) SetSnatEntryName(v string) *DescribeSnatEntriesInput {
	s.SnatEntryName = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *DescribeSnatEntriesInput) SetSubnetId(v string) *DescribeSnatEntriesInput {
	s.SubnetId = &v
	return s
}

type DescribeSnatEntriesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	SnatEntries []*SnatEntryForDescribeSnatEntriesOutput `type:"list"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeSnatEntriesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnatEntriesOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSnatEntriesOutput) SetPageNumber(v int64) *DescribeSnatEntriesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSnatEntriesOutput) SetPageSize(v int64) *DescribeSnatEntriesOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeSnatEntriesOutput) SetRequestId(v string) *DescribeSnatEntriesOutput {
	s.RequestId = &v
	return s
}

// SetSnatEntries sets the SnatEntries field's value.
func (s *DescribeSnatEntriesOutput) SetSnatEntries(v []*SnatEntryForDescribeSnatEntriesOutput) *DescribeSnatEntriesOutput {
	s.SnatEntries = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeSnatEntriesOutput) SetTotalCount(v int64) *DescribeSnatEntriesOutput {
	s.TotalCount = &v
	return s
}

type DescribeSnatEntryAttributesInput struct {
	_ struct{} `type:"structure"`

	// SnatEntryId is a required field
	SnatEntryId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeSnatEntryAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnatEntryAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeSnatEntryAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeSnatEntryAttributesInput"}
	if s.SnatEntryId == nil {
		invalidParams.Add(request.NewErrParamRequired("SnatEntryId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetSnatEntryId sets the SnatEntryId field's value.
func (s *DescribeSnatEntryAttributesInput) SetSnatEntryId(v string) *DescribeSnatEntryAttributesInput {
	s.SnatEntryId = &v
	return s
}

type DescribeSnatEntryAttributesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	EipAddress *string `type:"string"`

	EipId *string `type:"string"`

	NatGatewayId *string `type:"string"`

	RequestId *string `type:"string"`

	SnatEntryId *string `type:"string"`

	SnatEntryName *string `type:"string"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`
}

// String returns the string representation
func (s DescribeSnatEntryAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSnatEntryAttributesOutput) GoString() string {
	return s.String()
}

// SetEipAddress sets the EipAddress field's value.
func (s *DescribeSnatEntryAttributesOutput) SetEipAddress(v string) *DescribeSnatEntryAttributesOutput {
	s.EipAddress = &v
	return s
}

// SetEipId sets the EipId field's value.
func (s *DescribeSnatEntryAttributesOutput) SetEipId(v string) *DescribeSnatEntryAttributesOutput {
	s.EipId = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *DescribeSnatEntryAttributesOutput) SetNatGatewayId(v string) *DescribeSnatEntryAttributesOutput {
	s.NatGatewayId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeSnatEntryAttributesOutput) SetRequestId(v string) *DescribeSnatEntryAttributesOutput {
	s.RequestId = &v
	return s
}

// SetSnatEntryId sets the SnatEntryId field's value.
func (s *DescribeSnatEntryAttributesOutput) SetSnatEntryId(v string) *DescribeSnatEntryAttributesOutput {
	s.SnatEntryId = &v
	return s
}

// SetSnatEntryName sets the SnatEntryName field's value.
func (s *DescribeSnatEntryAttributesOutput) SetSnatEntryName(v string) *DescribeSnatEntryAttributesOutput {
	s.SnatEntryName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeSnatEntryAttributesOutput) SetStatus(v string) *DescribeSnatEntryAttributesOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *DescribeSnatEntryAttributesOutput) SetSubnetId(v string) *DescribeSnatEntryAttributesOutput {
	s.SubnetId = &v
	return s
}

type EipAddressForDescribeNatGatewayAttributesOutput struct {
	_ struct{} `type:"structure"`

	AllocationId *string `type:"string"`

	EipAddress *string `type:"string"`

	UsingStatus *string `type:"string"`
}

// String returns the string representation
func (s EipAddressForDescribeNatGatewayAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s EipAddressForDescribeNatGatewayAttributesOutput) GoString() string {
	return s.String()
}

// SetAllocationId sets the AllocationId field's value.
func (s *EipAddressForDescribeNatGatewayAttributesOutput) SetAllocationId(v string) *EipAddressForDescribeNatGatewayAttributesOutput {
	s.AllocationId = &v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *EipAddressForDescribeNatGatewayAttributesOutput) SetEipAddress(v string) *EipAddressForDescribeNatGatewayAttributesOutput {
	s.EipAddress = &v
	return s
}

// SetUsingStatus sets the UsingStatus field's value.
func (s *EipAddressForDescribeNatGatewayAttributesOutput) SetUsingStatus(v string) *EipAddressForDescribeNatGatewayAttributesOutput {
	s.UsingStatus = &v
	return s
}

type EipAddressForDescribeNatGatewaysOutput struct {
	_ struct{} `type:"structure"`

	AllocationId *string `type:"string"`

	EipAddress *string `type:"string"`

	UsingStatus *string `type:"string"`
}

// String returns the string representation
func (s EipAddressForDescribeNatGatewaysOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s EipAddressForDescribeNatGatewaysOutput) GoString() string {
	return s.String()
}

// SetAllocationId sets the AllocationId field's value.
func (s *EipAddressForDescribeNatGatewaysOutput) SetAllocationId(v string) *EipAddressForDescribeNatGatewaysOutput {
	s.AllocationId = &v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *EipAddressForDescribeNatGatewaysOutput) SetEipAddress(v string) *EipAddressForDescribeNatGatewaysOutput {
	s.EipAddress = &v
	return s
}

// SetUsingStatus sets the UsingStatus field's value.
func (s *EipAddressForDescribeNatGatewaysOutput) SetUsingStatus(v string) *EipAddressForDescribeNatGatewaysOutput {
	s.UsingStatus = &v
	return s
}

type ModifyNatGatewayAttributesInput struct {
	_ struct{} `type:"structure"`

	Description *string `min:"1" max:"255" type:"string"`

	// NatGatewayId is a required field
	NatGatewayId *string `type:"string" required:"true"`

	NatGatewayName *string `min:"1" max:"128" type:"string"`

	Spec *string `type:"string" enum:"SpecForModifyNatGatewayAttributesInput"`
}

// String returns the string representation
func (s ModifyNatGatewayAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNatGatewayAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyNatGatewayAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyNatGatewayAttributesInput"}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.NatGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("NatGatewayId"))
	}
	if s.NatGatewayName != nil && len(*s.NatGatewayName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("NatGatewayName", 1))
	}
	if s.NatGatewayName != nil && len(*s.NatGatewayName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("NatGatewayName", 128, *s.NatGatewayName))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ModifyNatGatewayAttributesInput) SetDescription(v string) *ModifyNatGatewayAttributesInput {
	s.Description = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *ModifyNatGatewayAttributesInput) SetNatGatewayId(v string) *ModifyNatGatewayAttributesInput {
	s.NatGatewayId = &v
	return s
}

// SetNatGatewayName sets the NatGatewayName field's value.
func (s *ModifyNatGatewayAttributesInput) SetNatGatewayName(v string) *ModifyNatGatewayAttributesInput {
	s.NatGatewayName = &v
	return s
}

// SetSpec sets the Spec field's value.
func (s *ModifyNatGatewayAttributesInput) SetSpec(v string) *ModifyNatGatewayAttributesInput {
	s.Spec = &v
	return s
}

type ModifyNatGatewayAttributesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyNatGatewayAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNatGatewayAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyNatGatewayAttributesOutput) SetRequestId(v string) *ModifyNatGatewayAttributesOutput {
	s.RequestId = &v
	return s
}

type ModifySnatEntryAttributesInput struct {
	_ struct{} `type:"structure"`

	EipId *string `type:"string"`

	// SnatEntryId is a required field
	SnatEntryId *string `type:"string" required:"true"`

	SnatEntryName *string `min:"1" max:"128" type:"string"`
}

// String returns the string representation
func (s ModifySnatEntryAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySnatEntryAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifySnatEntryAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifySnatEntryAttributesInput"}
	if s.SnatEntryId == nil {
		invalidParams.Add(request.NewErrParamRequired("SnatEntryId"))
	}
	if s.SnatEntryName != nil && len(*s.SnatEntryName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("SnatEntryName", 1))
	}
	if s.SnatEntryName != nil && len(*s.SnatEntryName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("SnatEntryName", 128, *s.SnatEntryName))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetEipId sets the EipId field's value.
func (s *ModifySnatEntryAttributesInput) SetEipId(v string) *ModifySnatEntryAttributesInput {
	s.EipId = &v
	return s
}

// SetSnatEntryId sets the SnatEntryId field's value.
func (s *ModifySnatEntryAttributesInput) SetSnatEntryId(v string) *ModifySnatEntryAttributesInput {
	s.SnatEntryId = &v
	return s
}

// SetSnatEntryName sets the SnatEntryName field's value.
func (s *ModifySnatEntryAttributesInput) SetSnatEntryName(v string) *ModifySnatEntryAttributesInput {
	s.SnatEntryName = &v
	return s
}

type ModifySnatEntryAttributesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifySnatEntryAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifySnatEntryAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifySnatEntryAttributesOutput) SetRequestId(v string) *ModifySnatEntryAttributesOutput {
	s.RequestId = &v
	return s
}

type NatGatewayForDescribeNatGatewaysOutput struct {
	_ struct{} `type:"structure"`

	BillingType *int64 `type:"integer"`

	BusinessStatus *string `type:"string"`

	CreationTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	EipAddresses []*EipAddressForDescribeNatGatewaysOutput `type:"list"`

	LockReason *string `type:"string"`

	NatGatewayId *string `type:"string"`

	NatGatewayName *string `type:"string"`

	NetworkInterfaceId *string `type:"string"`

	OverdueTime *string `type:"string"`

	Spec *string `type:"string"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`

	UpdatedAt *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s NatGatewayForDescribeNatGatewaysOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NatGatewayForDescribeNatGatewaysOutput) GoString() string {
	return s.String()
}

// SetBillingType sets the BillingType field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetBillingType(v int64) *NatGatewayForDescribeNatGatewaysOutput {
	s.BillingType = &v
	return s
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetBusinessStatus(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.BusinessStatus = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetCreationTime(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.CreationTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetDeletedTime(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetDescription(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.Description = &v
	return s
}

// SetEipAddresses sets the EipAddresses field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetEipAddresses(v []*EipAddressForDescribeNatGatewaysOutput) *NatGatewayForDescribeNatGatewaysOutput {
	s.EipAddresses = v
	return s
}

// SetLockReason sets the LockReason field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetLockReason(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.LockReason = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetNatGatewayId(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.NatGatewayId = &v
	return s
}

// SetNatGatewayName sets the NatGatewayName field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetNatGatewayName(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.NatGatewayName = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetNetworkInterfaceId(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.NetworkInterfaceId = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetOverdueTime(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.OverdueTime = &v
	return s
}

// SetSpec sets the Spec field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetSpec(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.Spec = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetStatus(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetSubnetId(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.SubnetId = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetUpdatedAt(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.UpdatedAt = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *NatGatewayForDescribeNatGatewaysOutput) SetVpcId(v string) *NatGatewayForDescribeNatGatewaysOutput {
	s.VpcId = &v
	return s
}

type SnatEntryForDescribeSnatEntriesOutput struct {
	_ struct{} `type:"structure"`

	EipAddress *string `type:"string"`

	EipId *string `type:"string"`

	NatGatewayId *string `type:"string"`

	SnatEntryId *string `type:"string"`

	SnatEntryName *string `type:"string"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`
}

// String returns the string representation
func (s SnatEntryForDescribeSnatEntriesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s SnatEntryForDescribeSnatEntriesOutput) GoString() string {
	return s.String()
}

// SetEipAddress sets the EipAddress field's value.
func (s *SnatEntryForDescribeSnatEntriesOutput) SetEipAddress(v string) *SnatEntryForDescribeSnatEntriesOutput {
	s.EipAddress = &v
	return s
}

// SetEipId sets the EipId field's value.
func (s *SnatEntryForDescribeSnatEntriesOutput) SetEipId(v string) *SnatEntryForDescribeSnatEntriesOutput {
	s.EipId = &v
	return s
}

// SetNatGatewayId sets the NatGatewayId field's value.
func (s *SnatEntryForDescribeSnatEntriesOutput) SetNatGatewayId(v string) *SnatEntryForDescribeSnatEntriesOutput {
	s.NatGatewayId = &v
	return s
}

// SetSnatEntryId sets the SnatEntryId field's value.
func (s *SnatEntryForDescribeSnatEntriesOutput) SetSnatEntryId(v string) *SnatEntryForDescribeSnatEntriesOutput {
	s.SnatEntryId = &v
	return s
}

// SetSnatEntryName sets the SnatEntryName field's value.
func (s *SnatEntryForDescribeSnatEntriesOutput) SetSnatEntryName(v string) *SnatEntryForDescribeSnatEntriesOutput {
	s.SnatEntryName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *SnatEntryForDescribeSnatEntriesOutput) SetStatus(v string) *SnatEntryForDescribeSnatEntriesOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *SnatEntryForDescribeSnatEntriesOutput) SetSubnetId(v string) *SnatEntryForDescribeSnatEntriesOutput {
	s.SubnetId = &v
	return s
}

const (
	// SpecForCreateNatGatewayInputSmall is a SpecForCreateNatGatewayInput enum value
	SpecForCreateNatGatewayInputSmall = "Small"

	// SpecForCreateNatGatewayInputMedium is a SpecForCreateNatGatewayInput enum value
	SpecForCreateNatGatewayInputMedium = "Medium"

	// SpecForCreateNatGatewayInputLarge is a SpecForCreateNatGatewayInput enum value
	SpecForCreateNatGatewayInputLarge = "Large"
)

const (
	// SpecForDescribeNatGatewaysInputSmall is a SpecForDescribeNatGatewaysInput enum value
	SpecForDescribeNatGatewaysInputSmall = "Small"

	// SpecForDescribeNatGatewaysInputMedium is a SpecForDescribeNatGatewaysInput enum value
	SpecForDescribeNatGatewaysInputMedium = "Medium"

	// SpecForDescribeNatGatewaysInputLarge is a SpecForDescribeNatGatewaysInput enum value
	SpecForDescribeNatGatewaysInputLarge = "Large"
)

const (
	// SpecForModifyNatGatewayAttributesInputSmall is a SpecForModifyNatGatewayAttributesInput enum value
	SpecForModifyNatGatewayAttributesInputSmall = "Small"

	// SpecForModifyNatGatewayAttributesInputMedium is a SpecForModifyNatGatewayAttributesInput enum value
	SpecForModifyNatGatewayAttributesInputMedium = "Medium"

	// SpecForModifyNatGatewayAttributesInputLarge is a SpecForModifyNatGatewayAttributesInput enum value
	SpecForModifyNatGatewayAttributesInputLarge = "Large"
)

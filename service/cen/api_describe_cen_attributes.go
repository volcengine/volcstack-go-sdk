// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cen

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opDescribeCenAttributesCommon = "DescribeCenAttributes"

// DescribeCenAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttributesCommon operation. The "output" return
// value will be populated with the DescribeCenAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttributesCommon Send returns without error.
//
// See DescribeCenAttributesCommon for more information on using the DescribeCenAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttributesCommonRequest method.
//    req, resp := client.DescribeCenAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttributesCommon for usage and error information.
func (c *CEN) DescribeCenAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenAttributesCommonWithContext is the same as DescribeCenAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttributes = "DescribeCenAttributes"

// DescribeCenAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttributes operation. The "output" return
// value will be populated with the DescribeCenAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttributesCommon Send returns without error.
//
// See DescribeCenAttributes for more information on using the DescribeCenAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttributesRequest method.
//    req, resp := client.DescribeCenAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttributesRequest(input *DescribeCenAttributesInput) (req *request.Request, output *DescribeCenAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenAttributesInput{}
	}

	output = &DescribeCenAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttributes for usage and error information.
func (c *CEN) DescribeCenAttributes(input *DescribeCenAttributesInput) (*DescribeCenAttributesOutput, error) {
	req, out := c.DescribeCenAttributesRequest(input)
	return out, req.Send()
}

// DescribeCenAttributesWithContext is the same as DescribeCenAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttributesWithContext(ctx volcstack.Context, input *DescribeCenAttributesInput, opts ...request.Option) (*DescribeCenAttributesOutput, error) {
	req, out := c.DescribeCenAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeCenAttributesInput struct {
	_ struct{} `type:"structure"`

	// CenId is a required field
	CenId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeCenAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCenAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCenAttributesInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttributesInput) SetCenId(v string) *DescribeCenAttributesInput {
	s.CenId = &v
	return s
}

type DescribeCenAttributesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	CenBandwidthPackageIds []*string `type:"list"`

	CenId *string `type:"string"`

	CenName *string `type:"string"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttributesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeCenAttributesOutput) SetAccountId(v string) *DescribeCenAttributesOutput {
	s.AccountId = &v
	return s
}

// SetCenBandwidthPackageIds sets the CenBandwidthPackageIds field's value.
func (s *DescribeCenAttributesOutput) SetCenBandwidthPackageIds(v []*string) *DescribeCenAttributesOutput {
	s.CenBandwidthPackageIds = v
	return s
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttributesOutput) SetCenId(v string) *DescribeCenAttributesOutput {
	s.CenId = &v
	return s
}

// SetCenName sets the CenName field's value.
func (s *DescribeCenAttributesOutput) SetCenName(v string) *DescribeCenAttributesOutput {
	s.CenName = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeCenAttributesOutput) SetCreationTime(v string) *DescribeCenAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeCenAttributesOutput) SetDescription(v string) *DescribeCenAttributesOutput {
	s.Description = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeCenAttributesOutput) SetStatus(v string) *DescribeCenAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeCenAttributesOutput) SetUpdateTime(v string) *DescribeCenAttributesOutput {
	s.UpdateTime = &v
	return s
}

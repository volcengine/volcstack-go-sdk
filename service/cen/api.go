// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cen

import (
	"github.com/volcengine/volcstack-go-sdk/private/protocol"
	"github.com/volcengine/volcstack-go-sdk/private/protocol/volcstackquery"
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackquery"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opAssociateCenBandwidthPackageCommon = "AssociateCenBandwidthPackage"

// AssociateCenBandwidthPackageCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the AssociateCenBandwidthPackageCommon operation. The "output" return
// value will be populated with the AssociateCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateCenBandwidthPackageCommon Send returns without error.
//
// See AssociateCenBandwidthPackageCommon for more information on using the AssociateCenBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the AssociateCenBandwidthPackageCommonRequest method.
//    req, resp := client.AssociateCenBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) AssociateCenBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateCenBandwidthPackageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateCenBandwidthPackageCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation AssociateCenBandwidthPackageCommon for usage and error information.
func (c *CEN) AssociateCenBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateCenBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// AssociateCenBandwidthPackageCommonWithContext is the same as AssociateCenBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateCenBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) AssociateCenBandwidthPackageCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateCenBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAssociateCenBandwidthPackage = "AssociateCenBandwidthPackage"

// AssociateCenBandwidthPackageRequest generates a "volcstack/request.Request" representing the
// client's request for the AssociateCenBandwidthPackage operation. The "output" return
// value will be populated with the AssociateCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AssociateCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after AssociateCenBandwidthPackageCommon Send returns without error.
//
// See AssociateCenBandwidthPackage for more information on using the AssociateCenBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the AssociateCenBandwidthPackageRequest method.
//    req, resp := client.AssociateCenBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) AssociateCenBandwidthPackageRequest(input *AssociateCenBandwidthPackageInput) (req *request.Request, output *AssociateCenBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opAssociateCenBandwidthPackage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AssociateCenBandwidthPackageInput{}
	}

	output = &AssociateCenBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// AssociateCenBandwidthPackage API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation AssociateCenBandwidthPackage for usage and error information.
func (c *CEN) AssociateCenBandwidthPackage(input *AssociateCenBandwidthPackageInput) (*AssociateCenBandwidthPackageOutput, error) {
	req, out := c.AssociateCenBandwidthPackageRequest(input)
	return out, req.Send()
}

// AssociateCenBandwidthPackageWithContext is the same as AssociateCenBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateCenBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) AssociateCenBandwidthPackageWithContext(ctx volcstack.Context, input *AssociateCenBandwidthPackageInput, opts ...request.Option) (*AssociateCenBandwidthPackageOutput, error) {
	req, out := c.AssociateCenBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachInstanceToCenCommon = "AttachInstanceToCen"

// AttachInstanceToCenCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the AttachInstanceToCenCommon operation. The "output" return
// value will be populated with the AttachInstanceToCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachInstanceToCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachInstanceToCenCommon Send returns without error.
//
// See AttachInstanceToCenCommon for more information on using the AttachInstanceToCenCommon
// API call, and error handling.
//
//    // Example sending a request using the AttachInstanceToCenCommonRequest method.
//    req, resp := client.AttachInstanceToCenCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) AttachInstanceToCenCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachInstanceToCenCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AttachInstanceToCenCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation AttachInstanceToCenCommon for usage and error information.
func (c *CEN) AttachInstanceToCenCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachInstanceToCenCommonRequest(input)
	return out, req.Send()
}

// AttachInstanceToCenCommonWithContext is the same as AttachInstanceToCenCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachInstanceToCenCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) AttachInstanceToCenCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachInstanceToCenCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachInstanceToCen = "AttachInstanceToCen"

// AttachInstanceToCenRequest generates a "volcstack/request.Request" representing the
// client's request for the AttachInstanceToCen operation. The "output" return
// value will be populated with the AttachInstanceToCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachInstanceToCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachInstanceToCenCommon Send returns without error.
//
// See AttachInstanceToCen for more information on using the AttachInstanceToCen
// API call, and error handling.
//
//    // Example sending a request using the AttachInstanceToCenRequest method.
//    req, resp := client.AttachInstanceToCenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) AttachInstanceToCenRequest(input *AttachInstanceToCenInput) (req *request.Request, output *AttachInstanceToCenOutput) {
	op := &request.Operation{
		Name:       opAttachInstanceToCen,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachInstanceToCenInput{}
	}

	output = &AttachInstanceToCenOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// AttachInstanceToCen API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation AttachInstanceToCen for usage and error information.
func (c *CEN) AttachInstanceToCen(input *AttachInstanceToCenInput) (*AttachInstanceToCenOutput, error) {
	req, out := c.AttachInstanceToCenRequest(input)
	return out, req.Send()
}

// AttachInstanceToCenWithContext is the same as AttachInstanceToCen with the addition of
// the ability to pass a context and additional request options.
//
// See AttachInstanceToCen for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) AttachInstanceToCenWithContext(ctx volcstack.Context, input *AttachInstanceToCenInput, opts ...request.Option) (*AttachInstanceToCenOutput, error) {
	req, out := c.AttachInstanceToCenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCenCommon = "CreateCen"

// CreateCenCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateCenCommon operation. The "output" return
// value will be populated with the CreateCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenCommon Send returns without error.
//
// See CreateCenCommon for more information on using the CreateCenCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateCenCommonRequest method.
//    req, resp := client.CreateCenCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateCenCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCenCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation CreateCenCommon for usage and error information.
func (c *CEN) CreateCenCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateCenCommonRequest(input)
	return out, req.Send()
}

// CreateCenCommonWithContext is the same as CreateCenCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCenCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateCenCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCen = "CreateCen"

// CreateCenRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateCen operation. The "output" return
// value will be populated with the CreateCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenCommon Send returns without error.
//
// See CreateCen for more information on using the CreateCen
// API call, and error handling.
//
//    // Example sending a request using the CreateCenRequest method.
//    req, resp := client.CreateCenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenRequest(input *CreateCenInput) (req *request.Request, output *CreateCenOutput) {
	op := &request.Operation{
		Name:       opCreateCen,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateCenInput{}
	}

	output = &CreateCenOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCen API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation CreateCen for usage and error information.
func (c *CEN) CreateCen(input *CreateCenInput) (*CreateCenOutput, error) {
	req, out := c.CreateCenRequest(input)
	return out, req.Send()
}

// CreateCenWithContext is the same as CreateCen with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCen for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenWithContext(ctx volcstack.Context, input *CreateCenInput, opts ...request.Option) (*CreateCenOutput, error) {
	req, out := c.CreateCenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCenBandwidthPackageCommon = "CreateCenBandwidthPackage"

// CreateCenBandwidthPackageCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateCenBandwidthPackageCommon operation. The "output" return
// value will be populated with the CreateCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenBandwidthPackageCommon Send returns without error.
//
// See CreateCenBandwidthPackageCommon for more information on using the CreateCenBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateCenBandwidthPackageCommonRequest method.
//    req, resp := client.CreateCenBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateCenBandwidthPackageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCenBandwidthPackageCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation CreateCenBandwidthPackageCommon for usage and error information.
func (c *CEN) CreateCenBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateCenBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// CreateCenBandwidthPackageCommonWithContext is the same as CreateCenBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCenBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenBandwidthPackageCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateCenBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCenBandwidthPackage = "CreateCenBandwidthPackage"

// CreateCenBandwidthPackageRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateCenBandwidthPackage operation. The "output" return
// value will be populated with the CreateCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenBandwidthPackageCommon Send returns without error.
//
// See CreateCenBandwidthPackage for more information on using the CreateCenBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the CreateCenBandwidthPackageRequest method.
//    req, resp := client.CreateCenBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenBandwidthPackageRequest(input *CreateCenBandwidthPackageInput) (req *request.Request, output *CreateCenBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opCreateCenBandwidthPackage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateCenBandwidthPackageInput{}
	}

	output = &CreateCenBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCenBandwidthPackage API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation CreateCenBandwidthPackage for usage and error information.
func (c *CEN) CreateCenBandwidthPackage(input *CreateCenBandwidthPackageInput) (*CreateCenBandwidthPackageOutput, error) {
	req, out := c.CreateCenBandwidthPackageRequest(input)
	return out, req.Send()
}

// CreateCenBandwidthPackageWithContext is the same as CreateCenBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCenBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenBandwidthPackageWithContext(ctx volcstack.Context, input *CreateCenBandwidthPackageInput, opts ...request.Option) (*CreateCenBandwidthPackageOutput, error) {
	req, out := c.CreateCenBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCenInterRegionBandwidthCommon = "CreateCenInterRegionBandwidth"

// CreateCenInterRegionBandwidthCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateCenInterRegionBandwidthCommon operation. The "output" return
// value will be populated with the CreateCenInterRegionBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenInterRegionBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenInterRegionBandwidthCommon Send returns without error.
//
// See CreateCenInterRegionBandwidthCommon for more information on using the CreateCenInterRegionBandwidthCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateCenInterRegionBandwidthCommonRequest method.
//    req, resp := client.CreateCenInterRegionBandwidthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenInterRegionBandwidthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateCenInterRegionBandwidthCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCenInterRegionBandwidthCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation CreateCenInterRegionBandwidthCommon for usage and error information.
func (c *CEN) CreateCenInterRegionBandwidthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateCenInterRegionBandwidthCommonRequest(input)
	return out, req.Send()
}

// CreateCenInterRegionBandwidthCommonWithContext is the same as CreateCenInterRegionBandwidthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCenInterRegionBandwidthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenInterRegionBandwidthCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateCenInterRegionBandwidthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateCenInterRegionBandwidth = "CreateCenInterRegionBandwidth"

// CreateCenInterRegionBandwidthRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateCenInterRegionBandwidth operation. The "output" return
// value will be populated with the CreateCenInterRegionBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateCenInterRegionBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateCenInterRegionBandwidthCommon Send returns without error.
//
// See CreateCenInterRegionBandwidth for more information on using the CreateCenInterRegionBandwidth
// API call, and error handling.
//
//    // Example sending a request using the CreateCenInterRegionBandwidthRequest method.
//    req, resp := client.CreateCenInterRegionBandwidthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) CreateCenInterRegionBandwidthRequest(input *CreateCenInterRegionBandwidthInput) (req *request.Request, output *CreateCenInterRegionBandwidthOutput) {
	op := &request.Operation{
		Name:       opCreateCenInterRegionBandwidth,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateCenInterRegionBandwidthInput{}
	}

	output = &CreateCenInterRegionBandwidthOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateCenInterRegionBandwidth API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation CreateCenInterRegionBandwidth for usage and error information.
func (c *CEN) CreateCenInterRegionBandwidth(input *CreateCenInterRegionBandwidthInput) (*CreateCenInterRegionBandwidthOutput, error) {
	req, out := c.CreateCenInterRegionBandwidthRequest(input)
	return out, req.Send()
}

// CreateCenInterRegionBandwidthWithContext is the same as CreateCenInterRegionBandwidth with the addition of
// the ability to pass a context and additional request options.
//
// See CreateCenInterRegionBandwidth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) CreateCenInterRegionBandwidthWithContext(ctx volcstack.Context, input *CreateCenInterRegionBandwidthInput, opts ...request.Option) (*CreateCenInterRegionBandwidthOutput, error) {
	req, out := c.CreateCenInterRegionBandwidthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCenCommon = "DeleteCen"

// DeleteCenCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCenCommon operation. The "output" return
// value will be populated with the DeleteCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCenCommon Send returns without error.
//
// See DeleteCenCommon for more information on using the DeleteCenCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteCenCommonRequest method.
//    req, resp := client.DeleteCenCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DeleteCenCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCenCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCenCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DeleteCenCommon for usage and error information.
func (c *CEN) DeleteCenCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCenCommonRequest(input)
	return out, req.Send()
}

// DeleteCenCommonWithContext is the same as DeleteCenCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCenCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DeleteCenCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCenCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCen = "DeleteCen"

// DeleteCenRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCen operation. The "output" return
// value will be populated with the DeleteCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCenCommon Send returns without error.
//
// See DeleteCen for more information on using the DeleteCen
// API call, and error handling.
//
//    // Example sending a request using the DeleteCenRequest method.
//    req, resp := client.DeleteCenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DeleteCenRequest(input *DeleteCenInput) (req *request.Request, output *DeleteCenOutput) {
	op := &request.Operation{
		Name:       opDeleteCen,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteCenInput{}
	}

	output = &DeleteCenOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteCen API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DeleteCen for usage and error information.
func (c *CEN) DeleteCen(input *DeleteCenInput) (*DeleteCenOutput, error) {
	req, out := c.DeleteCenRequest(input)
	return out, req.Send()
}

// DeleteCenWithContext is the same as DeleteCen with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCen for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DeleteCenWithContext(ctx volcstack.Context, input *DeleteCenInput, opts ...request.Option) (*DeleteCenOutput, error) {
	req, out := c.DeleteCenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCenBandwidthPackageCommon = "DeleteCenBandwidthPackage"

// DeleteCenBandwidthPackageCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCenBandwidthPackageCommon operation. The "output" return
// value will be populated with the DeleteCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCenBandwidthPackageCommon Send returns without error.
//
// See DeleteCenBandwidthPackageCommon for more information on using the DeleteCenBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteCenBandwidthPackageCommonRequest method.
//    req, resp := client.DeleteCenBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DeleteCenBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCenBandwidthPackageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCenBandwidthPackageCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DeleteCenBandwidthPackageCommon for usage and error information.
func (c *CEN) DeleteCenBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCenBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// DeleteCenBandwidthPackageCommonWithContext is the same as DeleteCenBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCenBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DeleteCenBandwidthPackageCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCenBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCenBandwidthPackage = "DeleteCenBandwidthPackage"

// DeleteCenBandwidthPackageRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCenBandwidthPackage operation. The "output" return
// value will be populated with the DeleteCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCenBandwidthPackageCommon Send returns without error.
//
// See DeleteCenBandwidthPackage for more information on using the DeleteCenBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the DeleteCenBandwidthPackageRequest method.
//    req, resp := client.DeleteCenBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DeleteCenBandwidthPackageRequest(input *DeleteCenBandwidthPackageInput) (req *request.Request, output *DeleteCenBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opDeleteCenBandwidthPackage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteCenBandwidthPackageInput{}
	}

	output = &DeleteCenBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCenBandwidthPackage API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DeleteCenBandwidthPackage for usage and error information.
func (c *CEN) DeleteCenBandwidthPackage(input *DeleteCenBandwidthPackageInput) (*DeleteCenBandwidthPackageOutput, error) {
	req, out := c.DeleteCenBandwidthPackageRequest(input)
	return out, req.Send()
}

// DeleteCenBandwidthPackageWithContext is the same as DeleteCenBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCenBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DeleteCenBandwidthPackageWithContext(ctx volcstack.Context, input *DeleteCenBandwidthPackageInput, opts ...request.Option) (*DeleteCenBandwidthPackageOutput, error) {
	req, out := c.DeleteCenBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCenInterRegionBandwidthCommon = "DeleteCenInterRegionBandwidth"

// DeleteCenInterRegionBandwidthCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCenInterRegionBandwidthCommon operation. The "output" return
// value will be populated with the DeleteCenInterRegionBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCenInterRegionBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCenInterRegionBandwidthCommon Send returns without error.
//
// See DeleteCenInterRegionBandwidthCommon for more information on using the DeleteCenInterRegionBandwidthCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteCenInterRegionBandwidthCommonRequest method.
//    req, resp := client.DeleteCenInterRegionBandwidthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DeleteCenInterRegionBandwidthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCenInterRegionBandwidthCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCenInterRegionBandwidthCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DeleteCenInterRegionBandwidthCommon for usage and error information.
func (c *CEN) DeleteCenInterRegionBandwidthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCenInterRegionBandwidthCommonRequest(input)
	return out, req.Send()
}

// DeleteCenInterRegionBandwidthCommonWithContext is the same as DeleteCenInterRegionBandwidthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCenInterRegionBandwidthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DeleteCenInterRegionBandwidthCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCenInterRegionBandwidthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCenInterRegionBandwidth = "DeleteCenInterRegionBandwidth"

// DeleteCenInterRegionBandwidthRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCenInterRegionBandwidth operation. The "output" return
// value will be populated with the DeleteCenInterRegionBandwidthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCenInterRegionBandwidthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCenInterRegionBandwidthCommon Send returns without error.
//
// See DeleteCenInterRegionBandwidth for more information on using the DeleteCenInterRegionBandwidth
// API call, and error handling.
//
//    // Example sending a request using the DeleteCenInterRegionBandwidthRequest method.
//    req, resp := client.DeleteCenInterRegionBandwidthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DeleteCenInterRegionBandwidthRequest(input *DeleteCenInterRegionBandwidthInput) (req *request.Request, output *DeleteCenInterRegionBandwidthOutput) {
	op := &request.Operation{
		Name:       opDeleteCenInterRegionBandwidth,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteCenInterRegionBandwidthInput{}
	}

	output = &DeleteCenInterRegionBandwidthOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteCenInterRegionBandwidth API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DeleteCenInterRegionBandwidth for usage and error information.
func (c *CEN) DeleteCenInterRegionBandwidth(input *DeleteCenInterRegionBandwidthInput) (*DeleteCenInterRegionBandwidthOutput, error) {
	req, out := c.DeleteCenInterRegionBandwidthRequest(input)
	return out, req.Send()
}

// DeleteCenInterRegionBandwidthWithContext is the same as DeleteCenInterRegionBandwidth with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCenInterRegionBandwidth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DeleteCenInterRegionBandwidthWithContext(ctx volcstack.Context, input *DeleteCenInterRegionBandwidthInput, opts ...request.Option) (*DeleteCenInterRegionBandwidthOutput, error) {
	req, out := c.DeleteCenInterRegionBandwidthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttachedInstanceAttributesCommon = "DescribeCenAttachedInstanceAttributes"

// DescribeCenAttachedInstanceAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttachedInstanceAttributesCommon operation. The "output" return
// value will be populated with the DescribeCenAttachedInstanceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttachedInstanceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttachedInstanceAttributesCommon Send returns without error.
//
// See DescribeCenAttachedInstanceAttributesCommon for more information on using the DescribeCenAttachedInstanceAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttachedInstanceAttributesCommonRequest method.
//    req, resp := client.DescribeCenAttachedInstanceAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttachedInstanceAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenAttachedInstanceAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttachedInstanceAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttachedInstanceAttributesCommon for usage and error information.
func (c *CEN) DescribeCenAttachedInstanceAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenAttachedInstanceAttributesCommonWithContext is the same as DescribeCenAttachedInstanceAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttachedInstanceAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttachedInstanceAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttachedInstanceAttributes = "DescribeCenAttachedInstanceAttributes"

// DescribeCenAttachedInstanceAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttachedInstanceAttributes operation. The "output" return
// value will be populated with the DescribeCenAttachedInstanceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttachedInstanceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttachedInstanceAttributesCommon Send returns without error.
//
// See DescribeCenAttachedInstanceAttributes for more information on using the DescribeCenAttachedInstanceAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttachedInstanceAttributesRequest method.
//    req, resp := client.DescribeCenAttachedInstanceAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttachedInstanceAttributesRequest(input *DescribeCenAttachedInstanceAttributesInput) (req *request.Request, output *DescribeCenAttachedInstanceAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenAttachedInstanceAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenAttachedInstanceAttributesInput{}
	}

	output = &DescribeCenAttachedInstanceAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttachedInstanceAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttachedInstanceAttributes for usage and error information.
func (c *CEN) DescribeCenAttachedInstanceAttributes(input *DescribeCenAttachedInstanceAttributesInput) (*DescribeCenAttachedInstanceAttributesOutput, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesRequest(input)
	return out, req.Send()
}

// DescribeCenAttachedInstanceAttributesWithContext is the same as DescribeCenAttachedInstanceAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttachedInstanceAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttachedInstanceAttributesWithContext(ctx volcstack.Context, input *DescribeCenAttachedInstanceAttributesInput, opts ...request.Option) (*DescribeCenAttachedInstanceAttributesOutput, error) {
	req, out := c.DescribeCenAttachedInstanceAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttachedInstancesCommon = "DescribeCenAttachedInstances"

// DescribeCenAttachedInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttachedInstancesCommon operation. The "output" return
// value will be populated with the DescribeCenAttachedInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttachedInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttachedInstancesCommon Send returns without error.
//
// See DescribeCenAttachedInstancesCommon for more information on using the DescribeCenAttachedInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttachedInstancesCommonRequest method.
//    req, resp := client.DescribeCenAttachedInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttachedInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenAttachedInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttachedInstancesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttachedInstancesCommon for usage and error information.
func (c *CEN) DescribeCenAttachedInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttachedInstancesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenAttachedInstancesCommonWithContext is the same as DescribeCenAttachedInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttachedInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttachedInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttachedInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttachedInstances = "DescribeCenAttachedInstances"

// DescribeCenAttachedInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttachedInstances operation. The "output" return
// value will be populated with the DescribeCenAttachedInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttachedInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttachedInstancesCommon Send returns without error.
//
// See DescribeCenAttachedInstances for more information on using the DescribeCenAttachedInstances
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttachedInstancesRequest method.
//    req, resp := client.DescribeCenAttachedInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttachedInstancesRequest(input *DescribeCenAttachedInstancesInput) (req *request.Request, output *DescribeCenAttachedInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenAttachedInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenAttachedInstancesInput{}
	}

	output = &DescribeCenAttachedInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttachedInstances API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttachedInstances for usage and error information.
func (c *CEN) DescribeCenAttachedInstances(input *DescribeCenAttachedInstancesInput) (*DescribeCenAttachedInstancesOutput, error) {
	req, out := c.DescribeCenAttachedInstancesRequest(input)
	return out, req.Send()
}

// DescribeCenAttachedInstancesWithContext is the same as DescribeCenAttachedInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttachedInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttachedInstancesWithContext(ctx volcstack.Context, input *DescribeCenAttachedInstancesInput, opts ...request.Option) (*DescribeCenAttachedInstancesOutput, error) {
	req, out := c.DescribeCenAttachedInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttributesCommon = "DescribeCenAttributes"

// DescribeCenAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttributesCommon operation. The "output" return
// value will be populated with the DescribeCenAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttributesCommon Send returns without error.
//
// See DescribeCenAttributesCommon for more information on using the DescribeCenAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttributesCommonRequest method.
//    req, resp := client.DescribeCenAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttributesCommon for usage and error information.
func (c *CEN) DescribeCenAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenAttributesCommonWithContext is the same as DescribeCenAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenAttributes = "DescribeCenAttributes"

// DescribeCenAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenAttributes operation. The "output" return
// value will be populated with the DescribeCenAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenAttributesCommon Send returns without error.
//
// See DescribeCenAttributes for more information on using the DescribeCenAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenAttributesRequest method.
//    req, resp := client.DescribeCenAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenAttributesRequest(input *DescribeCenAttributesInput) (req *request.Request, output *DescribeCenAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenAttributesInput{}
	}

	output = &DescribeCenAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenAttributes for usage and error information.
func (c *CEN) DescribeCenAttributes(input *DescribeCenAttributesInput) (*DescribeCenAttributesOutput, error) {
	req, out := c.DescribeCenAttributesRequest(input)
	return out, req.Send()
}

// DescribeCenAttributesWithContext is the same as DescribeCenAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenAttributesWithContext(ctx volcstack.Context, input *DescribeCenAttributesInput, opts ...request.Option) (*DescribeCenAttributesOutput, error) {
	req, out := c.DescribeCenAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenBandwidthPackageAttributesCommon = "DescribeCenBandwidthPackageAttributes"

// DescribeCenBandwidthPackageAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenBandwidthPackageAttributesCommon operation. The "output" return
// value will be populated with the DescribeCenBandwidthPackageAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenBandwidthPackageAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenBandwidthPackageAttributesCommon Send returns without error.
//
// See DescribeCenBandwidthPackageAttributesCommon for more information on using the DescribeCenBandwidthPackageAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenBandwidthPackageAttributesCommonRequest method.
//    req, resp := client.DescribeCenBandwidthPackageAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenBandwidthPackageAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenBandwidthPackageAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenBandwidthPackageAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenBandwidthPackageAttributesCommon for usage and error information.
func (c *CEN) DescribeCenBandwidthPackageAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenBandwidthPackageAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenBandwidthPackageAttributesCommonWithContext is the same as DescribeCenBandwidthPackageAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenBandwidthPackageAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenBandwidthPackageAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenBandwidthPackageAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenBandwidthPackageAttributes = "DescribeCenBandwidthPackageAttributes"

// DescribeCenBandwidthPackageAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenBandwidthPackageAttributes operation. The "output" return
// value will be populated with the DescribeCenBandwidthPackageAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenBandwidthPackageAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenBandwidthPackageAttributesCommon Send returns without error.
//
// See DescribeCenBandwidthPackageAttributes for more information on using the DescribeCenBandwidthPackageAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenBandwidthPackageAttributesRequest method.
//    req, resp := client.DescribeCenBandwidthPackageAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenBandwidthPackageAttributesRequest(input *DescribeCenBandwidthPackageAttributesInput) (req *request.Request, output *DescribeCenBandwidthPackageAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenBandwidthPackageAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenBandwidthPackageAttributesInput{}
	}

	output = &DescribeCenBandwidthPackageAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenBandwidthPackageAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenBandwidthPackageAttributes for usage and error information.
func (c *CEN) DescribeCenBandwidthPackageAttributes(input *DescribeCenBandwidthPackageAttributesInput) (*DescribeCenBandwidthPackageAttributesOutput, error) {
	req, out := c.DescribeCenBandwidthPackageAttributesRequest(input)
	return out, req.Send()
}

// DescribeCenBandwidthPackageAttributesWithContext is the same as DescribeCenBandwidthPackageAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenBandwidthPackageAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenBandwidthPackageAttributesWithContext(ctx volcstack.Context, input *DescribeCenBandwidthPackageAttributesInput, opts ...request.Option) (*DescribeCenBandwidthPackageAttributesOutput, error) {
	req, out := c.DescribeCenBandwidthPackageAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenBandwidthPackagesCommon = "DescribeCenBandwidthPackages"

// DescribeCenBandwidthPackagesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenBandwidthPackagesCommon operation. The "output" return
// value will be populated with the DescribeCenBandwidthPackagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenBandwidthPackagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenBandwidthPackagesCommon Send returns without error.
//
// See DescribeCenBandwidthPackagesCommon for more information on using the DescribeCenBandwidthPackagesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenBandwidthPackagesCommonRequest method.
//    req, resp := client.DescribeCenBandwidthPackagesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenBandwidthPackagesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenBandwidthPackagesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenBandwidthPackagesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenBandwidthPackagesCommon for usage and error information.
func (c *CEN) DescribeCenBandwidthPackagesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenBandwidthPackagesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenBandwidthPackagesCommonWithContext is the same as DescribeCenBandwidthPackagesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenBandwidthPackagesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenBandwidthPackagesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenBandwidthPackagesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenBandwidthPackages = "DescribeCenBandwidthPackages"

// DescribeCenBandwidthPackagesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenBandwidthPackages operation. The "output" return
// value will be populated with the DescribeCenBandwidthPackagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenBandwidthPackagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenBandwidthPackagesCommon Send returns without error.
//
// See DescribeCenBandwidthPackages for more information on using the DescribeCenBandwidthPackages
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenBandwidthPackagesRequest method.
//    req, resp := client.DescribeCenBandwidthPackagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenBandwidthPackagesRequest(input *DescribeCenBandwidthPackagesInput) (req *request.Request, output *DescribeCenBandwidthPackagesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenBandwidthPackages,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenBandwidthPackagesInput{}
	}

	output = &DescribeCenBandwidthPackagesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenBandwidthPackages API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenBandwidthPackages for usage and error information.
func (c *CEN) DescribeCenBandwidthPackages(input *DescribeCenBandwidthPackagesInput) (*DescribeCenBandwidthPackagesOutput, error) {
	req, out := c.DescribeCenBandwidthPackagesRequest(input)
	return out, req.Send()
}

// DescribeCenBandwidthPackagesWithContext is the same as DescribeCenBandwidthPackages with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenBandwidthPackages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenBandwidthPackagesWithContext(ctx volcstack.Context, input *DescribeCenBandwidthPackagesInput, opts ...request.Option) (*DescribeCenBandwidthPackagesOutput, error) {
	req, out := c.DescribeCenBandwidthPackagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenBandwidthPackagesBillingCommon = "DescribeCenBandwidthPackagesBilling"

// DescribeCenBandwidthPackagesBillingCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenBandwidthPackagesBillingCommon operation. The "output" return
// value will be populated with the DescribeCenBandwidthPackagesBillingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenBandwidthPackagesBillingCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenBandwidthPackagesBillingCommon Send returns without error.
//
// See DescribeCenBandwidthPackagesBillingCommon for more information on using the DescribeCenBandwidthPackagesBillingCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenBandwidthPackagesBillingCommonRequest method.
//    req, resp := client.DescribeCenBandwidthPackagesBillingCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenBandwidthPackagesBillingCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenBandwidthPackagesBillingCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenBandwidthPackagesBillingCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenBandwidthPackagesBillingCommon for usage and error information.
func (c *CEN) DescribeCenBandwidthPackagesBillingCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenBandwidthPackagesBillingCommonRequest(input)
	return out, req.Send()
}

// DescribeCenBandwidthPackagesBillingCommonWithContext is the same as DescribeCenBandwidthPackagesBillingCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenBandwidthPackagesBillingCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenBandwidthPackagesBillingCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenBandwidthPackagesBillingCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenBandwidthPackagesBilling = "DescribeCenBandwidthPackagesBilling"

// DescribeCenBandwidthPackagesBillingRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenBandwidthPackagesBilling operation. The "output" return
// value will be populated with the DescribeCenBandwidthPackagesBillingCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenBandwidthPackagesBillingCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenBandwidthPackagesBillingCommon Send returns without error.
//
// See DescribeCenBandwidthPackagesBilling for more information on using the DescribeCenBandwidthPackagesBilling
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenBandwidthPackagesBillingRequest method.
//    req, resp := client.DescribeCenBandwidthPackagesBillingRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenBandwidthPackagesBillingRequest(input *DescribeCenBandwidthPackagesBillingInput) (req *request.Request, output *DescribeCenBandwidthPackagesBillingOutput) {
	op := &request.Operation{
		Name:       opDescribeCenBandwidthPackagesBilling,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenBandwidthPackagesBillingInput{}
	}

	output = &DescribeCenBandwidthPackagesBillingOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenBandwidthPackagesBilling API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenBandwidthPackagesBilling for usage and error information.
func (c *CEN) DescribeCenBandwidthPackagesBilling(input *DescribeCenBandwidthPackagesBillingInput) (*DescribeCenBandwidthPackagesBillingOutput, error) {
	req, out := c.DescribeCenBandwidthPackagesBillingRequest(input)
	return out, req.Send()
}

// DescribeCenBandwidthPackagesBillingWithContext is the same as DescribeCenBandwidthPackagesBilling with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenBandwidthPackagesBilling for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenBandwidthPackagesBillingWithContext(ctx volcstack.Context, input *DescribeCenBandwidthPackagesBillingInput, opts ...request.Option) (*DescribeCenBandwidthPackagesBillingOutput, error) {
	req, out := c.DescribeCenBandwidthPackagesBillingRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenInterRegionBandwidthAttributesCommon = "DescribeCenInterRegionBandwidthAttributes"

// DescribeCenInterRegionBandwidthAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenInterRegionBandwidthAttributesCommon operation. The "output" return
// value will be populated with the DescribeCenInterRegionBandwidthAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenInterRegionBandwidthAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenInterRegionBandwidthAttributesCommon Send returns without error.
//
// See DescribeCenInterRegionBandwidthAttributesCommon for more information on using the DescribeCenInterRegionBandwidthAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenInterRegionBandwidthAttributesCommonRequest method.
//    req, resp := client.DescribeCenInterRegionBandwidthAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenInterRegionBandwidthAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenInterRegionBandwidthAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenInterRegionBandwidthAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenInterRegionBandwidthAttributesCommon for usage and error information.
func (c *CEN) DescribeCenInterRegionBandwidthAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenInterRegionBandwidthAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenInterRegionBandwidthAttributesCommonWithContext is the same as DescribeCenInterRegionBandwidthAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenInterRegionBandwidthAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenInterRegionBandwidthAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenInterRegionBandwidthAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenInterRegionBandwidthAttributes = "DescribeCenInterRegionBandwidthAttributes"

// DescribeCenInterRegionBandwidthAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenInterRegionBandwidthAttributes operation. The "output" return
// value will be populated with the DescribeCenInterRegionBandwidthAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenInterRegionBandwidthAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenInterRegionBandwidthAttributesCommon Send returns without error.
//
// See DescribeCenInterRegionBandwidthAttributes for more information on using the DescribeCenInterRegionBandwidthAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenInterRegionBandwidthAttributesRequest method.
//    req, resp := client.DescribeCenInterRegionBandwidthAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenInterRegionBandwidthAttributesRequest(input *DescribeCenInterRegionBandwidthAttributesInput) (req *request.Request, output *DescribeCenInterRegionBandwidthAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenInterRegionBandwidthAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenInterRegionBandwidthAttributesInput{}
	}

	output = &DescribeCenInterRegionBandwidthAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenInterRegionBandwidthAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenInterRegionBandwidthAttributes for usage and error information.
func (c *CEN) DescribeCenInterRegionBandwidthAttributes(input *DescribeCenInterRegionBandwidthAttributesInput) (*DescribeCenInterRegionBandwidthAttributesOutput, error) {
	req, out := c.DescribeCenInterRegionBandwidthAttributesRequest(input)
	return out, req.Send()
}

// DescribeCenInterRegionBandwidthAttributesWithContext is the same as DescribeCenInterRegionBandwidthAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenInterRegionBandwidthAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenInterRegionBandwidthAttributesWithContext(ctx volcstack.Context, input *DescribeCenInterRegionBandwidthAttributesInput, opts ...request.Option) (*DescribeCenInterRegionBandwidthAttributesOutput, error) {
	req, out := c.DescribeCenInterRegionBandwidthAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenInterRegionBandwidthsCommon = "DescribeCenInterRegionBandwidths"

// DescribeCenInterRegionBandwidthsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenInterRegionBandwidthsCommon operation. The "output" return
// value will be populated with the DescribeCenInterRegionBandwidthsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenInterRegionBandwidthsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenInterRegionBandwidthsCommon Send returns without error.
//
// See DescribeCenInterRegionBandwidthsCommon for more information on using the DescribeCenInterRegionBandwidthsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenInterRegionBandwidthsCommonRequest method.
//    req, resp := client.DescribeCenInterRegionBandwidthsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenInterRegionBandwidthsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenInterRegionBandwidthsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenInterRegionBandwidthsCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenInterRegionBandwidthsCommon for usage and error information.
func (c *CEN) DescribeCenInterRegionBandwidthsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenInterRegionBandwidthsCommonRequest(input)
	return out, req.Send()
}

// DescribeCenInterRegionBandwidthsCommonWithContext is the same as DescribeCenInterRegionBandwidthsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenInterRegionBandwidthsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenInterRegionBandwidthsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenInterRegionBandwidthsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenInterRegionBandwidths = "DescribeCenInterRegionBandwidths"

// DescribeCenInterRegionBandwidthsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenInterRegionBandwidths operation. The "output" return
// value will be populated with the DescribeCenInterRegionBandwidthsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenInterRegionBandwidthsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenInterRegionBandwidthsCommon Send returns without error.
//
// See DescribeCenInterRegionBandwidths for more information on using the DescribeCenInterRegionBandwidths
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenInterRegionBandwidthsRequest method.
//    req, resp := client.DescribeCenInterRegionBandwidthsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenInterRegionBandwidthsRequest(input *DescribeCenInterRegionBandwidthsInput) (req *request.Request, output *DescribeCenInterRegionBandwidthsOutput) {
	op := &request.Operation{
		Name:       opDescribeCenInterRegionBandwidths,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenInterRegionBandwidthsInput{}
	}

	output = &DescribeCenInterRegionBandwidthsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenInterRegionBandwidths API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenInterRegionBandwidths for usage and error information.
func (c *CEN) DescribeCenInterRegionBandwidths(input *DescribeCenInterRegionBandwidthsInput) (*DescribeCenInterRegionBandwidthsOutput, error) {
	req, out := c.DescribeCenInterRegionBandwidthsRequest(input)
	return out, req.Send()
}

// DescribeCenInterRegionBandwidthsWithContext is the same as DescribeCenInterRegionBandwidths with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenInterRegionBandwidths for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenInterRegionBandwidthsWithContext(ctx volcstack.Context, input *DescribeCenInterRegionBandwidthsInput, opts ...request.Option) (*DescribeCenInterRegionBandwidthsOutput, error) {
	req, out := c.DescribeCenInterRegionBandwidthsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenRouteEntriesCommon = "DescribeCenRouteEntries"

// DescribeCenRouteEntriesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenRouteEntriesCommon operation. The "output" return
// value will be populated with the DescribeCenRouteEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenRouteEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenRouteEntriesCommon Send returns without error.
//
// See DescribeCenRouteEntriesCommon for more information on using the DescribeCenRouteEntriesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenRouteEntriesCommonRequest method.
//    req, resp := client.DescribeCenRouteEntriesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenRouteEntriesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenRouteEntriesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenRouteEntriesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenRouteEntriesCommon for usage and error information.
func (c *CEN) DescribeCenRouteEntriesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenRouteEntriesCommonRequest(input)
	return out, req.Send()
}

// DescribeCenRouteEntriesCommonWithContext is the same as DescribeCenRouteEntriesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenRouteEntriesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenRouteEntriesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenRouteEntriesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenRouteEntries = "DescribeCenRouteEntries"

// DescribeCenRouteEntriesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenRouteEntries operation. The "output" return
// value will be populated with the DescribeCenRouteEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenRouteEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenRouteEntriesCommon Send returns without error.
//
// See DescribeCenRouteEntries for more information on using the DescribeCenRouteEntries
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenRouteEntriesRequest method.
//    req, resp := client.DescribeCenRouteEntriesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenRouteEntriesRequest(input *DescribeCenRouteEntriesInput) (req *request.Request, output *DescribeCenRouteEntriesOutput) {
	op := &request.Operation{
		Name:       opDescribeCenRouteEntries,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenRouteEntriesInput{}
	}

	output = &DescribeCenRouteEntriesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenRouteEntries API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenRouteEntries for usage and error information.
func (c *CEN) DescribeCenRouteEntries(input *DescribeCenRouteEntriesInput) (*DescribeCenRouteEntriesOutput, error) {
	req, out := c.DescribeCenRouteEntriesRequest(input)
	return out, req.Send()
}

// DescribeCenRouteEntriesWithContext is the same as DescribeCenRouteEntries with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenRouteEntries for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenRouteEntriesWithContext(ctx volcstack.Context, input *DescribeCenRouteEntriesInput, opts ...request.Option) (*DescribeCenRouteEntriesOutput, error) {
	req, out := c.DescribeCenRouteEntriesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenSupportedRegionsCommon = "DescribeCenSupportedRegions"

// DescribeCenSupportedRegionsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenSupportedRegionsCommon operation. The "output" return
// value will be populated with the DescribeCenSupportedRegionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenSupportedRegionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenSupportedRegionsCommon Send returns without error.
//
// See DescribeCenSupportedRegionsCommon for more information on using the DescribeCenSupportedRegionsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenSupportedRegionsCommonRequest method.
//    req, resp := client.DescribeCenSupportedRegionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenSupportedRegionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCenSupportedRegionsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenSupportedRegionsCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenSupportedRegionsCommon for usage and error information.
func (c *CEN) DescribeCenSupportedRegionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCenSupportedRegionsCommonRequest(input)
	return out, req.Send()
}

// DescribeCenSupportedRegionsCommonWithContext is the same as DescribeCenSupportedRegionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenSupportedRegionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenSupportedRegionsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCenSupportedRegionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCenSupportedRegions = "DescribeCenSupportedRegions"

// DescribeCenSupportedRegionsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCenSupportedRegions operation. The "output" return
// value will be populated with the DescribeCenSupportedRegionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCenSupportedRegionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCenSupportedRegionsCommon Send returns without error.
//
// See DescribeCenSupportedRegions for more information on using the DescribeCenSupportedRegions
// API call, and error handling.
//
//    // Example sending a request using the DescribeCenSupportedRegionsRequest method.
//    req, resp := client.DescribeCenSupportedRegionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCenSupportedRegionsRequest(input *DescribeCenSupportedRegionsInput) (req *request.Request, output *DescribeCenSupportedRegionsOutput) {
	op := &request.Operation{
		Name:       opDescribeCenSupportedRegions,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCenSupportedRegionsInput{}
	}

	output = &DescribeCenSupportedRegionsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCenSupportedRegions API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCenSupportedRegions for usage and error information.
func (c *CEN) DescribeCenSupportedRegions(input *DescribeCenSupportedRegionsInput) (*DescribeCenSupportedRegionsOutput, error) {
	req, out := c.DescribeCenSupportedRegionsRequest(input)
	return out, req.Send()
}

// DescribeCenSupportedRegionsWithContext is the same as DescribeCenSupportedRegions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCenSupportedRegions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCenSupportedRegionsWithContext(ctx volcstack.Context, input *DescribeCenSupportedRegionsInput, opts ...request.Option) (*DescribeCenSupportedRegionsOutput, error) {
	req, out := c.DescribeCenSupportedRegionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCensCommon = "DescribeCens"

// DescribeCensCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCensCommon operation. The "output" return
// value will be populated with the DescribeCensCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCensCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCensCommon Send returns without error.
//
// See DescribeCensCommon for more information on using the DescribeCensCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCensCommonRequest method.
//    req, resp := client.DescribeCensCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCensCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCensCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCensCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCensCommon for usage and error information.
func (c *CEN) DescribeCensCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCensCommonRequest(input)
	return out, req.Send()
}

// DescribeCensCommonWithContext is the same as DescribeCensCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCensCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCensCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCensCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCens = "DescribeCens"

// DescribeCensRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCens operation. The "output" return
// value will be populated with the DescribeCensCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCensCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCensCommon Send returns without error.
//
// See DescribeCens for more information on using the DescribeCens
// API call, and error handling.
//
//    // Example sending a request using the DescribeCensRequest method.
//    req, resp := client.DescribeCensRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DescribeCensRequest(input *DescribeCensInput) (req *request.Request, output *DescribeCensOutput) {
	op := &request.Operation{
		Name:       opDescribeCens,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCensInput{}
	}

	output = &DescribeCensOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCens API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DescribeCens for usage and error information.
func (c *CEN) DescribeCens(input *DescribeCensInput) (*DescribeCensOutput, error) {
	req, out := c.DescribeCensRequest(input)
	return out, req.Send()
}

// DescribeCensWithContext is the same as DescribeCens with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCens for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DescribeCensWithContext(ctx volcstack.Context, input *DescribeCensInput, opts ...request.Option) (*DescribeCensOutput, error) {
	req, out := c.DescribeCensRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetachInstanceFromCenCommon = "DetachInstanceFromCen"

// DetachInstanceFromCenCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DetachInstanceFromCenCommon operation. The "output" return
// value will be populated with the DetachInstanceFromCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetachInstanceFromCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetachInstanceFromCenCommon Send returns without error.
//
// See DetachInstanceFromCenCommon for more information on using the DetachInstanceFromCenCommon
// API call, and error handling.
//
//    // Example sending a request using the DetachInstanceFromCenCommonRequest method.
//    req, resp := client.DetachInstanceFromCenCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DetachInstanceFromCenCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDetachInstanceFromCenCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DetachInstanceFromCenCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DetachInstanceFromCenCommon for usage and error information.
func (c *CEN) DetachInstanceFromCenCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DetachInstanceFromCenCommonRequest(input)
	return out, req.Send()
}

// DetachInstanceFromCenCommonWithContext is the same as DetachInstanceFromCenCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DetachInstanceFromCenCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DetachInstanceFromCenCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DetachInstanceFromCenCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetachInstanceFromCen = "DetachInstanceFromCen"

// DetachInstanceFromCenRequest generates a "volcstack/request.Request" representing the
// client's request for the DetachInstanceFromCen operation. The "output" return
// value will be populated with the DetachInstanceFromCenCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetachInstanceFromCenCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetachInstanceFromCenCommon Send returns without error.
//
// See DetachInstanceFromCen for more information on using the DetachInstanceFromCen
// API call, and error handling.
//
//    // Example sending a request using the DetachInstanceFromCenRequest method.
//    req, resp := client.DetachInstanceFromCenRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DetachInstanceFromCenRequest(input *DetachInstanceFromCenInput) (req *request.Request, output *DetachInstanceFromCenOutput) {
	op := &request.Operation{
		Name:       opDetachInstanceFromCen,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetachInstanceFromCenInput{}
	}

	output = &DetachInstanceFromCenOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DetachInstanceFromCen API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DetachInstanceFromCen for usage and error information.
func (c *CEN) DetachInstanceFromCen(input *DetachInstanceFromCenInput) (*DetachInstanceFromCenOutput, error) {
	req, out := c.DetachInstanceFromCenRequest(input)
	return out, req.Send()
}

// DetachInstanceFromCenWithContext is the same as DetachInstanceFromCen with the addition of
// the ability to pass a context and additional request options.
//
// See DetachInstanceFromCen for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DetachInstanceFromCenWithContext(ctx volcstack.Context, input *DetachInstanceFromCenInput, opts ...request.Option) (*DetachInstanceFromCenOutput, error) {
	req, out := c.DetachInstanceFromCenRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisassociateCenBandwidthPackageCommon = "DisassociateCenBandwidthPackage"

// DisassociateCenBandwidthPackageCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DisassociateCenBandwidthPackageCommon operation. The "output" return
// value will be populated with the DisassociateCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisassociateCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisassociateCenBandwidthPackageCommon Send returns without error.
//
// See DisassociateCenBandwidthPackageCommon for more information on using the DisassociateCenBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the DisassociateCenBandwidthPackageCommonRequest method.
//    req, resp := client.DisassociateCenBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DisassociateCenBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisassociateCenBandwidthPackageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DisassociateCenBandwidthPackageCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DisassociateCenBandwidthPackageCommon for usage and error information.
func (c *CEN) DisassociateCenBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisassociateCenBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// DisassociateCenBandwidthPackageCommonWithContext is the same as DisassociateCenBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DisassociateCenBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DisassociateCenBandwidthPackageCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisassociateCenBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisassociateCenBandwidthPackage = "DisassociateCenBandwidthPackage"

// DisassociateCenBandwidthPackageRequest generates a "volcstack/request.Request" representing the
// client's request for the DisassociateCenBandwidthPackage operation. The "output" return
// value will be populated with the DisassociateCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisassociateCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisassociateCenBandwidthPackageCommon Send returns without error.
//
// See DisassociateCenBandwidthPackage for more information on using the DisassociateCenBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the DisassociateCenBandwidthPackageRequest method.
//    req, resp := client.DisassociateCenBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) DisassociateCenBandwidthPackageRequest(input *DisassociateCenBandwidthPackageInput) (req *request.Request, output *DisassociateCenBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opDisassociateCenBandwidthPackage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisassociateCenBandwidthPackageInput{}
	}

	output = &DisassociateCenBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DisassociateCenBandwidthPackage API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation DisassociateCenBandwidthPackage for usage and error information.
func (c *CEN) DisassociateCenBandwidthPackage(input *DisassociateCenBandwidthPackageInput) (*DisassociateCenBandwidthPackageOutput, error) {
	req, out := c.DisassociateCenBandwidthPackageRequest(input)
	return out, req.Send()
}

// DisassociateCenBandwidthPackageWithContext is the same as DisassociateCenBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See DisassociateCenBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) DisassociateCenBandwidthPackageWithContext(ctx volcstack.Context, input *DisassociateCenBandwidthPackageInput, opts ...request.Option) (*DisassociateCenBandwidthPackageOutput, error) {
	req, out := c.DisassociateCenBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCenAttributesCommon = "ModifyCenAttributes"

// ModifyCenAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyCenAttributesCommon operation. The "output" return
// value will be populated with the ModifyCenAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCenAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCenAttributesCommon Send returns without error.
//
// See ModifyCenAttributesCommon for more information on using the ModifyCenAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyCenAttributesCommonRequest method.
//    req, resp := client.ModifyCenAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) ModifyCenAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyCenAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyCenAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation ModifyCenAttributesCommon for usage and error information.
func (c *CEN) ModifyCenAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyCenAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyCenAttributesCommonWithContext is the same as ModifyCenAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCenAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) ModifyCenAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyCenAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCenAttributes = "ModifyCenAttributes"

// ModifyCenAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyCenAttributes operation. The "output" return
// value will be populated with the ModifyCenAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCenAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCenAttributesCommon Send returns without error.
//
// See ModifyCenAttributes for more information on using the ModifyCenAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyCenAttributesRequest method.
//    req, resp := client.ModifyCenAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) ModifyCenAttributesRequest(input *ModifyCenAttributesInput) (req *request.Request, output *ModifyCenAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyCenAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyCenAttributesInput{}
	}

	output = &ModifyCenAttributesOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyCenAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation ModifyCenAttributes for usage and error information.
func (c *CEN) ModifyCenAttributes(input *ModifyCenAttributesInput) (*ModifyCenAttributesOutput, error) {
	req, out := c.ModifyCenAttributesRequest(input)
	return out, req.Send()
}

// ModifyCenAttributesWithContext is the same as ModifyCenAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCenAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) ModifyCenAttributesWithContext(ctx volcstack.Context, input *ModifyCenAttributesInput, opts ...request.Option) (*ModifyCenAttributesOutput, error) {
	req, out := c.ModifyCenAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCenBandwidthPackageAttributesCommon = "ModifyCenBandwidthPackageAttributes"

// ModifyCenBandwidthPackageAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyCenBandwidthPackageAttributesCommon operation. The "output" return
// value will be populated with the ModifyCenBandwidthPackageAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCenBandwidthPackageAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCenBandwidthPackageAttributesCommon Send returns without error.
//
// See ModifyCenBandwidthPackageAttributesCommon for more information on using the ModifyCenBandwidthPackageAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyCenBandwidthPackageAttributesCommonRequest method.
//    req, resp := client.ModifyCenBandwidthPackageAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) ModifyCenBandwidthPackageAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyCenBandwidthPackageAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyCenBandwidthPackageAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation ModifyCenBandwidthPackageAttributesCommon for usage and error information.
func (c *CEN) ModifyCenBandwidthPackageAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyCenBandwidthPackageAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyCenBandwidthPackageAttributesCommonWithContext is the same as ModifyCenBandwidthPackageAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCenBandwidthPackageAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) ModifyCenBandwidthPackageAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyCenBandwidthPackageAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCenBandwidthPackageAttributes = "ModifyCenBandwidthPackageAttributes"

// ModifyCenBandwidthPackageAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyCenBandwidthPackageAttributes operation. The "output" return
// value will be populated with the ModifyCenBandwidthPackageAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCenBandwidthPackageAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCenBandwidthPackageAttributesCommon Send returns without error.
//
// See ModifyCenBandwidthPackageAttributes for more information on using the ModifyCenBandwidthPackageAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyCenBandwidthPackageAttributesRequest method.
//    req, resp := client.ModifyCenBandwidthPackageAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) ModifyCenBandwidthPackageAttributesRequest(input *ModifyCenBandwidthPackageAttributesInput) (req *request.Request, output *ModifyCenBandwidthPackageAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyCenBandwidthPackageAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyCenBandwidthPackageAttributesInput{}
	}

	output = &ModifyCenBandwidthPackageAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyCenBandwidthPackageAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation ModifyCenBandwidthPackageAttributes for usage and error information.
func (c *CEN) ModifyCenBandwidthPackageAttributes(input *ModifyCenBandwidthPackageAttributesInput) (*ModifyCenBandwidthPackageAttributesOutput, error) {
	req, out := c.ModifyCenBandwidthPackageAttributesRequest(input)
	return out, req.Send()
}

// ModifyCenBandwidthPackageAttributesWithContext is the same as ModifyCenBandwidthPackageAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCenBandwidthPackageAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) ModifyCenBandwidthPackageAttributesWithContext(ctx volcstack.Context, input *ModifyCenBandwidthPackageAttributesInput, opts ...request.Option) (*ModifyCenBandwidthPackageAttributesOutput, error) {
	req, out := c.ModifyCenBandwidthPackageAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCenInterRegionBandwidthAttributesCommon = "ModifyCenInterRegionBandwidthAttributes"

// ModifyCenInterRegionBandwidthAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyCenInterRegionBandwidthAttributesCommon operation. The "output" return
// value will be populated with the ModifyCenInterRegionBandwidthAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCenInterRegionBandwidthAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCenInterRegionBandwidthAttributesCommon Send returns without error.
//
// See ModifyCenInterRegionBandwidthAttributesCommon for more information on using the ModifyCenInterRegionBandwidthAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyCenInterRegionBandwidthAttributesCommonRequest method.
//    req, resp := client.ModifyCenInterRegionBandwidthAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) ModifyCenInterRegionBandwidthAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyCenInterRegionBandwidthAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyCenInterRegionBandwidthAttributesCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation ModifyCenInterRegionBandwidthAttributesCommon for usage and error information.
func (c *CEN) ModifyCenInterRegionBandwidthAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyCenInterRegionBandwidthAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyCenInterRegionBandwidthAttributesCommonWithContext is the same as ModifyCenInterRegionBandwidthAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCenInterRegionBandwidthAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) ModifyCenInterRegionBandwidthAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyCenInterRegionBandwidthAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyCenInterRegionBandwidthAttributes = "ModifyCenInterRegionBandwidthAttributes"

// ModifyCenInterRegionBandwidthAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyCenInterRegionBandwidthAttributes operation. The "output" return
// value will be populated with the ModifyCenInterRegionBandwidthAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyCenInterRegionBandwidthAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyCenInterRegionBandwidthAttributesCommon Send returns without error.
//
// See ModifyCenInterRegionBandwidthAttributes for more information on using the ModifyCenInterRegionBandwidthAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyCenInterRegionBandwidthAttributesRequest method.
//    req, resp := client.ModifyCenInterRegionBandwidthAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) ModifyCenInterRegionBandwidthAttributesRequest(input *ModifyCenInterRegionBandwidthAttributesInput) (req *request.Request, output *ModifyCenInterRegionBandwidthAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyCenInterRegionBandwidthAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyCenInterRegionBandwidthAttributesInput{}
	}

	output = &ModifyCenInterRegionBandwidthAttributesOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyCenInterRegionBandwidthAttributes API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation ModifyCenInterRegionBandwidthAttributes for usage and error information.
func (c *CEN) ModifyCenInterRegionBandwidthAttributes(input *ModifyCenInterRegionBandwidthAttributesInput) (*ModifyCenInterRegionBandwidthAttributesOutput, error) {
	req, out := c.ModifyCenInterRegionBandwidthAttributesRequest(input)
	return out, req.Send()
}

// ModifyCenInterRegionBandwidthAttributesWithContext is the same as ModifyCenInterRegionBandwidthAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyCenInterRegionBandwidthAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) ModifyCenInterRegionBandwidthAttributesWithContext(ctx volcstack.Context, input *ModifyCenInterRegionBandwidthAttributesInput, opts ...request.Option) (*ModifyCenInterRegionBandwidthAttributesOutput, error) {
	req, out := c.ModifyCenInterRegionBandwidthAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPublishCenRouteEntryCommon = "PublishCenRouteEntry"

// PublishCenRouteEntryCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the PublishCenRouteEntryCommon operation. The "output" return
// value will be populated with the PublishCenRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PublishCenRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after PublishCenRouteEntryCommon Send returns without error.
//
// See PublishCenRouteEntryCommon for more information on using the PublishCenRouteEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the PublishCenRouteEntryCommonRequest method.
//    req, resp := client.PublishCenRouteEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) PublishCenRouteEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opPublishCenRouteEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// PublishCenRouteEntryCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation PublishCenRouteEntryCommon for usage and error information.
func (c *CEN) PublishCenRouteEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.PublishCenRouteEntryCommonRequest(input)
	return out, req.Send()
}

// PublishCenRouteEntryCommonWithContext is the same as PublishCenRouteEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See PublishCenRouteEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) PublishCenRouteEntryCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.PublishCenRouteEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPublishCenRouteEntry = "PublishCenRouteEntry"

// PublishCenRouteEntryRequest generates a "volcstack/request.Request" representing the
// client's request for the PublishCenRouteEntry operation. The "output" return
// value will be populated with the PublishCenRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned PublishCenRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after PublishCenRouteEntryCommon Send returns without error.
//
// See PublishCenRouteEntry for more information on using the PublishCenRouteEntry
// API call, and error handling.
//
//    // Example sending a request using the PublishCenRouteEntryRequest method.
//    req, resp := client.PublishCenRouteEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) PublishCenRouteEntryRequest(input *PublishCenRouteEntryInput) (req *request.Request, output *PublishCenRouteEntryOutput) {
	op := &request.Operation{
		Name:       opPublishCenRouteEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &PublishCenRouteEntryInput{}
	}

	output = &PublishCenRouteEntryOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// PublishCenRouteEntry API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation PublishCenRouteEntry for usage and error information.
func (c *CEN) PublishCenRouteEntry(input *PublishCenRouteEntryInput) (*PublishCenRouteEntryOutput, error) {
	req, out := c.PublishCenRouteEntryRequest(input)
	return out, req.Send()
}

// PublishCenRouteEntryWithContext is the same as PublishCenRouteEntry with the addition of
// the ability to pass a context and additional request options.
//
// See PublishCenRouteEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) PublishCenRouteEntryWithContext(ctx volcstack.Context, input *PublishCenRouteEntryInput, opts ...request.Option) (*PublishCenRouteEntryOutput, error) {
	req, out := c.PublishCenRouteEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewCenBandwidthPackageCommon = "RenewCenBandwidthPackage"

// RenewCenBandwidthPackageCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewCenBandwidthPackageCommon operation. The "output" return
// value will be populated with the RenewCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewCenBandwidthPackageCommon Send returns without error.
//
// See RenewCenBandwidthPackageCommon for more information on using the RenewCenBandwidthPackageCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewCenBandwidthPackageCommonRequest method.
//    req, resp := client.RenewCenBandwidthPackageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) RenewCenBandwidthPackageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewCenBandwidthPackageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewCenBandwidthPackageCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation RenewCenBandwidthPackageCommon for usage and error information.
func (c *CEN) RenewCenBandwidthPackageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewCenBandwidthPackageCommonRequest(input)
	return out, req.Send()
}

// RenewCenBandwidthPackageCommonWithContext is the same as RenewCenBandwidthPackageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewCenBandwidthPackageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) RenewCenBandwidthPackageCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewCenBandwidthPackageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewCenBandwidthPackage = "RenewCenBandwidthPackage"

// RenewCenBandwidthPackageRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewCenBandwidthPackage operation. The "output" return
// value will be populated with the RenewCenBandwidthPackageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewCenBandwidthPackageCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewCenBandwidthPackageCommon Send returns without error.
//
// See RenewCenBandwidthPackage for more information on using the RenewCenBandwidthPackage
// API call, and error handling.
//
//    // Example sending a request using the RenewCenBandwidthPackageRequest method.
//    req, resp := client.RenewCenBandwidthPackageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) RenewCenBandwidthPackageRequest(input *RenewCenBandwidthPackageInput) (req *request.Request, output *RenewCenBandwidthPackageOutput) {
	op := &request.Operation{
		Name:       opRenewCenBandwidthPackage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewCenBandwidthPackageInput{}
	}

	output = &RenewCenBandwidthPackageOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// RenewCenBandwidthPackage API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation RenewCenBandwidthPackage for usage and error information.
func (c *CEN) RenewCenBandwidthPackage(input *RenewCenBandwidthPackageInput) (*RenewCenBandwidthPackageOutput, error) {
	req, out := c.RenewCenBandwidthPackageRequest(input)
	return out, req.Send()
}

// RenewCenBandwidthPackageWithContext is the same as RenewCenBandwidthPackage with the addition of
// the ability to pass a context and additional request options.
//
// See RenewCenBandwidthPackage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) RenewCenBandwidthPackageWithContext(ctx volcstack.Context, input *RenewCenBandwidthPackageInput, opts ...request.Option) (*RenewCenBandwidthPackageOutput, error) {
	req, out := c.RenewCenBandwidthPackageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetCenBandwidthPackageRenewalCommon = "SetCenBandwidthPackageRenewal"

// SetCenBandwidthPackageRenewalCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the SetCenBandwidthPackageRenewalCommon operation. The "output" return
// value will be populated with the SetCenBandwidthPackageRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetCenBandwidthPackageRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetCenBandwidthPackageRenewalCommon Send returns without error.
//
// See SetCenBandwidthPackageRenewalCommon for more information on using the SetCenBandwidthPackageRenewalCommon
// API call, and error handling.
//
//    // Example sending a request using the SetCenBandwidthPackageRenewalCommonRequest method.
//    req, resp := client.SetCenBandwidthPackageRenewalCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) SetCenBandwidthPackageRenewalCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opSetCenBandwidthPackageRenewalCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// SetCenBandwidthPackageRenewalCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation SetCenBandwidthPackageRenewalCommon for usage and error information.
func (c *CEN) SetCenBandwidthPackageRenewalCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.SetCenBandwidthPackageRenewalCommonRequest(input)
	return out, req.Send()
}

// SetCenBandwidthPackageRenewalCommonWithContext is the same as SetCenBandwidthPackageRenewalCommon with the addition of
// the ability to pass a context and additional request options.
//
// See SetCenBandwidthPackageRenewalCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) SetCenBandwidthPackageRenewalCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.SetCenBandwidthPackageRenewalCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSetCenBandwidthPackageRenewal = "SetCenBandwidthPackageRenewal"

// SetCenBandwidthPackageRenewalRequest generates a "volcstack/request.Request" representing the
// client's request for the SetCenBandwidthPackageRenewal operation. The "output" return
// value will be populated with the SetCenBandwidthPackageRenewalCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned SetCenBandwidthPackageRenewalCommon Request to send the API call to the service.
// the "output" return value is not valid until after SetCenBandwidthPackageRenewalCommon Send returns without error.
//
// See SetCenBandwidthPackageRenewal for more information on using the SetCenBandwidthPackageRenewal
// API call, and error handling.
//
//    // Example sending a request using the SetCenBandwidthPackageRenewalRequest method.
//    req, resp := client.SetCenBandwidthPackageRenewalRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) SetCenBandwidthPackageRenewalRequest(input *SetCenBandwidthPackageRenewalInput) (req *request.Request, output *SetCenBandwidthPackageRenewalOutput) {
	op := &request.Operation{
		Name:       opSetCenBandwidthPackageRenewal,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetCenBandwidthPackageRenewalInput{}
	}

	output = &SetCenBandwidthPackageRenewalOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// SetCenBandwidthPackageRenewal API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation SetCenBandwidthPackageRenewal for usage and error information.
func (c *CEN) SetCenBandwidthPackageRenewal(input *SetCenBandwidthPackageRenewalInput) (*SetCenBandwidthPackageRenewalOutput, error) {
	req, out := c.SetCenBandwidthPackageRenewalRequest(input)
	return out, req.Send()
}

// SetCenBandwidthPackageRenewalWithContext is the same as SetCenBandwidthPackageRenewal with the addition of
// the ability to pass a context and additional request options.
//
// See SetCenBandwidthPackageRenewal for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) SetCenBandwidthPackageRenewalWithContext(ctx volcstack.Context, input *SetCenBandwidthPackageRenewalInput, opts ...request.Option) (*SetCenBandwidthPackageRenewalOutput, error) {
	req, out := c.SetCenBandwidthPackageRenewalRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opWithdrawCenRouteEntryCommon = "WithdrawCenRouteEntry"

// WithdrawCenRouteEntryCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the WithdrawCenRouteEntryCommon operation. The "output" return
// value will be populated with the WithdrawCenRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned WithdrawCenRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after WithdrawCenRouteEntryCommon Send returns without error.
//
// See WithdrawCenRouteEntryCommon for more information on using the WithdrawCenRouteEntryCommon
// API call, and error handling.
//
//    // Example sending a request using the WithdrawCenRouteEntryCommonRequest method.
//    req, resp := client.WithdrawCenRouteEntryCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) WithdrawCenRouteEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opWithdrawCenRouteEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// WithdrawCenRouteEntryCommon API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation WithdrawCenRouteEntryCommon for usage and error information.
func (c *CEN) WithdrawCenRouteEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.WithdrawCenRouteEntryCommonRequest(input)
	return out, req.Send()
}

// WithdrawCenRouteEntryCommonWithContext is the same as WithdrawCenRouteEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See WithdrawCenRouteEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) WithdrawCenRouteEntryCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.WithdrawCenRouteEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opWithdrawCenRouteEntry = "WithdrawCenRouteEntry"

// WithdrawCenRouteEntryRequest generates a "volcstack/request.Request" representing the
// client's request for the WithdrawCenRouteEntry operation. The "output" return
// value will be populated with the WithdrawCenRouteEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned WithdrawCenRouteEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after WithdrawCenRouteEntryCommon Send returns without error.
//
// See WithdrawCenRouteEntry for more information on using the WithdrawCenRouteEntry
// API call, and error handling.
//
//    // Example sending a request using the WithdrawCenRouteEntryRequest method.
//    req, resp := client.WithdrawCenRouteEntryRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CEN) WithdrawCenRouteEntryRequest(input *WithdrawCenRouteEntryInput) (req *request.Request, output *WithdrawCenRouteEntryOutput) {
	op := &request.Operation{
		Name:       opWithdrawCenRouteEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &WithdrawCenRouteEntryInput{}
	}

	output = &WithdrawCenRouteEntryOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// WithdrawCenRouteEntry API operation for CEN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CEN's
// API operation WithdrawCenRouteEntry for usage and error information.
func (c *CEN) WithdrawCenRouteEntry(input *WithdrawCenRouteEntryInput) (*WithdrawCenRouteEntryOutput, error) {
	req, out := c.WithdrawCenRouteEntryRequest(input)
	return out, req.Send()
}

// WithdrawCenRouteEntryWithContext is the same as WithdrawCenRouteEntry with the addition of
// the ability to pass a context and additional request options.
//
// See WithdrawCenRouteEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CEN) WithdrawCenRouteEntryWithContext(ctx volcstack.Context, input *WithdrawCenRouteEntryInput, opts ...request.Option) (*WithdrawCenRouteEntryOutput, error) {
	req, out := c.WithdrawCenRouteEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssociateCenBandwidthPackageInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`

	// CenId is a required field
	CenId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AssociateCenBandwidthPackageInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateCenBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociateCenBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AssociateCenBandwidthPackageInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *AssociateCenBandwidthPackageInput) SetCenBandwidthPackageId(v string) *AssociateCenBandwidthPackageInput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetCenId sets the CenId field's value.
func (s *AssociateCenBandwidthPackageInput) SetCenId(v string) *AssociateCenBandwidthPackageInput {
	s.CenId = &v
	return s
}

type AssociateCenBandwidthPackageOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s AssociateCenBandwidthPackageOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateCenBandwidthPackageOutput) GoString() string {
	return s.String()
}

type AttachInstanceToCenInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// InstanceRegionId is a required field
	InstanceRegionId *string `type:"string" required:"true"`

	// InstanceType is a required field
	InstanceType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AttachInstanceToCenInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachInstanceToCenInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachInstanceToCenInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AttachInstanceToCenInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.InstanceRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceRegionId"))
	}
	if s.InstanceType == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *AttachInstanceToCenInput) SetCenId(v string) *AttachInstanceToCenInput {
	s.CenId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *AttachInstanceToCenInput) SetInstanceId(v string) *AttachInstanceToCenInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *AttachInstanceToCenInput) SetInstanceRegionId(v string) *AttachInstanceToCenInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *AttachInstanceToCenInput) SetInstanceType(v string) *AttachInstanceToCenInput {
	s.InstanceType = &v
	return s
}

type AttachInstanceToCenOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s AttachInstanceToCenOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachInstanceToCenOutput) GoString() string {
	return s.String()
}

type AttachedInstanceForDescribeCenAttachedInstancesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenId *string `type:"string"`

	CreationTime *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceRegionId *string `type:"string"`

	InstanceType *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s AttachedInstanceForDescribeCenAttachedInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachedInstanceForDescribeCenAttachedInstancesOutput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *AttachedInstanceForDescribeCenAttachedInstancesOutput) SetCenId(v string) *AttachedInstanceForDescribeCenAttachedInstancesOutput {
	s.CenId = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *AttachedInstanceForDescribeCenAttachedInstancesOutput) SetCreationTime(v string) *AttachedInstanceForDescribeCenAttachedInstancesOutput {
	s.CreationTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *AttachedInstanceForDescribeCenAttachedInstancesOutput) SetInstanceId(v string) *AttachedInstanceForDescribeCenAttachedInstancesOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *AttachedInstanceForDescribeCenAttachedInstancesOutput) SetInstanceRegionId(v string) *AttachedInstanceForDescribeCenAttachedInstancesOutput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *AttachedInstanceForDescribeCenAttachedInstancesOutput) SetInstanceType(v string) *AttachedInstanceForDescribeCenAttachedInstancesOutput {
	s.InstanceType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *AttachedInstanceForDescribeCenAttachedInstancesOutput) SetStatus(v string) *AttachedInstanceForDescribeCenAttachedInstancesOutput {
	s.Status = &v
	return s
}

type CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	BillingStatus *int64 `type:"integer"`

	BillingType *int64 `type:"integer"`

	CenBandwidthPackageId *string `type:"string"`

	ExpiredTime *string `type:"string"`

	ReclaimTime *string `type:"string"`

	RemainRenewTimes *int64 `type:"integer"`

	RenewType *string `type:"string"`
}

// String returns the string representation
func (s CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) GoString() string {
	return s.String()
}

// SetBillingStatus sets the BillingStatus field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) SetBillingStatus(v int64) *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput {
	s.BillingStatus = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) SetBillingType(v int64) *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput {
	s.BillingType = &v
	return s
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) SetCenBandwidthPackageId(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) SetExpiredTime(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput {
	s.ExpiredTime = &v
	return s
}

// SetReclaimTime sets the ReclaimTime field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) SetReclaimTime(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput {
	s.ReclaimTime = &v
	return s
}

// SetRemainRenewTimes sets the RemainRenewTimes field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) SetRemainRenewTimes(v int64) *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput {
	s.RemainRenewTimes = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) SetRenewType(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput {
	s.RenewType = &v
	return s
}

type CenBandwidthPackageForDescribeCenBandwidthPackagesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	AccountId *string `type:"string"`

	Bandwidth *int64 `type:"integer"`

	BillingType *int64 `type:"integer"`

	BusinessStatus *string `type:"string"`

	CenBandwidthPackageId *string `type:"string"`

	CenBandwidthPackageName *string `type:"string"`

	CenIds []*string `type:"list"`

	CreationTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	ExpiredTime *string `type:"string"`

	LocalGeographicRegionSetId *string `type:"string"`

	PeerGeographicRegionSetId *string `type:"string"`

	RemainingBandwidth *int64 `type:"integer"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetAccountId(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.AccountId = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetBandwidth(v int64) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.Bandwidth = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetBillingType(v int64) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.BillingType = &v
	return s
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetBusinessStatus(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.BusinessStatus = &v
	return s
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetCenBandwidthPackageId(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetCenBandwidthPackageName sets the CenBandwidthPackageName field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetCenBandwidthPackageName(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.CenBandwidthPackageName = &v
	return s
}

// SetCenIds sets the CenIds field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetCenIds(v []*string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.CenIds = v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetCreationTime(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.CreationTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetDeletedTime(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetDescription(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.Description = &v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetExpiredTime(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.ExpiredTime = &v
	return s
}

// SetLocalGeographicRegionSetId sets the LocalGeographicRegionSetId field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetLocalGeographicRegionSetId(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.LocalGeographicRegionSetId = &v
	return s
}

// SetPeerGeographicRegionSetId sets the PeerGeographicRegionSetId field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetPeerGeographicRegionSetId(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.PeerGeographicRegionSetId = &v
	return s
}

// SetRemainingBandwidth sets the RemainingBandwidth field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetRemainingBandwidth(v int64) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.RemainingBandwidth = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetStatus(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) SetUpdateTime(v string) *CenBandwidthPackageForDescribeCenBandwidthPackagesOutput {
	s.UpdateTime = &v
	return s
}

type CenForDescribeCensOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	AccountId *string `type:"string"`

	CenBandwidthPackageIds []*string `type:"list"`

	CenId *string `type:"string"`

	CenName *string `type:"string"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s CenForDescribeCensOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CenForDescribeCensOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CenForDescribeCensOutput) SetAccountId(v string) *CenForDescribeCensOutput {
	s.AccountId = &v
	return s
}

// SetCenBandwidthPackageIds sets the CenBandwidthPackageIds field's value.
func (s *CenForDescribeCensOutput) SetCenBandwidthPackageIds(v []*string) *CenForDescribeCensOutput {
	s.CenBandwidthPackageIds = v
	return s
}

// SetCenId sets the CenId field's value.
func (s *CenForDescribeCensOutput) SetCenId(v string) *CenForDescribeCensOutput {
	s.CenId = &v
	return s
}

// SetCenName sets the CenName field's value.
func (s *CenForDescribeCensOutput) SetCenName(v string) *CenForDescribeCensOutput {
	s.CenName = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *CenForDescribeCensOutput) SetCreationTime(v string) *CenForDescribeCensOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CenForDescribeCensOutput) SetDescription(v string) *CenForDescribeCensOutput {
	s.Description = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CenForDescribeCensOutput) SetStatus(v string) *CenForDescribeCensOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *CenForDescribeCensOutput) SetUpdateTime(v string) *CenForDescribeCensOutput {
	s.UpdateTime = &v
	return s
}

type CenRouteEntryForDescribeCenRouteEntriesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	AsPath []*string `type:"list"`

	CenId *string `type:"string"`

	DestinationCidrBlock *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceRegionId *string `type:"string"`

	InstanceType *string `type:"string"`

	PublishStatus *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s CenRouteEntryForDescribeCenRouteEntriesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CenRouteEntryForDescribeCenRouteEntriesOutput) GoString() string {
	return s.String()
}

// SetAsPath sets the AsPath field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetAsPath(v []*string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.AsPath = v
	return s
}

// SetCenId sets the CenId field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetCenId(v string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.CenId = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetDestinationCidrBlock(v string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.DestinationCidrBlock = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetInstanceId(v string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetInstanceRegionId(v string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetInstanceType(v string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.InstanceType = &v
	return s
}

// SetPublishStatus sets the PublishStatus field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetPublishStatus(v string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.PublishStatus = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *CenRouteEntryForDescribeCenRouteEntriesOutput) SetStatus(v string) *CenRouteEntryForDescribeCenRouteEntriesOutput {
	s.Status = &v
	return s
}

type CenSupportedRegionForDescribeCenSupportedRegionsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	RegionId *string `type:"string"`
}

// String returns the string representation
func (s CenSupportedRegionForDescribeCenSupportedRegionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CenSupportedRegionForDescribeCenSupportedRegionsOutput) GoString() string {
	return s.String()
}

// SetRegionId sets the RegionId field's value.
func (s *CenSupportedRegionForDescribeCenSupportedRegionsOutput) SetRegionId(v string) *CenSupportedRegionForDescribeCenSupportedRegionsOutput {
	s.RegionId = &v
	return s
}

type CreateCenBandwidthPackageInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	Bandwidth *int64 `type:"integer"`

	BillingType *int64 `min:"1" max:"1" type:"integer"`

	CenBandwidthPackageName *string `min:"1" max:"128" type:"string"`

	CenId *string `type:"string"`

	Description *string `min:"1" max:"255" type:"string"`

	// LocalGeographicRegionSetId is a required field
	LocalGeographicRegionSetId *string `type:"string" required:"true"`

	// PeerGeographicRegionSetId is a required field
	PeerGeographicRegionSetId *string `type:"string" required:"true"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string" enum:"PeriodUnitForCreateCenBandwidthPackageInput"`

	RemainRenewTimes *int64 `type:"integer"`

	RenewPeriod *int64 `type:"integer"`

	RenewType *string `type:"string" enum:"RenewTypeForCreateCenBandwidthPackageInput"`
}

// String returns the string representation
func (s CreateCenBandwidthPackageInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateCenBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateCenBandwidthPackageInput"}
	if s.BillingType != nil && *s.BillingType < 1 {
		invalidParams.Add(request.NewErrParamMinValue("BillingType", 1))
	}
	if s.BillingType != nil && *s.BillingType > 1 {
		invalidParams.Add(request.NewErrParamMaxValue("BillingType", 1))
	}
	if s.CenBandwidthPackageName != nil && len(*s.CenBandwidthPackageName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("CenBandwidthPackageName", 1))
	}
	if s.CenBandwidthPackageName != nil && len(*s.CenBandwidthPackageName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("CenBandwidthPackageName", 128, *s.CenBandwidthPackageName))
	}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.LocalGeographicRegionSetId == nil {
		invalidParams.Add(request.NewErrParamRequired("LocalGeographicRegionSetId"))
	}
	if s.PeerGeographicRegionSetId == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerGeographicRegionSetId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *CreateCenBandwidthPackageInput) SetBandwidth(v int64) *CreateCenBandwidthPackageInput {
	s.Bandwidth = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *CreateCenBandwidthPackageInput) SetBillingType(v int64) *CreateCenBandwidthPackageInput {
	s.BillingType = &v
	return s
}

// SetCenBandwidthPackageName sets the CenBandwidthPackageName field's value.
func (s *CreateCenBandwidthPackageInput) SetCenBandwidthPackageName(v string) *CreateCenBandwidthPackageInput {
	s.CenBandwidthPackageName = &v
	return s
}

// SetCenId sets the CenId field's value.
func (s *CreateCenBandwidthPackageInput) SetCenId(v string) *CreateCenBandwidthPackageInput {
	s.CenId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateCenBandwidthPackageInput) SetDescription(v string) *CreateCenBandwidthPackageInput {
	s.Description = &v
	return s
}

// SetLocalGeographicRegionSetId sets the LocalGeographicRegionSetId field's value.
func (s *CreateCenBandwidthPackageInput) SetLocalGeographicRegionSetId(v string) *CreateCenBandwidthPackageInput {
	s.LocalGeographicRegionSetId = &v
	return s
}

// SetPeerGeographicRegionSetId sets the PeerGeographicRegionSetId field's value.
func (s *CreateCenBandwidthPackageInput) SetPeerGeographicRegionSetId(v string) *CreateCenBandwidthPackageInput {
	s.PeerGeographicRegionSetId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *CreateCenBandwidthPackageInput) SetPeriod(v int64) *CreateCenBandwidthPackageInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *CreateCenBandwidthPackageInput) SetPeriodUnit(v string) *CreateCenBandwidthPackageInput {
	s.PeriodUnit = &v
	return s
}

// SetRemainRenewTimes sets the RemainRenewTimes field's value.
func (s *CreateCenBandwidthPackageInput) SetRemainRenewTimes(v int64) *CreateCenBandwidthPackageInput {
	s.RemainRenewTimes = &v
	return s
}

// SetRenewPeriod sets the RenewPeriod field's value.
func (s *CreateCenBandwidthPackageInput) SetRenewPeriod(v int64) *CreateCenBandwidthPackageInput {
	s.RenewPeriod = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *CreateCenBandwidthPackageInput) SetRenewType(v string) *CreateCenBandwidthPackageInput {
	s.RenewType = &v
	return s
}

type CreateCenBandwidthPackageOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenBandwidthPackageId *string `type:"string"`

	PreOrderNumber *string `type:"string"`
}

// String returns the string representation
func (s CreateCenBandwidthPackageOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenBandwidthPackageOutput) GoString() string {
	return s.String()
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *CreateCenBandwidthPackageOutput) SetCenBandwidthPackageId(v string) *CreateCenBandwidthPackageOutput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetPreOrderNumber sets the PreOrderNumber field's value.
func (s *CreateCenBandwidthPackageOutput) SetPreOrderNumber(v string) *CreateCenBandwidthPackageOutput {
	s.PreOrderNumber = &v
	return s
}

type CreateCenInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenName *string `type:"string"`

	Description *string `type:"string"`
}

// String returns the string representation
func (s CreateCenInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenInput) GoString() string {
	return s.String()
}

// SetCenName sets the CenName field's value.
func (s *CreateCenInput) SetCenName(v string) *CreateCenInput {
	s.CenName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateCenInput) SetDescription(v string) *CreateCenInput {
	s.Description = &v
	return s
}

type CreateCenInterRegionBandwidthInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// Bandwidth is a required field
	Bandwidth *int64 `type:"integer" required:"true"`

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	// LocalRegionId is a required field
	LocalRegionId *string `type:"string" required:"true"`

	// PeerRegionId is a required field
	PeerRegionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateCenInterRegionBandwidthInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenInterRegionBandwidthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateCenInterRegionBandwidthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateCenInterRegionBandwidthInput"}
	if s.Bandwidth == nil {
		invalidParams.Add(request.NewErrParamRequired("Bandwidth"))
	}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.LocalRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("LocalRegionId"))
	}
	if s.PeerRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerRegionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *CreateCenInterRegionBandwidthInput) SetBandwidth(v int64) *CreateCenInterRegionBandwidthInput {
	s.Bandwidth = &v
	return s
}

// SetCenId sets the CenId field's value.
func (s *CreateCenInterRegionBandwidthInput) SetCenId(v string) *CreateCenInterRegionBandwidthInput {
	s.CenId = &v
	return s
}

// SetLocalRegionId sets the LocalRegionId field's value.
func (s *CreateCenInterRegionBandwidthInput) SetLocalRegionId(v string) *CreateCenInterRegionBandwidthInput {
	s.LocalRegionId = &v
	return s
}

// SetPeerRegionId sets the PeerRegionId field's value.
func (s *CreateCenInterRegionBandwidthInput) SetPeerRegionId(v string) *CreateCenInterRegionBandwidthInput {
	s.PeerRegionId = &v
	return s
}

type CreateCenInterRegionBandwidthOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	InterRegionBandwidthId *string `type:"string"`
}

// String returns the string representation
func (s CreateCenInterRegionBandwidthOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenInterRegionBandwidthOutput) GoString() string {
	return s.String()
}

// SetInterRegionBandwidthId sets the InterRegionBandwidthId field's value.
func (s *CreateCenInterRegionBandwidthOutput) SetInterRegionBandwidthId(v string) *CreateCenInterRegionBandwidthOutput {
	s.InterRegionBandwidthId = &v
	return s
}

type CreateCenOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenId *string `type:"string"`
}

// String returns the string representation
func (s CreateCenOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateCenOutput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *CreateCenOutput) SetCenId(v string) *CreateCenOutput {
	s.CenId = &v
	return s
}

type DeleteCenBandwidthPackageInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteCenBandwidthPackageInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCenBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteCenBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteCenBandwidthPackageInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *DeleteCenBandwidthPackageInput) SetCenBandwidthPackageId(v string) *DeleteCenBandwidthPackageInput {
	s.CenBandwidthPackageId = &v
	return s
}

type DeleteCenBandwidthPackageOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	PreOrderNumber *string `type:"string"`
}

// String returns the string representation
func (s DeleteCenBandwidthPackageOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCenBandwidthPackageOutput) GoString() string {
	return s.String()
}

// SetPreOrderNumber sets the PreOrderNumber field's value.
func (s *DeleteCenBandwidthPackageOutput) SetPreOrderNumber(v string) *DeleteCenBandwidthPackageOutput {
	s.PreOrderNumber = &v
	return s
}

type DeleteCenInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteCenInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCenInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteCenInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteCenInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *DeleteCenInput) SetCenId(v string) *DeleteCenInput {
	s.CenId = &v
	return s
}

type DeleteCenInterRegionBandwidthInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// InterRegionBandwidthId is a required field
	InterRegionBandwidthId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteCenInterRegionBandwidthInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCenInterRegionBandwidthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteCenInterRegionBandwidthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteCenInterRegionBandwidthInput"}
	if s.InterRegionBandwidthId == nil {
		invalidParams.Add(request.NewErrParamRequired("InterRegionBandwidthId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInterRegionBandwidthId sets the InterRegionBandwidthId field's value.
func (s *DeleteCenInterRegionBandwidthInput) SetInterRegionBandwidthId(v string) *DeleteCenInterRegionBandwidthInput {
	s.InterRegionBandwidthId = &v
	return s
}

type DeleteCenInterRegionBandwidthOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s DeleteCenInterRegionBandwidthOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCenInterRegionBandwidthOutput) GoString() string {
	return s.String()
}

type DeleteCenOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s DeleteCenOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCenOutput) GoString() string {
	return s.String()
}

type DescribeCenAttachedInstanceAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// InstanceRegionId is a required field
	InstanceRegionId *string `type:"string" required:"true"`

	// InstanceType is a required field
	InstanceType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeCenAttachedInstanceAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttachedInstanceAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCenAttachedInstanceAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCenAttachedInstanceAttributesInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.InstanceRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceRegionId"))
	}
	if s.InstanceType == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetCenId(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.CenId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetInstanceId(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetInstanceRegionId(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeCenAttachedInstanceAttributesInput) SetInstanceType(v string) *DescribeCenAttachedInstanceAttributesInput {
	s.InstanceType = &v
	return s
}

type DescribeCenAttachedInstanceAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenId *string `type:"string"`

	CreationTime *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceRegionId *string `type:"string"`

	InstanceType *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenAttachedInstanceAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttachedInstanceAttributesOutput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetCenId(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.CenId = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetCreationTime(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetInstanceId(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetInstanceRegionId(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetInstanceType(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.InstanceType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeCenAttachedInstanceAttributesOutput) SetStatus(v string) *DescribeCenAttachedInstanceAttributesOutput {
	s.Status = &v
	return s
}

type DescribeCenAttachedInstancesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenId *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceRegionId *string `type:"string"`

	InstanceType *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCenAttachedInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttachedInstancesInput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttachedInstancesInput) SetCenId(v string) *DescribeCenAttachedInstancesInput {
	s.CenId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeCenAttachedInstancesInput) SetInstanceId(v string) *DescribeCenAttachedInstancesInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *DescribeCenAttachedInstancesInput) SetInstanceRegionId(v string) *DescribeCenAttachedInstancesInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeCenAttachedInstancesInput) SetInstanceType(v string) *DescribeCenAttachedInstancesInput {
	s.InstanceType = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenAttachedInstancesInput) SetPageNumber(v int64) *DescribeCenAttachedInstancesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenAttachedInstancesInput) SetPageSize(v int64) *DescribeCenAttachedInstancesInput {
	s.PageSize = &v
	return s
}

type DescribeCenAttachedInstancesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	AttachedInstances []*AttachedInstanceForDescribeCenAttachedInstancesOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCenAttachedInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttachedInstancesOutput) GoString() string {
	return s.String()
}

// SetAttachedInstances sets the AttachedInstances field's value.
func (s *DescribeCenAttachedInstancesOutput) SetAttachedInstances(v []*AttachedInstanceForDescribeCenAttachedInstancesOutput) *DescribeCenAttachedInstancesOutput {
	s.AttachedInstances = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenAttachedInstancesOutput) SetPageNumber(v int64) *DescribeCenAttachedInstancesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenAttachedInstancesOutput) SetPageSize(v int64) *DescribeCenAttachedInstancesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCenAttachedInstancesOutput) SetTotalCount(v int64) *DescribeCenAttachedInstancesOutput {
	s.TotalCount = &v
	return s
}

type DescribeCenAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeCenAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCenAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCenAttributesInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttributesInput) SetCenId(v string) *DescribeCenAttributesInput {
	s.CenId = &v
	return s
}

type DescribeCenAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	AccountId *string `type:"string"`

	CenBandwidthPackageIds []*string `type:"list"`

	CenId *string `type:"string"`

	CenName *string `type:"string"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenAttributesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeCenAttributesOutput) SetAccountId(v string) *DescribeCenAttributesOutput {
	s.AccountId = &v
	return s
}

// SetCenBandwidthPackageIds sets the CenBandwidthPackageIds field's value.
func (s *DescribeCenAttributesOutput) SetCenBandwidthPackageIds(v []*string) *DescribeCenAttributesOutput {
	s.CenBandwidthPackageIds = v
	return s
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenAttributesOutput) SetCenId(v string) *DescribeCenAttributesOutput {
	s.CenId = &v
	return s
}

// SetCenName sets the CenName field's value.
func (s *DescribeCenAttributesOutput) SetCenName(v string) *DescribeCenAttributesOutput {
	s.CenName = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeCenAttributesOutput) SetCreationTime(v string) *DescribeCenAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeCenAttributesOutput) SetDescription(v string) *DescribeCenAttributesOutput {
	s.Description = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeCenAttributesOutput) SetStatus(v string) *DescribeCenAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeCenAttributesOutput) SetUpdateTime(v string) *DescribeCenAttributesOutput {
	s.UpdateTime = &v
	return s
}

type DescribeCenBandwidthPackageAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeCenBandwidthPackageAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenBandwidthPackageAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCenBandwidthPackageAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCenBandwidthPackageAttributesInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *DescribeCenBandwidthPackageAttributesInput) SetCenBandwidthPackageId(v string) *DescribeCenBandwidthPackageAttributesInput {
	s.CenBandwidthPackageId = &v
	return s
}

type DescribeCenBandwidthPackageAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	AccountId *string `type:"string"`

	Bandwidth *int64 `type:"integer"`

	BillingType *int64 `type:"integer"`

	BusinessStatus *string `type:"string"`

	CenBandwidthPackageId *string `type:"string"`

	CenBandwidthPackageName *string `type:"string"`

	CenIds []*string `type:"list"`

	CreationTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	ExpiredTime *string `type:"string"`

	LocalGeographicRegionSetId *string `type:"string"`

	PeerGeographicRegionSetId *string `type:"string"`

	RemainingBandwidth *int64 `type:"integer"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenBandwidthPackageAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenBandwidthPackageAttributesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetAccountId(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.AccountId = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetBandwidth(v int64) *DescribeCenBandwidthPackageAttributesOutput {
	s.Bandwidth = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetBillingType(v int64) *DescribeCenBandwidthPackageAttributesOutput {
	s.BillingType = &v
	return s
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetBusinessStatus(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.BusinessStatus = &v
	return s
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetCenBandwidthPackageId(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetCenBandwidthPackageName sets the CenBandwidthPackageName field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetCenBandwidthPackageName(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.CenBandwidthPackageName = &v
	return s
}

// SetCenIds sets the CenIds field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetCenIds(v []*string) *DescribeCenBandwidthPackageAttributesOutput {
	s.CenIds = v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetCreationTime(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetDeletedTime(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetDescription(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.Description = &v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetExpiredTime(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.ExpiredTime = &v
	return s
}

// SetLocalGeographicRegionSetId sets the LocalGeographicRegionSetId field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetLocalGeographicRegionSetId(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.LocalGeographicRegionSetId = &v
	return s
}

// SetPeerGeographicRegionSetId sets the PeerGeographicRegionSetId field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetPeerGeographicRegionSetId(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.PeerGeographicRegionSetId = &v
	return s
}

// SetRemainingBandwidth sets the RemainingBandwidth field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetRemainingBandwidth(v int64) *DescribeCenBandwidthPackageAttributesOutput {
	s.RemainingBandwidth = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetStatus(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeCenBandwidthPackageAttributesOutput) SetUpdateTime(v string) *DescribeCenBandwidthPackageAttributesOutput {
	s.UpdateTime = &v
	return s
}

type DescribeCenBandwidthPackagesBillingInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenBandwidthPackageIds is a required field
	CenBandwidthPackageIds []*string `type:"list" required:"true"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `max:"100" type:"integer"`
}

// String returns the string representation
func (s DescribeCenBandwidthPackagesBillingInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenBandwidthPackagesBillingInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCenBandwidthPackagesBillingInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCenBandwidthPackagesBillingInput"}
	if s.CenBandwidthPackageIds == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageIds"))
	}
	if s.PageSize != nil && *s.PageSize > 100 {
		invalidParams.Add(request.NewErrParamMaxValue("PageSize", 100))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageIds sets the CenBandwidthPackageIds field's value.
func (s *DescribeCenBandwidthPackagesBillingInput) SetCenBandwidthPackageIds(v []*string) *DescribeCenBandwidthPackagesBillingInput {
	s.CenBandwidthPackageIds = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenBandwidthPackagesBillingInput) SetPageNumber(v int64) *DescribeCenBandwidthPackagesBillingInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenBandwidthPackagesBillingInput) SetPageSize(v int64) *DescribeCenBandwidthPackagesBillingInput {
	s.PageSize = &v
	return s
}

type DescribeCenBandwidthPackagesBillingOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenBandwidthPackages []*CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCenBandwidthPackagesBillingOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenBandwidthPackagesBillingOutput) GoString() string {
	return s.String()
}

// SetCenBandwidthPackages sets the CenBandwidthPackages field's value.
func (s *DescribeCenBandwidthPackagesBillingOutput) SetCenBandwidthPackages(v []*CenBandwidthPackageForDescribeCenBandwidthPackagesBillingOutput) *DescribeCenBandwidthPackagesBillingOutput {
	s.CenBandwidthPackages = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenBandwidthPackagesBillingOutput) SetPageNumber(v int64) *DescribeCenBandwidthPackagesBillingOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenBandwidthPackagesBillingOutput) SetPageSize(v int64) *DescribeCenBandwidthPackagesBillingOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCenBandwidthPackagesBillingOutput) SetTotalCount(v int64) *DescribeCenBandwidthPackagesBillingOutput {
	s.TotalCount = &v
	return s
}

type DescribeCenBandwidthPackagesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenBandwidthPackageIds []*string `type:"list"`

	CenBandwidthPackageName *string `type:"string"`

	CenId *string `type:"string"`

	LocalGeographicRegionSetId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	PeerGeographicRegionSetId *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenBandwidthPackagesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenBandwidthPackagesInput) GoString() string {
	return s.String()
}

// SetCenBandwidthPackageIds sets the CenBandwidthPackageIds field's value.
func (s *DescribeCenBandwidthPackagesInput) SetCenBandwidthPackageIds(v []*string) *DescribeCenBandwidthPackagesInput {
	s.CenBandwidthPackageIds = v
	return s
}

// SetCenBandwidthPackageName sets the CenBandwidthPackageName field's value.
func (s *DescribeCenBandwidthPackagesInput) SetCenBandwidthPackageName(v string) *DescribeCenBandwidthPackagesInput {
	s.CenBandwidthPackageName = &v
	return s
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenBandwidthPackagesInput) SetCenId(v string) *DescribeCenBandwidthPackagesInput {
	s.CenId = &v
	return s
}

// SetLocalGeographicRegionSetId sets the LocalGeographicRegionSetId field's value.
func (s *DescribeCenBandwidthPackagesInput) SetLocalGeographicRegionSetId(v string) *DescribeCenBandwidthPackagesInput {
	s.LocalGeographicRegionSetId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenBandwidthPackagesInput) SetPageNumber(v int64) *DescribeCenBandwidthPackagesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenBandwidthPackagesInput) SetPageSize(v int64) *DescribeCenBandwidthPackagesInput {
	s.PageSize = &v
	return s
}

// SetPeerGeographicRegionSetId sets the PeerGeographicRegionSetId field's value.
func (s *DescribeCenBandwidthPackagesInput) SetPeerGeographicRegionSetId(v string) *DescribeCenBandwidthPackagesInput {
	s.PeerGeographicRegionSetId = &v
	return s
}

type DescribeCenBandwidthPackagesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenBandwidthPackages []*CenBandwidthPackageForDescribeCenBandwidthPackagesOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCenBandwidthPackagesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenBandwidthPackagesOutput) GoString() string {
	return s.String()
}

// SetCenBandwidthPackages sets the CenBandwidthPackages field's value.
func (s *DescribeCenBandwidthPackagesOutput) SetCenBandwidthPackages(v []*CenBandwidthPackageForDescribeCenBandwidthPackagesOutput) *DescribeCenBandwidthPackagesOutput {
	s.CenBandwidthPackages = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenBandwidthPackagesOutput) SetPageNumber(v int64) *DescribeCenBandwidthPackagesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenBandwidthPackagesOutput) SetPageSize(v int64) *DescribeCenBandwidthPackagesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCenBandwidthPackagesOutput) SetTotalCount(v int64) *DescribeCenBandwidthPackagesOutput {
	s.TotalCount = &v
	return s
}

type DescribeCenInterRegionBandwidthAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// InterRegionBandwidthId is a required field
	InterRegionBandwidthId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeCenInterRegionBandwidthAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenInterRegionBandwidthAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeCenInterRegionBandwidthAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeCenInterRegionBandwidthAttributesInput"}
	if s.InterRegionBandwidthId == nil {
		invalidParams.Add(request.NewErrParamRequired("InterRegionBandwidthId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInterRegionBandwidthId sets the InterRegionBandwidthId field's value.
func (s *DescribeCenInterRegionBandwidthAttributesInput) SetInterRegionBandwidthId(v string) *DescribeCenInterRegionBandwidthAttributesInput {
	s.InterRegionBandwidthId = &v
	return s
}

type DescribeCenInterRegionBandwidthAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	Bandwidth *int64 `type:"integer"`

	CenId *string `type:"string"`

	CreationTime *string `type:"string"`

	InterRegionBandwidthId *string `type:"string"`

	LocalRegionId *string `type:"string"`

	PeerRegionId *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenInterRegionBandwidthAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenInterRegionBandwidthAttributesOutput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetBandwidth(v int64) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.Bandwidth = &v
	return s
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetCenId(v string) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.CenId = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetCreationTime(v string) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetInterRegionBandwidthId sets the InterRegionBandwidthId field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetInterRegionBandwidthId(v string) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.InterRegionBandwidthId = &v
	return s
}

// SetLocalRegionId sets the LocalRegionId field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetLocalRegionId(v string) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.LocalRegionId = &v
	return s
}

// SetPeerRegionId sets the PeerRegionId field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetPeerRegionId(v string) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.PeerRegionId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetStatus(v string) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeCenInterRegionBandwidthAttributesOutput) SetUpdateTime(v string) *DescribeCenInterRegionBandwidthAttributesOutput {
	s.UpdateTime = &v
	return s
}

type DescribeCenInterRegionBandwidthsInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenId *string `type:"string"`

	InterRegionBandwidthIds []*string `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenInterRegionBandwidthsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenInterRegionBandwidthsInput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenInterRegionBandwidthsInput) SetCenId(v string) *DescribeCenInterRegionBandwidthsInput {
	s.CenId = &v
	return s
}

// SetInterRegionBandwidthIds sets the InterRegionBandwidthIds field's value.
func (s *DescribeCenInterRegionBandwidthsInput) SetInterRegionBandwidthIds(v []*string) *DescribeCenInterRegionBandwidthsInput {
	s.InterRegionBandwidthIds = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenInterRegionBandwidthsInput) SetPageNumber(v int64) *DescribeCenInterRegionBandwidthsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenInterRegionBandwidthsInput) SetPageSize(v string) *DescribeCenInterRegionBandwidthsInput {
	s.PageSize = &v
	return s
}

type DescribeCenInterRegionBandwidthsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	InterRegionBandwidths []*InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCenInterRegionBandwidthsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenInterRegionBandwidthsOutput) GoString() string {
	return s.String()
}

// SetInterRegionBandwidths sets the InterRegionBandwidths field's value.
func (s *DescribeCenInterRegionBandwidthsOutput) SetInterRegionBandwidths(v []*InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) *DescribeCenInterRegionBandwidthsOutput {
	s.InterRegionBandwidths = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenInterRegionBandwidthsOutput) SetPageNumber(v int64) *DescribeCenInterRegionBandwidthsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenInterRegionBandwidthsOutput) SetPageSize(v int64) *DescribeCenInterRegionBandwidthsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCenInterRegionBandwidthsOutput) SetTotalCount(v int64) *DescribeCenInterRegionBandwidthsOutput {
	s.TotalCount = &v
	return s
}

type DescribeCenRouteEntriesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenId *string `type:"string"`

	DestinationCidrBlock *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceRegionId *string `type:"string"`

	InstanceType *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenRouteEntriesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenRouteEntriesInput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *DescribeCenRouteEntriesInput) SetCenId(v string) *DescribeCenRouteEntriesInput {
	s.CenId = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *DescribeCenRouteEntriesInput) SetDestinationCidrBlock(v string) *DescribeCenRouteEntriesInput {
	s.DestinationCidrBlock = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeCenRouteEntriesInput) SetInstanceId(v string) *DescribeCenRouteEntriesInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *DescribeCenRouteEntriesInput) SetInstanceRegionId(v string) *DescribeCenRouteEntriesInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeCenRouteEntriesInput) SetInstanceType(v string) *DescribeCenRouteEntriesInput {
	s.InstanceType = &v
	return s
}

type DescribeCenRouteEntriesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenRouteEntries []*CenRouteEntryForDescribeCenRouteEntriesOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCenRouteEntriesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenRouteEntriesOutput) GoString() string {
	return s.String()
}

// SetCenRouteEntries sets the CenRouteEntries field's value.
func (s *DescribeCenRouteEntriesOutput) SetCenRouteEntries(v []*CenRouteEntryForDescribeCenRouteEntriesOutput) *DescribeCenRouteEntriesOutput {
	s.CenRouteEntries = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenRouteEntriesOutput) SetPageNumber(v int64) *DescribeCenRouteEntriesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenRouteEntriesOutput) SetPageSize(v int64) *DescribeCenRouteEntriesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCenRouteEntriesOutput) SetTotalCount(v int64) *DescribeCenRouteEntriesOutput {
	s.TotalCount = &v
	return s
}

type DescribeCenSupportedRegionsInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RegionId *string `type:"string"`
}

// String returns the string representation
func (s DescribeCenSupportedRegionsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenSupportedRegionsInput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenSupportedRegionsInput) SetPageNumber(v int64) *DescribeCenSupportedRegionsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenSupportedRegionsInput) SetPageSize(v int64) *DescribeCenSupportedRegionsInput {
	s.PageSize = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *DescribeCenSupportedRegionsInput) SetRegionId(v string) *DescribeCenSupportedRegionsInput {
	s.RegionId = &v
	return s
}

type DescribeCenSupportedRegionsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenSupportedRegions []*CenSupportedRegionForDescribeCenSupportedRegionsOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCenSupportedRegionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCenSupportedRegionsOutput) GoString() string {
	return s.String()
}

// SetCenSupportedRegions sets the CenSupportedRegions field's value.
func (s *DescribeCenSupportedRegionsOutput) SetCenSupportedRegions(v []*CenSupportedRegionForDescribeCenSupportedRegionsOutput) *DescribeCenSupportedRegionsOutput {
	s.CenSupportedRegions = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCenSupportedRegionsOutput) SetPageNumber(v int64) *DescribeCenSupportedRegionsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCenSupportedRegionsOutput) SetPageSize(v int64) *DescribeCenSupportedRegionsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCenSupportedRegionsOutput) SetTotalCount(v int64) *DescribeCenSupportedRegionsOutput {
	s.TotalCount = &v
	return s
}

type DescribeCensInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	CenIds *string `type:"string"`

	CenName *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCensInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCensInput) GoString() string {
	return s.String()
}

// SetCenIds sets the CenIds field's value.
func (s *DescribeCensInput) SetCenIds(v string) *DescribeCensInput {
	s.CenIds = &v
	return s
}

// SetCenName sets the CenName field's value.
func (s *DescribeCensInput) SetCenName(v string) *DescribeCensInput {
	s.CenName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCensInput) SetPageNumber(v int64) *DescribeCensInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCensInput) SetPageSize(v int64) *DescribeCensInput {
	s.PageSize = &v
	return s
}

type DescribeCensOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	Cens []*CenForDescribeCensOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCensOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCensOutput) GoString() string {
	return s.String()
}

// SetCens sets the Cens field's value.
func (s *DescribeCensOutput) SetCens(v []*CenForDescribeCensOutput) *DescribeCensOutput {
	s.Cens = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCensOutput) SetPageNumber(v int64) *DescribeCensOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCensOutput) SetPageSize(v int64) *DescribeCensOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCensOutput) SetTotalCount(v int64) *DescribeCensOutput {
	s.TotalCount = &v
	return s
}

type DetachInstanceFromCenInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// InstanceRegionId is a required field
	InstanceRegionId *string `type:"string" required:"true"`

	// InstanceType is a required field
	InstanceType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DetachInstanceFromCenInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachInstanceFromCenInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DetachInstanceFromCenInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DetachInstanceFromCenInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.InstanceRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceRegionId"))
	}
	if s.InstanceType == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *DetachInstanceFromCenInput) SetCenId(v string) *DetachInstanceFromCenInput {
	s.CenId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DetachInstanceFromCenInput) SetInstanceId(v string) *DetachInstanceFromCenInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *DetachInstanceFromCenInput) SetInstanceRegionId(v string) *DetachInstanceFromCenInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DetachInstanceFromCenInput) SetInstanceType(v string) *DetachInstanceFromCenInput {
	s.InstanceType = &v
	return s
}

type DetachInstanceFromCenOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s DetachInstanceFromCenOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachInstanceFromCenOutput) GoString() string {
	return s.String()
}

type DisassociateCenBandwidthPackageInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`

	// CenId is a required field
	CenId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisassociateCenBandwidthPackageInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DisassociateCenBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisassociateCenBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisassociateCenBandwidthPackageInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *DisassociateCenBandwidthPackageInput) SetCenBandwidthPackageId(v string) *DisassociateCenBandwidthPackageInput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetCenId sets the CenId field's value.
func (s *DisassociateCenBandwidthPackageInput) SetCenId(v string) *DisassociateCenBandwidthPackageInput {
	s.CenId = &v
	return s
}

type DisassociateCenBandwidthPackageOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s DisassociateCenBandwidthPackageOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DisassociateCenBandwidthPackageOutput) GoString() string {
	return s.String()
}

type InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	Bandwidth *int64 `type:"integer"`

	CenId *string `type:"string"`

	CreationTime *string `type:"string"`

	InterRegionBandwidthId *string `type:"string"`

	LocalRegionId *string `type:"string"`

	PeerRegionId *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetBandwidth(v int64) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.Bandwidth = &v
	return s
}

// SetCenId sets the CenId field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetCenId(v string) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.CenId = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetCreationTime(v string) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.CreationTime = &v
	return s
}

// SetInterRegionBandwidthId sets the InterRegionBandwidthId field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetInterRegionBandwidthId(v string) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.InterRegionBandwidthId = &v
	return s
}

// SetLocalRegionId sets the LocalRegionId field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetLocalRegionId(v string) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.LocalRegionId = &v
	return s
}

// SetPeerRegionId sets the PeerRegionId field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetPeerRegionId(v string) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.PeerRegionId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetStatus(v string) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput) SetUpdateTime(v string) *InterRegionBandwidthForDescribeCenInterRegionBandwidthsOutput {
	s.UpdateTime = &v
	return s
}

type ModifyCenAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	CenName *string `type:"string"`

	Description *string `type:"string"`
}

// String returns the string representation
func (s ModifyCenAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCenAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyCenAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyCenAttributesInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *ModifyCenAttributesInput) SetCenId(v string) *ModifyCenAttributesInput {
	s.CenId = &v
	return s
}

// SetCenName sets the CenName field's value.
func (s *ModifyCenAttributesInput) SetCenName(v string) *ModifyCenAttributesInput {
	s.CenName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyCenAttributesInput) SetDescription(v string) *ModifyCenAttributesInput {
	s.Description = &v
	return s
}

type ModifyCenAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s ModifyCenAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCenAttributesOutput) GoString() string {
	return s.String()
}

type ModifyCenBandwidthPackageAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	Bandwidth *int64 `type:"integer"`

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`

	CenBandwidthPackageName *string `min:"1" max:"128" type:"string"`

	Description *string `min:"1" max:"255" type:"string"`
}

// String returns the string representation
func (s ModifyCenBandwidthPackageAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCenBandwidthPackageAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyCenBandwidthPackageAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyCenBandwidthPackageAttributesInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}
	if s.CenBandwidthPackageName != nil && len(*s.CenBandwidthPackageName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("CenBandwidthPackageName", 1))
	}
	if s.CenBandwidthPackageName != nil && len(*s.CenBandwidthPackageName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("CenBandwidthPackageName", 128, *s.CenBandwidthPackageName))
	}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *ModifyCenBandwidthPackageAttributesInput) SetBandwidth(v int64) *ModifyCenBandwidthPackageAttributesInput {
	s.Bandwidth = &v
	return s
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *ModifyCenBandwidthPackageAttributesInput) SetCenBandwidthPackageId(v string) *ModifyCenBandwidthPackageAttributesInput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetCenBandwidthPackageName sets the CenBandwidthPackageName field's value.
func (s *ModifyCenBandwidthPackageAttributesInput) SetCenBandwidthPackageName(v string) *ModifyCenBandwidthPackageAttributesInput {
	s.CenBandwidthPackageName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyCenBandwidthPackageAttributesInput) SetDescription(v string) *ModifyCenBandwidthPackageAttributesInput {
	s.Description = &v
	return s
}

type ModifyCenBandwidthPackageAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	PreOrderNumber *string `type:"string"`
}

// String returns the string representation
func (s ModifyCenBandwidthPackageAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCenBandwidthPackageAttributesOutput) GoString() string {
	return s.String()
}

// SetPreOrderNumber sets the PreOrderNumber field's value.
func (s *ModifyCenBandwidthPackageAttributesOutput) SetPreOrderNumber(v string) *ModifyCenBandwidthPackageAttributesOutput {
	s.PreOrderNumber = &v
	return s
}

type ModifyCenInterRegionBandwidthAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	Bandwidth *int64 `type:"integer"`

	// InterRegionBandwidthId is a required field
	InterRegionBandwidthId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ModifyCenInterRegionBandwidthAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCenInterRegionBandwidthAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyCenInterRegionBandwidthAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyCenInterRegionBandwidthAttributesInput"}
	if s.InterRegionBandwidthId == nil {
		invalidParams.Add(request.NewErrParamRequired("InterRegionBandwidthId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *ModifyCenInterRegionBandwidthAttributesInput) SetBandwidth(v int64) *ModifyCenInterRegionBandwidthAttributesInput {
	s.Bandwidth = &v
	return s
}

// SetInterRegionBandwidthId sets the InterRegionBandwidthId field's value.
func (s *ModifyCenInterRegionBandwidthAttributesInput) SetInterRegionBandwidthId(v string) *ModifyCenInterRegionBandwidthAttributesInput {
	s.InterRegionBandwidthId = &v
	return s
}

type ModifyCenInterRegionBandwidthAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s ModifyCenInterRegionBandwidthAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyCenInterRegionBandwidthAttributesOutput) GoString() string {
	return s.String()
}

type PublishCenRouteEntryInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	// DestinationCidrBlock is a required field
	DestinationCidrBlock *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// InstanceRegionId is a required field
	InstanceRegionId *string `type:"string" required:"true"`

	// InstanceType is a required field
	InstanceType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s PublishCenRouteEntryInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s PublishCenRouteEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PublishCenRouteEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PublishCenRouteEntryInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.DestinationCidrBlock == nil {
		invalidParams.Add(request.NewErrParamRequired("DestinationCidrBlock"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.InstanceRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceRegionId"))
	}
	if s.InstanceType == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *PublishCenRouteEntryInput) SetCenId(v string) *PublishCenRouteEntryInput {
	s.CenId = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *PublishCenRouteEntryInput) SetDestinationCidrBlock(v string) *PublishCenRouteEntryInput {
	s.DestinationCidrBlock = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *PublishCenRouteEntryInput) SetInstanceId(v string) *PublishCenRouteEntryInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *PublishCenRouteEntryInput) SetInstanceRegionId(v string) *PublishCenRouteEntryInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *PublishCenRouteEntryInput) SetInstanceType(v string) *PublishCenRouteEntryInput {
	s.InstanceType = &v
	return s
}

type PublishCenRouteEntryOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s PublishCenRouteEntryOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s PublishCenRouteEntryOutput) GoString() string {
	return s.String()
}

type RenewCenBandwidthPackageInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string" enum:"PeriodUnitForRenewCenBandwidthPackageInput"`
}

// String returns the string representation
func (s RenewCenBandwidthPackageInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewCenBandwidthPackageInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewCenBandwidthPackageInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewCenBandwidthPackageInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *RenewCenBandwidthPackageInput) SetCenBandwidthPackageId(v string) *RenewCenBandwidthPackageInput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RenewCenBandwidthPackageInput) SetPeriod(v int64) *RenewCenBandwidthPackageInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewCenBandwidthPackageInput) SetPeriodUnit(v string) *RenewCenBandwidthPackageInput {
	s.PeriodUnit = &v
	return s
}

type RenewCenBandwidthPackageOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s RenewCenBandwidthPackageOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewCenBandwidthPackageOutput) GoString() string {
	return s.String()
}

type SetCenBandwidthPackageRenewalInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenBandwidthPackageId is a required field
	CenBandwidthPackageId *string `type:"string" required:"true"`

	RemainRenewTimes *int64 `type:"integer"`

	RenewPeriod *int64 `type:"integer"`

	// RenewType is a required field
	RenewType *string `type:"string" required:"true" enum:"RenewTypeForSetCenBandwidthPackageRenewalInput"`
}

// String returns the string representation
func (s SetCenBandwidthPackageRenewalInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s SetCenBandwidthPackageRenewalInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetCenBandwidthPackageRenewalInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SetCenBandwidthPackageRenewalInput"}
	if s.CenBandwidthPackageId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenBandwidthPackageId"))
	}
	if s.RenewType == nil {
		invalidParams.Add(request.NewErrParamRequired("RenewType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenBandwidthPackageId sets the CenBandwidthPackageId field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetCenBandwidthPackageId(v string) *SetCenBandwidthPackageRenewalInput {
	s.CenBandwidthPackageId = &v
	return s
}

// SetRemainRenewTimes sets the RemainRenewTimes field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetRemainRenewTimes(v int64) *SetCenBandwidthPackageRenewalInput {
	s.RemainRenewTimes = &v
	return s
}

// SetRenewPeriod sets the RenewPeriod field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetRenewPeriod(v int64) *SetCenBandwidthPackageRenewalInput {
	s.RenewPeriod = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *SetCenBandwidthPackageRenewalInput) SetRenewType(v string) *SetCenBandwidthPackageRenewalInput {
	s.RenewType = &v
	return s
}

type SetCenBandwidthPackageRenewalOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s SetCenBandwidthPackageRenewalOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s SetCenBandwidthPackageRenewalOutput) GoString() string {
	return s.String()
}

type WithdrawCenRouteEntryInput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata

	// CenId is a required field
	CenId *string `type:"string" required:"true"`

	// DestinationCidrBlock is a required field
	DestinationCidrBlock *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// InstanceRegionId is a required field
	InstanceRegionId *string `type:"string" required:"true"`

	// InstanceType is a required field
	InstanceType *string `type:"string" required:"true"`
}

// String returns the string representation
func (s WithdrawCenRouteEntryInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s WithdrawCenRouteEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *WithdrawCenRouteEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "WithdrawCenRouteEntryInput"}
	if s.CenId == nil {
		invalidParams.Add(request.NewErrParamRequired("CenId"))
	}
	if s.DestinationCidrBlock == nil {
		invalidParams.Add(request.NewErrParamRequired("DestinationCidrBlock"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.InstanceRegionId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceRegionId"))
	}
	if s.InstanceType == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCenId sets the CenId field's value.
func (s *WithdrawCenRouteEntryInput) SetCenId(v string) *WithdrawCenRouteEntryInput {
	s.CenId = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *WithdrawCenRouteEntryInput) SetDestinationCidrBlock(v string) *WithdrawCenRouteEntryInput {
	s.DestinationCidrBlock = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *WithdrawCenRouteEntryInput) SetInstanceId(v string) *WithdrawCenRouteEntryInput {
	s.InstanceId = &v
	return s
}

// SetInstanceRegionId sets the InstanceRegionId field's value.
func (s *WithdrawCenRouteEntryInput) SetInstanceRegionId(v string) *WithdrawCenRouteEntryInput {
	s.InstanceRegionId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *WithdrawCenRouteEntryInput) SetInstanceType(v string) *WithdrawCenRouteEntryInput {
	s.InstanceType = &v
	return s
}

type WithdrawCenRouteEntryOutput struct {
	_        struct{} `type:"structure"`
	Metadata *volcstackquery.ResponseMetadata
}

// String returns the string representation
func (s WithdrawCenRouteEntryOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s WithdrawCenRouteEntryOutput) GoString() string {
	return s.String()
}

const (
	// PeriodUnitForCreateCenBandwidthPackageInputMoth is a PeriodUnitForCreateCenBandwidthPackageInput enum value
	PeriodUnitForCreateCenBandwidthPackageInputMoth = "Moth"

	// PeriodUnitForCreateCenBandwidthPackageInputYear is a PeriodUnitForCreateCenBandwidthPackageInput enum value
	PeriodUnitForCreateCenBandwidthPackageInputYear = "Year"
)

const (
	// PeriodUnitForRenewCenBandwidthPackageInputMonth is a PeriodUnitForRenewCenBandwidthPackageInput enum value
	PeriodUnitForRenewCenBandwidthPackageInputMonth = "Month"

	// PeriodUnitForRenewCenBandwidthPackageInputYear is a PeriodUnitForRenewCenBandwidthPackageInput enum value
	PeriodUnitForRenewCenBandwidthPackageInputYear = "Year"
)

const (
	// RenewTypeForCreateCenBandwidthPackageInputManual is a RenewTypeForCreateCenBandwidthPackageInput enum value
	RenewTypeForCreateCenBandwidthPackageInputManual = "Manual"

	// RenewTypeForCreateCenBandwidthPackageInputAuto is a RenewTypeForCreateCenBandwidthPackageInput enum value
	RenewTypeForCreateCenBandwidthPackageInputAuto = "Auto"

	// RenewTypeForCreateCenBandwidthPackageInputNoRenew is a RenewTypeForCreateCenBandwidthPackageInput enum value
	RenewTypeForCreateCenBandwidthPackageInputNoRenew = "NoRenew"
)

const (
	// RenewTypeForSetCenBandwidthPackageRenewalInputManual is a RenewTypeForSetCenBandwidthPackageRenewalInput enum value
	RenewTypeForSetCenBandwidthPackageRenewalInputManual = "Manual"

	// RenewTypeForSetCenBandwidthPackageRenewalInputAuto is a RenewTypeForSetCenBandwidthPackageRenewalInput enum value
	RenewTypeForSetCenBandwidthPackageRenewalInputAuto = "Auto"

	// RenewTypeForSetCenBandwidthPackageRenewalInputNoRenew is a RenewTypeForSetCenBandwidthPackageRenewalInput enum value
	RenewTypeForSetCenBandwidthPackageRenewalInputNoRenew = "NoRenew"
)

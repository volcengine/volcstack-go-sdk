// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/volcengine/volcstack-go-sdk/private/protocol"
	"github.com/volcengine/volcstack-go-sdk/private/protocol/volcstackquery"
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opCreateBackupCommon = "CreateBackup"

// CreateBackupCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateBackupCommon operation. The "output" return
// value will be populated with the CreateBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupCommon Send returns without error.
//
// See CreateBackupCommon for more information on using the CreateBackupCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupCommonRequest method.
//    req, resp := client.CreateBackupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateBackupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateBackupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBackupCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateBackupCommon for usage and error information.
func (c *RDSMYSQLV2) CreateBackupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateBackupCommonRequest(input)
	return out, req.Send()
}

// CreateBackupCommonWithContext is the same as CreateBackupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateBackupCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateBackupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBackup = "CreateBackup"

// CreateBackupRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateBackup operation. The "output" return
// value will be populated with the CreateBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupCommon Send returns without error.
//
// See CreateBackup for more information on using the CreateBackup
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupRequest method.
//    req, resp := client.CreateBackupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateBackupRequest(input *CreateBackupInput) (req *request.Request, output *CreateBackupOutput) {
	op := &request.Operation{
		Name:       opCreateBackup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateBackupInput{}
	}

	output = &CreateBackupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBackup API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateBackup for usage and error information.
func (c *RDSMYSQLV2) CreateBackup(input *CreateBackupInput) (*CreateBackupOutput, error) {
	req, out := c.CreateBackupRequest(input)
	return out, req.Send()
}

// CreateBackupWithContext is the same as CreateBackup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateBackupWithContext(ctx volcstack.Context, input *CreateBackupInput, opts ...request.Option) (*CreateBackupOutput, error) {
	req, out := c.CreateBackupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBAccountCommon = "CreateDBAccount"

// CreateDBAccountCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBAccountCommon operation. The "output" return
// value will be populated with the CreateDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBAccountCommon Send returns without error.
//
// See CreateDBAccountCommon for more information on using the CreateDBAccountCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBAccountCommonRequest method.
//    req, resp := client.CreateDBAccountCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBAccountCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBAccountCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBAccountCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateDBAccountCommon for usage and error information.
func (c *RDSMYSQLV2) CreateDBAccountCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBAccountCommonRequest(input)
	return out, req.Send()
}

// CreateDBAccountCommonWithContext is the same as CreateDBAccountCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBAccountCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBAccountCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBAccountCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBAccount = "CreateDBAccount"

// CreateDBAccountRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBAccount operation. The "output" return
// value will be populated with the CreateDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBAccountCommon Send returns without error.
//
// See CreateDBAccount for more information on using the CreateDBAccount
// API call, and error handling.
//
//    // Example sending a request using the CreateDBAccountRequest method.
//    req, resp := client.CreateDBAccountRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBAccountRequest(input *CreateDBAccountInput) (req *request.Request, output *CreateDBAccountOutput) {
	op := &request.Operation{
		Name:       opCreateDBAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBAccountInput{}
	}

	output = &CreateDBAccountOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// CreateDBAccount API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateDBAccount for usage and error information.
func (c *RDSMYSQLV2) CreateDBAccount(input *CreateDBAccountInput) (*CreateDBAccountOutput, error) {
	req, out := c.CreateDBAccountRequest(input)
	return out, req.Send()
}

// CreateDBAccountWithContext is the same as CreateDBAccount with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBAccount for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBAccountWithContext(ctx volcstack.Context, input *CreateDBAccountInput, opts ...request.Option) (*CreateDBAccountOutput, error) {
	req, out := c.CreateDBAccountRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstanceCommon = "CreateDBInstance"

// CreateDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBInstanceCommon operation. The "output" return
// value will be populated with the CreateDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceCommon Send returns without error.
//
// See CreateDBInstanceCommon for more information on using the CreateDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceCommonRequest method.
//    req, resp := client.CreateDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBInstanceCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateDBInstanceCommon for usage and error information.
func (c *RDSMYSQLV2) CreateDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceCommonRequest(input)
	return out, req.Send()
}

// CreateDBInstanceCommonWithContext is the same as CreateDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstance = "CreateDBInstance"

// CreateDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDBInstance operation. The "output" return
// value will be populated with the CreateDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBInstanceCommon Send returns without error.
//
// See CreateDBInstance for more information on using the CreateDBInstance
// API call, and error handling.
//
//    // Example sending a request using the CreateDBInstanceRequest method.
//    req, resp := client.CreateDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBInstanceRequest(input *CreateDBInstanceInput) (req *request.Request, output *CreateDBInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBInstanceInput{}
	}

	output = &CreateDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBInstance API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateDBInstance for usage and error information.
func (c *RDSMYSQLV2) CreateDBInstance(input *CreateDBInstanceInput) (*CreateDBInstanceOutput, error) {
	req, out := c.CreateDBInstanceRequest(input)
	return out, req.Send()
}

// CreateDBInstanceWithContext is the same as CreateDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBInstanceWithContext(ctx volcstack.Context, input *CreateDBInstanceInput, opts ...request.Option) (*CreateDBInstanceOutput, error) {
	req, out := c.CreateDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDatabaseCommon = "CreateDatabase"

// CreateDatabaseCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDatabaseCommon operation. The "output" return
// value will be populated with the CreateDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDatabaseCommon Send returns without error.
//
// See CreateDatabaseCommon for more information on using the CreateDatabaseCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDatabaseCommonRequest method.
//    req, resp := client.CreateDatabaseCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDatabaseCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDatabaseCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDatabaseCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateDatabaseCommon for usage and error information.
func (c *RDSMYSQLV2) CreateDatabaseCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDatabaseCommonRequest(input)
	return out, req.Send()
}

// CreateDatabaseCommonWithContext is the same as CreateDatabaseCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDatabaseCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDatabaseCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDatabaseCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDatabase = "CreateDatabase"

// CreateDatabaseRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDatabase operation. The "output" return
// value will be populated with the CreateDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDatabaseCommon Send returns without error.
//
// See CreateDatabase for more information on using the CreateDatabase
// API call, and error handling.
//
//    // Example sending a request using the CreateDatabaseRequest method.
//    req, resp := client.CreateDatabaseRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDatabaseRequest(input *CreateDatabaseInput) (req *request.Request, output *CreateDatabaseOutput) {
	op := &request.Operation{
		Name:       opCreateDatabase,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDatabaseInput{}
	}

	output = &CreateDatabaseOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// CreateDatabase API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation CreateDatabase for usage and error information.
func (c *RDSMYSQLV2) CreateDatabase(input *CreateDatabaseInput) (*CreateDatabaseOutput, error) {
	req, out := c.CreateDatabaseRequest(input)
	return out, req.Send()
}

// CreateDatabaseWithContext is the same as CreateDatabase with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDatabase for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDatabaseWithContext(ctx volcstack.Context, input *CreateDatabaseInput, opts ...request.Option) (*CreateDatabaseOutput, error) {
	req, out := c.CreateDatabaseRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteBackupCommon = "DeleteBackup"

// DeleteBackupCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteBackupCommon operation. The "output" return
// value will be populated with the DeleteBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteBackupCommon Send returns without error.
//
// See DeleteBackupCommon for more information on using the DeleteBackupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteBackupCommonRequest method.
//    req, resp := client.DeleteBackupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteBackupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteBackupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteBackupCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteBackupCommon for usage and error information.
func (c *RDSMYSQLV2) DeleteBackupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteBackupCommonRequest(input)
	return out, req.Send()
}

// DeleteBackupCommonWithContext is the same as DeleteBackupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteBackupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteBackupCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteBackupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteBackup = "DeleteBackup"

// DeleteBackupRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteBackup operation. The "output" return
// value will be populated with the DeleteBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteBackupCommon Send returns without error.
//
// See DeleteBackup for more information on using the DeleteBackup
// API call, and error handling.
//
//    // Example sending a request using the DeleteBackupRequest method.
//    req, resp := client.DeleteBackupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteBackupRequest(input *DeleteBackupInput) (req *request.Request, output *DeleteBackupOutput) {
	op := &request.Operation{
		Name:       opDeleteBackup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteBackupInput{}
	}

	output = &DeleteBackupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteBackup API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteBackup for usage and error information.
func (c *RDSMYSQLV2) DeleteBackup(input *DeleteBackupInput) (*DeleteBackupOutput, error) {
	req, out := c.DeleteBackupRequest(input)
	return out, req.Send()
}

// DeleteBackupWithContext is the same as DeleteBackup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteBackup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteBackupWithContext(ctx volcstack.Context, input *DeleteBackupInput, opts ...request.Option) (*DeleteBackupOutput, error) {
	req, out := c.DeleteBackupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBAccountCommon = "DeleteDBAccount"

// DeleteDBAccountCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBAccountCommon operation. The "output" return
// value will be populated with the DeleteDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBAccountCommon Send returns without error.
//
// See DeleteDBAccountCommon for more information on using the DeleteDBAccountCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBAccountCommonRequest method.
//    req, resp := client.DeleteDBAccountCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteDBAccountCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDBAccountCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDBAccountCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteDBAccountCommon for usage and error information.
func (c *RDSMYSQLV2) DeleteDBAccountCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDBAccountCommonRequest(input)
	return out, req.Send()
}

// DeleteDBAccountCommonWithContext is the same as DeleteDBAccountCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBAccountCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteDBAccountCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDBAccountCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBAccount = "DeleteDBAccount"

// DeleteDBAccountRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBAccount operation. The "output" return
// value will be populated with the DeleteDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBAccountCommon Send returns without error.
//
// See DeleteDBAccount for more information on using the DeleteDBAccount
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBAccountRequest method.
//    req, resp := client.DeleteDBAccountRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteDBAccountRequest(input *DeleteDBAccountInput) (req *request.Request, output *DeleteDBAccountOutput) {
	op := &request.Operation{
		Name:       opDeleteDBAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBAccountInput{}
	}

	output = &DeleteDBAccountOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDBAccount API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteDBAccount for usage and error information.
func (c *RDSMYSQLV2) DeleteDBAccount(input *DeleteDBAccountInput) (*DeleteDBAccountOutput, error) {
	req, out := c.DeleteDBAccountRequest(input)
	return out, req.Send()
}

// DeleteDBAccountWithContext is the same as DeleteDBAccount with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBAccount for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteDBAccountWithContext(ctx volcstack.Context, input *DeleteDBAccountInput, opts ...request.Option) (*DeleteDBAccountOutput, error) {
	req, out := c.DeleteDBAccountRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBInstanceCommon = "DeleteDBInstance"

// DeleteDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBInstanceCommon operation. The "output" return
// value will be populated with the DeleteDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBInstanceCommon Send returns without error.
//
// See DeleteDBInstanceCommon for more information on using the DeleteDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBInstanceCommonRequest method.
//    req, resp := client.DeleteDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDBInstanceCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteDBInstanceCommon for usage and error information.
func (c *RDSMYSQLV2) DeleteDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDBInstanceCommonRequest(input)
	return out, req.Send()
}

// DeleteDBInstanceCommonWithContext is the same as DeleteDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBInstance = "DeleteDBInstance"

// DeleteDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDBInstance operation. The "output" return
// value will be populated with the DeleteDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDBInstanceCommon Send returns without error.
//
// See DeleteDBInstance for more information on using the DeleteDBInstance
// API call, and error handling.
//
//    // Example sending a request using the DeleteDBInstanceRequest method.
//    req, resp := client.DeleteDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteDBInstanceRequest(input *DeleteDBInstanceInput) (req *request.Request, output *DeleteDBInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBInstanceInput{}
	}

	output = &DeleteDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDBInstance API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteDBInstance for usage and error information.
func (c *RDSMYSQLV2) DeleteDBInstance(input *DeleteDBInstanceInput) (*DeleteDBInstanceOutput, error) {
	req, out := c.DeleteDBInstanceRequest(input)
	return out, req.Send()
}

// DeleteDBInstanceWithContext is the same as DeleteDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteDBInstanceWithContext(ctx volcstack.Context, input *DeleteDBInstanceInput, opts ...request.Option) (*DeleteDBInstanceOutput, error) {
	req, out := c.DeleteDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDatabaseCommon = "DeleteDatabase"

// DeleteDatabaseCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDatabaseCommon operation. The "output" return
// value will be populated with the DeleteDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDatabaseCommon Send returns without error.
//
// See DeleteDatabaseCommon for more information on using the DeleteDatabaseCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDatabaseCommonRequest method.
//    req, resp := client.DeleteDatabaseCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteDatabaseCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDatabaseCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteDatabaseCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteDatabaseCommon for usage and error information.
func (c *RDSMYSQLV2) DeleteDatabaseCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDatabaseCommonRequest(input)
	return out, req.Send()
}

// DeleteDatabaseCommonWithContext is the same as DeleteDatabaseCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDatabaseCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteDatabaseCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDatabaseCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDatabase = "DeleteDatabase"

// DeleteDatabaseRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDatabase operation. The "output" return
// value will be populated with the DeleteDatabaseCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDatabaseCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDatabaseCommon Send returns without error.
//
// See DeleteDatabase for more information on using the DeleteDatabase
// API call, and error handling.
//
//    // Example sending a request using the DeleteDatabaseRequest method.
//    req, resp := client.DeleteDatabaseRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DeleteDatabaseRequest(input *DeleteDatabaseInput) (req *request.Request, output *DeleteDatabaseOutput) {
	op := &request.Operation{
		Name:       opDeleteDatabase,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDatabaseInput{}
	}

	output = &DeleteDatabaseOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDatabase API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DeleteDatabase for usage and error information.
func (c *RDSMYSQLV2) DeleteDatabase(input *DeleteDatabaseInput) (*DeleteDatabaseOutput, error) {
	req, out := c.DeleteDatabaseRequest(input)
	return out, req.Send()
}

// DeleteDatabaseWithContext is the same as DeleteDatabase with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDatabase for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DeleteDatabaseWithContext(ctx volcstack.Context, input *DeleteDatabaseInput, opts ...request.Option) (*DeleteDatabaseOutput, error) {
	req, out := c.DeleteDatabaseRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailabilityZonesCommon = "DescribeAvailabilityZones"

// DescribeAvailabilityZonesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAvailabilityZonesCommon operation. The "output" return
// value will be populated with the DescribeAvailabilityZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailabilityZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailabilityZonesCommon Send returns without error.
//
// See DescribeAvailabilityZonesCommon for more information on using the DescribeAvailabilityZonesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailabilityZonesCommonRequest method.
//    req, resp := client.DescribeAvailabilityZonesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeAvailabilityZonesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAvailabilityZonesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAvailabilityZonesCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeAvailabilityZonesCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeAvailabilityZonesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailabilityZonesCommonRequest(input)
	return out, req.Send()
}

// DescribeAvailabilityZonesCommonWithContext is the same as DescribeAvailabilityZonesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailabilityZonesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeAvailabilityZonesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailabilityZonesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailabilityZones = "DescribeAvailabilityZones"

// DescribeAvailabilityZonesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAvailabilityZones operation. The "output" return
// value will be populated with the DescribeAvailabilityZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailabilityZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailabilityZonesCommon Send returns without error.
//
// See DescribeAvailabilityZones for more information on using the DescribeAvailabilityZones
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailabilityZonesRequest method.
//    req, resp := client.DescribeAvailabilityZonesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeAvailabilityZonesRequest(input *DescribeAvailabilityZonesInput) (req *request.Request, output *DescribeAvailabilityZonesOutput) {
	op := &request.Operation{
		Name:       opDescribeAvailabilityZones,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAvailabilityZonesInput{}
	}

	output = &DescribeAvailabilityZonesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeAvailabilityZones API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeAvailabilityZones for usage and error information.
func (c *RDSMYSQLV2) DescribeAvailabilityZones(input *DescribeAvailabilityZonesInput) (*DescribeAvailabilityZonesOutput, error) {
	req, out := c.DescribeAvailabilityZonesRequest(input)
	return out, req.Send()
}

// DescribeAvailabilityZonesWithContext is the same as DescribeAvailabilityZones with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailabilityZones for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeAvailabilityZonesWithContext(ctx volcstack.Context, input *DescribeAvailabilityZonesInput, opts ...request.Option) (*DescribeAvailabilityZonesOutput, error) {
	req, out := c.DescribeAvailabilityZonesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackupPolicyCommon = "DescribeBackupPolicy"

// DescribeBackupPolicyCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBackupPolicyCommon operation. The "output" return
// value will be populated with the DescribeBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPolicyCommon Send returns without error.
//
// See DescribeBackupPolicyCommon for more information on using the DescribeBackupPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupPolicyCommonRequest method.
//    req, resp := client.DescribeBackupPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeBackupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBackupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPolicyCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackupPolicyCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeBackupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPolicyCommonRequest(input)
	return out, req.Send()
}

// DescribeBackupPolicyCommonWithContext is the same as DescribeBackupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupPolicyCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackupPolicy = "DescribeBackupPolicy"

// DescribeBackupPolicyRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBackupPolicy operation. The "output" return
// value will be populated with the DescribeBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPolicyCommon Send returns without error.
//
// See DescribeBackupPolicy for more information on using the DescribeBackupPolicy
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupPolicyRequest method.
//    req, resp := client.DescribeBackupPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeBackupPolicyRequest(input *DescribeBackupPolicyInput) (req *request.Request, output *DescribeBackupPolicyOutput) {
	op := &request.Operation{
		Name:       opDescribeBackupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBackupPolicyInput{}
	}

	output = &DescribeBackupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPolicy API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackupPolicy for usage and error information.
func (c *RDSMYSQLV2) DescribeBackupPolicy(input *DescribeBackupPolicyInput) (*DescribeBackupPolicyOutput, error) {
	req, out := c.DescribeBackupPolicyRequest(input)
	return out, req.Send()
}

// DescribeBackupPolicyWithContext is the same as DescribeBackupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupPolicyWithContext(ctx volcstack.Context, input *DescribeBackupPolicyInput, opts ...request.Option) (*DescribeBackupPolicyOutput, error) {
	req, out := c.DescribeBackupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackupsCommon = "DescribeBackups"

// DescribeBackupsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBackupsCommon operation. The "output" return
// value will be populated with the DescribeBackupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupsCommon Send returns without error.
//
// See DescribeBackupsCommon for more information on using the DescribeBackupsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupsCommonRequest method.
//    req, resp := client.DescribeBackupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeBackupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBackupsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackupsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeBackupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupsCommonRequest(input)
	return out, req.Send()
}

// DescribeBackupsCommonWithContext is the same as DescribeBackupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackups = "DescribeBackups"

// DescribeBackupsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBackups operation. The "output" return
// value will be populated with the DescribeBackupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupsCommon Send returns without error.
//
// See DescribeBackups for more information on using the DescribeBackups
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupsRequest method.
//    req, resp := client.DescribeBackupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeBackupsRequest(input *DescribeBackupsInput) (req *request.Request, output *DescribeBackupsOutput) {
	op := &request.Operation{
		Name:       opDescribeBackups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBackupsInput{}
	}

	output = &DescribeBackupsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackups API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeBackups for usage and error information.
func (c *RDSMYSQLV2) DescribeBackups(input *DescribeBackupsInput) (*DescribeBackupsOutput, error) {
	req, out := c.DescribeBackupsRequest(input)
	return out, req.Send()
}

// DescribeBackupsWithContext is the same as DescribeBackups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeBackupsWithContext(ctx volcstack.Context, input *DescribeBackupsInput, opts ...request.Option) (*DescribeBackupsOutput, error) {
	req, out := c.DescribeBackupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBAccountsCommon = "DescribeDBAccounts"

// DescribeDBAccountsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBAccountsCommon operation. The "output" return
// value will be populated with the DescribeDBAccountsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBAccountsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBAccountsCommon Send returns without error.
//
// See DescribeDBAccountsCommon for more information on using the DescribeDBAccountsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBAccountsCommonRequest method.
//    req, resp := client.DescribeDBAccountsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBAccountsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBAccountsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBAccountsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBAccountsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBAccountsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBAccountsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBAccountsCommonWithContext is the same as DescribeDBAccountsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBAccountsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBAccountsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBAccountsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBAccounts = "DescribeDBAccounts"

// DescribeDBAccountsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBAccounts operation. The "output" return
// value will be populated with the DescribeDBAccountsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBAccountsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBAccountsCommon Send returns without error.
//
// See DescribeDBAccounts for more information on using the DescribeDBAccounts
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBAccountsRequest method.
//    req, resp := client.DescribeDBAccountsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBAccountsRequest(input *DescribeDBAccountsInput) (req *request.Request, output *DescribeDBAccountsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBAccounts,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBAccountsInput{}
	}

	output = &DescribeDBAccountsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBAccounts API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBAccounts for usage and error information.
func (c *RDSMYSQLV2) DescribeDBAccounts(input *DescribeDBAccountsInput) (*DescribeDBAccountsOutput, error) {
	req, out := c.DescribeDBAccountsRequest(input)
	return out, req.Send()
}

// DescribeDBAccountsWithContext is the same as DescribeDBAccounts with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBAccounts for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBAccountsWithContext(ctx volcstack.Context, input *DescribeDBAccountsInput, opts ...request.Option) (*DescribeDBAccountsOutput, error) {
	req, out := c.DescribeDBAccountsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceDetailCommon = "DescribeDBInstanceDetail"

// DescribeDBInstanceDetailCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstanceDetailCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceDetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceDetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceDetailCommon Send returns without error.
//
// See DescribeDBInstanceDetailCommon for more information on using the DescribeDBInstanceDetailCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceDetailCommonRequest method.
//    req, resp := client.DescribeDBInstanceDetailCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceDetailCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceDetailCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceDetailCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceDetailCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceDetailCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceDetailCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceDetailCommonWithContext is the same as DescribeDBInstanceDetailCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceDetailCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceDetailCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceDetailCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceDetail = "DescribeDBInstanceDetail"

// DescribeDBInstanceDetailRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstanceDetail operation. The "output" return
// value will be populated with the DescribeDBInstanceDetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceDetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceDetailCommon Send returns without error.
//
// See DescribeDBInstanceDetail for more information on using the DescribeDBInstanceDetail
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceDetailRequest method.
//    req, resp := client.DescribeDBInstanceDetailRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceDetailRequest(input *DescribeDBInstanceDetailInput) (req *request.Request, output *DescribeDBInstanceDetailOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceDetailInput{}
	}

	output = &DescribeDBInstanceDetailOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceDetail API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceDetail for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceDetail(input *DescribeDBInstanceDetailInput) (*DescribeDBInstanceDetailOutput, error) {
	req, out := c.DescribeDBInstanceDetailRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceDetailWithContext is the same as DescribeDBInstanceDetail with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceDetail for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceDetailWithContext(ctx volcstack.Context, input *DescribeDBInstanceDetailInput, opts ...request.Option) (*DescribeDBInstanceDetailOutput, error) {
	req, out := c.DescribeDBInstanceDetailRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstancePriceDetailCommon = "DescribeDBInstancePriceDetail"

// DescribeDBInstancePriceDetailCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstancePriceDetailCommon operation. The "output" return
// value will be populated with the DescribeDBInstancePriceDetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstancePriceDetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstancePriceDetailCommon Send returns without error.
//
// See DescribeDBInstancePriceDetailCommon for more information on using the DescribeDBInstancePriceDetailCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstancePriceDetailCommonRequest method.
//    req, resp := client.DescribeDBInstancePriceDetailCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstancePriceDetailCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstancePriceDetailCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstancePriceDetailCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstancePriceDetailCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDetailCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstancePriceDetailCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstancePriceDetailCommonWithContext is the same as DescribeDBInstancePriceDetailCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstancePriceDetailCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDetailCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstancePriceDetailCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstancePriceDetail = "DescribeDBInstancePriceDetail"

// DescribeDBInstancePriceDetailRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstancePriceDetail operation. The "output" return
// value will be populated with the DescribeDBInstancePriceDetailCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstancePriceDetailCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstancePriceDetailCommon Send returns without error.
//
// See DescribeDBInstancePriceDetail for more information on using the DescribeDBInstancePriceDetail
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstancePriceDetailRequest method.
//    req, resp := client.DescribeDBInstancePriceDetailRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstancePriceDetailRequest(input *DescribeDBInstancePriceDetailInput) (req *request.Request, output *DescribeDBInstancePriceDetailOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstancePriceDetail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstancePriceDetailInput{}
	}

	output = &DescribeDBInstancePriceDetailOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstancePriceDetail API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstancePriceDetail for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDetail(input *DescribeDBInstancePriceDetailInput) (*DescribeDBInstancePriceDetailOutput, error) {
	req, out := c.DescribeDBInstancePriceDetailRequest(input)
	return out, req.Send()
}

// DescribeDBInstancePriceDetailWithContext is the same as DescribeDBInstancePriceDetail with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstancePriceDetail for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstancePriceDetailWithContext(ctx volcstack.Context, input *DescribeDBInstancePriceDetailInput, opts ...request.Option) (*DescribeDBInstancePriceDetailOutput, error) {
	req, out := c.DescribeDBInstancePriceDetailRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceSpecsCommon = "DescribeDBInstanceSpecs"

// DescribeDBInstanceSpecsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstanceSpecsCommon operation. The "output" return
// value will be populated with the DescribeDBInstanceSpecsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceSpecsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceSpecsCommon Send returns without error.
//
// See DescribeDBInstanceSpecsCommon for more information on using the DescribeDBInstanceSpecsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceSpecsCommonRequest method.
//    req, resp := client.DescribeDBInstanceSpecsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceSpecsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceSpecsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceSpecsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceSpecsCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceSpecsCommonWithContext is the same as DescribeDBInstanceSpecsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceSpecsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstanceSpecsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstanceSpecs = "DescribeDBInstanceSpecs"

// DescribeDBInstanceSpecsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstanceSpecs operation. The "output" return
// value will be populated with the DescribeDBInstanceSpecsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstanceSpecsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstanceSpecsCommon Send returns without error.
//
// See DescribeDBInstanceSpecs for more information on using the DescribeDBInstanceSpecs
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstanceSpecsRequest method.
//    req, resp := client.DescribeDBInstanceSpecsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsRequest(input *DescribeDBInstanceSpecsInput) (req *request.Request, output *DescribeDBInstanceSpecsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstanceSpecs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstanceSpecsInput{}
	}

	output = &DescribeDBInstanceSpecsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstanceSpecs API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstanceSpecs for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecs(input *DescribeDBInstanceSpecsInput) (*DescribeDBInstanceSpecsOutput, error) {
	req, out := c.DescribeDBInstanceSpecsRequest(input)
	return out, req.Send()
}

// DescribeDBInstanceSpecsWithContext is the same as DescribeDBInstanceSpecs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstanceSpecs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstanceSpecsWithContext(ctx volcstack.Context, input *DescribeDBInstanceSpecsInput, opts ...request.Option) (*DescribeDBInstanceSpecsOutput, error) {
	req, out := c.DescribeDBInstanceSpecsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstancesCommon = "DescribeDBInstances"

// DescribeDBInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstancesCommon operation. The "output" return
// value will be populated with the DescribeDBInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstancesCommon Send returns without error.
//
// See DescribeDBInstancesCommon for more information on using the DescribeDBInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstancesCommonRequest method.
//    req, resp := client.DescribeDBInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDBInstancesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstancesCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstancesCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstancesCommonRequest(input)
	return out, req.Send()
}

// DescribeDBInstancesCommonWithContext is the same as DescribeDBInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDBInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstances = "DescribeDBInstances"

// DescribeDBInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDBInstances operation. The "output" return
// value will be populated with the DescribeDBInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDBInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDBInstancesCommon Send returns without error.
//
// See DescribeDBInstances for more information on using the DescribeDBInstances
// API call, and error handling.
//
//    // Example sending a request using the DescribeDBInstancesRequest method.
//    req, resp := client.DescribeDBInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDBInstancesRequest(input *DescribeDBInstancesInput) (req *request.Request, output *DescribeDBInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstancesInput{}
	}

	output = &DescribeDBInstancesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDBInstances API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDBInstances for usage and error information.
func (c *RDSMYSQLV2) DescribeDBInstances(input *DescribeDBInstancesInput) (*DescribeDBInstancesOutput, error) {
	req, out := c.DescribeDBInstancesRequest(input)
	return out, req.Send()
}

// DescribeDBInstancesWithContext is the same as DescribeDBInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDBInstancesWithContext(ctx volcstack.Context, input *DescribeDBInstancesInput, opts ...request.Option) (*DescribeDBInstancesOutput, error) {
	req, out := c.DescribeDBInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDatabasesCommon = "DescribeDatabases"

// DescribeDatabasesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDatabasesCommon operation. The "output" return
// value will be populated with the DescribeDatabasesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDatabasesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDatabasesCommon Send returns without error.
//
// See DescribeDatabasesCommon for more information on using the DescribeDatabasesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDatabasesCommonRequest method.
//    req, resp := client.DescribeDatabasesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDatabasesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDatabasesCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDatabasesCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDatabasesCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeDatabasesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDatabasesCommonRequest(input)
	return out, req.Send()
}

// DescribeDatabasesCommonWithContext is the same as DescribeDatabasesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDatabasesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDatabasesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDatabasesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDatabases = "DescribeDatabases"

// DescribeDatabasesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDatabases operation. The "output" return
// value will be populated with the DescribeDatabasesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDatabasesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDatabasesCommon Send returns without error.
//
// See DescribeDatabases for more information on using the DescribeDatabases
// API call, and error handling.
//
//    // Example sending a request using the DescribeDatabasesRequest method.
//    req, resp := client.DescribeDatabasesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeDatabasesRequest(input *DescribeDatabasesInput) (req *request.Request, output *DescribeDatabasesOutput) {
	op := &request.Operation{
		Name:       opDescribeDatabases,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDatabasesInput{}
	}

	output = &DescribeDatabasesOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeDatabases API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeDatabases for usage and error information.
func (c *RDSMYSQLV2) DescribeDatabases(input *DescribeDatabasesInput) (*DescribeDatabasesOutput, error) {
	req, out := c.DescribeDatabasesRequest(input)
	return out, req.Send()
}

// DescribeDatabasesWithContext is the same as DescribeDatabases with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDatabases for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeDatabasesWithContext(ctx volcstack.Context, input *DescribeDatabasesInput, opts ...request.Option) (*DescribeDatabasesOutput, error) {
	req, out := c.DescribeDatabasesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeErrorLogsCommon = "DescribeErrorLogs"

// DescribeErrorLogsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeErrorLogsCommon operation. The "output" return
// value will be populated with the DescribeErrorLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeErrorLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeErrorLogsCommon Send returns without error.
//
// See DescribeErrorLogsCommon for more information on using the DescribeErrorLogsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeErrorLogsCommonRequest method.
//    req, resp := client.DescribeErrorLogsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeErrorLogsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeErrorLogsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeErrorLogsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeErrorLogsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeErrorLogsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeErrorLogsCommonRequest(input)
	return out, req.Send()
}

// DescribeErrorLogsCommonWithContext is the same as DescribeErrorLogsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeErrorLogsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeErrorLogsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeErrorLogsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeErrorLogs = "DescribeErrorLogs"

// DescribeErrorLogsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeErrorLogs operation. The "output" return
// value will be populated with the DescribeErrorLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeErrorLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeErrorLogsCommon Send returns without error.
//
// See DescribeErrorLogs for more information on using the DescribeErrorLogs
// API call, and error handling.
//
//    // Example sending a request using the DescribeErrorLogsRequest method.
//    req, resp := client.DescribeErrorLogsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeErrorLogsRequest(input *DescribeErrorLogsInput) (req *request.Request, output *DescribeErrorLogsOutput) {
	op := &request.Operation{
		Name:       opDescribeErrorLogs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeErrorLogsInput{}
	}

	output = &DescribeErrorLogsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeErrorLogs API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeErrorLogs for usage and error information.
func (c *RDSMYSQLV2) DescribeErrorLogs(input *DescribeErrorLogsInput) (*DescribeErrorLogsOutput, error) {
	req, out := c.DescribeErrorLogsRequest(input)
	return out, req.Send()
}

// DescribeErrorLogsWithContext is the same as DescribeErrorLogs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeErrorLogs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeErrorLogsWithContext(ctx volcstack.Context, input *DescribeErrorLogsInput, opts ...request.Option) (*DescribeErrorLogsOutput, error) {
	req, out := c.DescribeErrorLogsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRecoverableTimeCommon = "DescribeRecoverableTime"

// DescribeRecoverableTimeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRecoverableTimeCommon operation. The "output" return
// value will be populated with the DescribeRecoverableTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRecoverableTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRecoverableTimeCommon Send returns without error.
//
// See DescribeRecoverableTimeCommon for more information on using the DescribeRecoverableTimeCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeRecoverableTimeCommonRequest method.
//    req, resp := client.DescribeRecoverableTimeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeRecoverableTimeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRecoverableTimeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRecoverableTimeCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeRecoverableTimeCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeRecoverableTimeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRecoverableTimeCommonRequest(input)
	return out, req.Send()
}

// DescribeRecoverableTimeCommonWithContext is the same as DescribeRecoverableTimeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRecoverableTimeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeRecoverableTimeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRecoverableTimeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRecoverableTime = "DescribeRecoverableTime"

// DescribeRecoverableTimeRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRecoverableTime operation. The "output" return
// value will be populated with the DescribeRecoverableTimeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRecoverableTimeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRecoverableTimeCommon Send returns without error.
//
// See DescribeRecoverableTime for more information on using the DescribeRecoverableTime
// API call, and error handling.
//
//    // Example sending a request using the DescribeRecoverableTimeRequest method.
//    req, resp := client.DescribeRecoverableTimeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeRecoverableTimeRequest(input *DescribeRecoverableTimeInput) (req *request.Request, output *DescribeRecoverableTimeOutput) {
	op := &request.Operation{
		Name:       opDescribeRecoverableTime,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeRecoverableTimeInput{}
	}

	output = &DescribeRecoverableTimeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRecoverableTime API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeRecoverableTime for usage and error information.
func (c *RDSMYSQLV2) DescribeRecoverableTime(input *DescribeRecoverableTimeInput) (*DescribeRecoverableTimeOutput, error) {
	req, out := c.DescribeRecoverableTimeRequest(input)
	return out, req.Send()
}

// DescribeRecoverableTimeWithContext is the same as DescribeRecoverableTime with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRecoverableTime for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeRecoverableTimeWithContext(ctx volcstack.Context, input *DescribeRecoverableTimeInput, opts ...request.Option) (*DescribeRecoverableTimeOutput, error) {
	req, out := c.DescribeRecoverableTimeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRegionsCommon = "DescribeRegions"

// DescribeRegionsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRegionsCommon operation. The "output" return
// value will be populated with the DescribeRegionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRegionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRegionsCommon Send returns without error.
//
// See DescribeRegionsCommon for more information on using the DescribeRegionsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeRegionsCommonRequest method.
//    req, resp := client.DescribeRegionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeRegionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRegionsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRegionsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeRegionsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeRegionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRegionsCommonRequest(input)
	return out, req.Send()
}

// DescribeRegionsCommonWithContext is the same as DescribeRegionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRegionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeRegionsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRegionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRegions = "DescribeRegions"

// DescribeRegionsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRegions operation. The "output" return
// value will be populated with the DescribeRegionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRegionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRegionsCommon Send returns without error.
//
// See DescribeRegions for more information on using the DescribeRegions
// API call, and error handling.
//
//    // Example sending a request using the DescribeRegionsRequest method.
//    req, resp := client.DescribeRegionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeRegionsRequest(input *DescribeRegionsInput) (req *request.Request, output *DescribeRegionsOutput) {
	op := &request.Operation{
		Name:       opDescribeRegions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeRegionsInput{}
	}

	output = &DescribeRegionsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeRegions API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeRegions for usage and error information.
func (c *RDSMYSQLV2) DescribeRegions(input *DescribeRegionsInput) (*DescribeRegionsOutput, error) {
	req, out := c.DescribeRegionsRequest(input)
	return out, req.Send()
}

// DescribeRegionsWithContext is the same as DescribeRegions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRegions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeRegionsWithContext(ctx volcstack.Context, input *DescribeRegionsInput, opts ...request.Option) (*DescribeRegionsOutput, error) {
	req, out := c.DescribeRegionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSlowLogsCommon = "DescribeSlowLogs"

// DescribeSlowLogsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSlowLogsCommon operation. The "output" return
// value will be populated with the DescribeSlowLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSlowLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSlowLogsCommon Send returns without error.
//
// See DescribeSlowLogsCommon for more information on using the DescribeSlowLogsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSlowLogsCommonRequest method.
//    req, resp := client.DescribeSlowLogsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeSlowLogsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSlowLogsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSlowLogsCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeSlowLogsCommon for usage and error information.
func (c *RDSMYSQLV2) DescribeSlowLogsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSlowLogsCommonRequest(input)
	return out, req.Send()
}

// DescribeSlowLogsCommonWithContext is the same as DescribeSlowLogsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSlowLogsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeSlowLogsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSlowLogsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSlowLogs = "DescribeSlowLogs"

// DescribeSlowLogsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSlowLogs operation. The "output" return
// value will be populated with the DescribeSlowLogsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSlowLogsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSlowLogsCommon Send returns without error.
//
// See DescribeSlowLogs for more information on using the DescribeSlowLogs
// API call, and error handling.
//
//    // Example sending a request using the DescribeSlowLogsRequest method.
//    req, resp := client.DescribeSlowLogsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) DescribeSlowLogsRequest(input *DescribeSlowLogsInput) (req *request.Request, output *DescribeSlowLogsOutput) {
	op := &request.Operation{
		Name:       opDescribeSlowLogs,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSlowLogsInput{}
	}

	output = &DescribeSlowLogsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeSlowLogs API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation DescribeSlowLogs for usage and error information.
func (c *RDSMYSQLV2) DescribeSlowLogs(input *DescribeSlowLogsInput) (*DescribeSlowLogsOutput, error) {
	req, out := c.DescribeSlowLogsRequest(input)
	return out, req.Send()
}

// DescribeSlowLogsWithContext is the same as DescribeSlowLogs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSlowLogs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) DescribeSlowLogsWithContext(ctx volcstack.Context, input *DescribeSlowLogsInput, opts ...request.Option) (*DescribeSlowLogsOutput, error) {
	req, out := c.DescribeSlowLogsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyBackupPolicyCommon = "ModifyBackupPolicy"

// ModifyBackupPolicyCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyBackupPolicyCommon operation. The "output" return
// value will be populated with the ModifyBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBackupPolicyCommon Send returns without error.
//
// See ModifyBackupPolicyCommon for more information on using the ModifyBackupPolicyCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyBackupPolicyCommonRequest method.
//    req, resp := client.ModifyBackupPolicyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyBackupPolicyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyBackupPolicyCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyBackupPolicyCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyBackupPolicyCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyBackupPolicyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyBackupPolicyCommonRequest(input)
	return out, req.Send()
}

// ModifyBackupPolicyCommonWithContext is the same as ModifyBackupPolicyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBackupPolicyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyBackupPolicyCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyBackupPolicyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyBackupPolicy = "ModifyBackupPolicy"

// ModifyBackupPolicyRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyBackupPolicy operation. The "output" return
// value will be populated with the ModifyBackupPolicyCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBackupPolicyCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBackupPolicyCommon Send returns without error.
//
// See ModifyBackupPolicy for more information on using the ModifyBackupPolicy
// API call, and error handling.
//
//    // Example sending a request using the ModifyBackupPolicyRequest method.
//    req, resp := client.ModifyBackupPolicyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyBackupPolicyRequest(input *ModifyBackupPolicyInput) (req *request.Request, output *ModifyBackupPolicyOutput) {
	op := &request.Operation{
		Name:       opModifyBackupPolicy,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyBackupPolicyInput{}
	}

	output = &ModifyBackupPolicyOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyBackupPolicy API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyBackupPolicy for usage and error information.
func (c *RDSMYSQLV2) ModifyBackupPolicy(input *ModifyBackupPolicyInput) (*ModifyBackupPolicyOutput, error) {
	req, out := c.ModifyBackupPolicyRequest(input)
	return out, req.Send()
}

// ModifyBackupPolicyWithContext is the same as ModifyBackupPolicy with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBackupPolicy for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyBackupPolicyWithContext(ctx volcstack.Context, input *ModifyBackupPolicyInput, opts ...request.Option) (*ModifyBackupPolicyOutput, error) {
	req, out := c.ModifyBackupPolicyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBAccountPrivilegeCommon = "ModifyDBAccountPrivilege"

// ModifyDBAccountPrivilegeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBAccountPrivilegeCommon operation. The "output" return
// value will be populated with the ModifyDBAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBAccountPrivilegeCommon Send returns without error.
//
// See ModifyDBAccountPrivilegeCommon for more information on using the ModifyDBAccountPrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBAccountPrivilegeCommonRequest method.
//    req, resp := client.ModifyDBAccountPrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBAccountPrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBAccountPrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBAccountPrivilegeCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBAccountPrivilegeCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBAccountPrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBAccountPrivilegeCommonRequest(input)
	return out, req.Send()
}

// ModifyDBAccountPrivilegeCommonWithContext is the same as ModifyDBAccountPrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBAccountPrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBAccountPrivilegeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBAccountPrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBAccountPrivilege = "ModifyDBAccountPrivilege"

// ModifyDBAccountPrivilegeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBAccountPrivilege operation. The "output" return
// value will be populated with the ModifyDBAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBAccountPrivilegeCommon Send returns without error.
//
// See ModifyDBAccountPrivilege for more information on using the ModifyDBAccountPrivilege
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBAccountPrivilegeRequest method.
//    req, resp := client.ModifyDBAccountPrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBAccountPrivilegeRequest(input *ModifyDBAccountPrivilegeInput) (req *request.Request, output *ModifyDBAccountPrivilegeOutput) {
	op := &request.Operation{
		Name:       opModifyDBAccountPrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBAccountPrivilegeInput{}
	}

	output = &ModifyDBAccountPrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyDBAccountPrivilege API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBAccountPrivilege for usage and error information.
func (c *RDSMYSQLV2) ModifyDBAccountPrivilege(input *ModifyDBAccountPrivilegeInput) (*ModifyDBAccountPrivilegeOutput, error) {
	req, out := c.ModifyDBAccountPrivilegeRequest(input)
	return out, req.Send()
}

// ModifyDBAccountPrivilegeWithContext is the same as ModifyDBAccountPrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBAccountPrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBAccountPrivilegeWithContext(ctx volcstack.Context, input *ModifyDBAccountPrivilegeInput, opts ...request.Option) (*ModifyDBAccountPrivilegeOutput, error) {
	req, out := c.ModifyDBAccountPrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceNameCommon = "ModifyDBInstanceName"

// ModifyDBInstanceNameCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBInstanceNameCommon operation. The "output" return
// value will be populated with the ModifyDBInstanceNameCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceNameCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceNameCommon Send returns without error.
//
// See ModifyDBInstanceNameCommon for more information on using the ModifyDBInstanceNameCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceNameCommonRequest method.
//    req, resp := client.ModifyDBInstanceNameCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceNameCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBInstanceNameCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceNameCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceNameCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceNameCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceNameCommonRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceNameCommonWithContext is the same as ModifyDBInstanceNameCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceNameCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceNameCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceNameCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceName = "ModifyDBInstanceName"

// ModifyDBInstanceNameRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBInstanceName operation. The "output" return
// value will be populated with the ModifyDBInstanceNameCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceNameCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceNameCommon Send returns without error.
//
// See ModifyDBInstanceName for more information on using the ModifyDBInstanceName
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceNameRequest method.
//    req, resp := client.ModifyDBInstanceNameRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceNameRequest(input *ModifyDBInstanceNameInput) (req *request.Request, output *ModifyDBInstanceNameOutput) {
	op := &request.Operation{
		Name:       opModifyDBInstanceName,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBInstanceNameInput{}
	}

	output = &ModifyDBInstanceNameOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyDBInstanceName API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceName for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceName(input *ModifyDBInstanceNameInput) (*ModifyDBInstanceNameOutput, error) {
	req, out := c.ModifyDBInstanceNameRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceNameWithContext is the same as ModifyDBInstanceName with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceName for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceNameWithContext(ctx volcstack.Context, input *ModifyDBInstanceNameInput, opts ...request.Option) (*ModifyDBInstanceNameOutput, error) {
	req, out := c.ModifyDBInstanceNameRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceSpecCommon = "ModifyDBInstanceSpec"

// ModifyDBInstanceSpecCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBInstanceSpecCommon operation. The "output" return
// value will be populated with the ModifyDBInstanceSpecCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceSpecCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceSpecCommon Send returns without error.
//
// See ModifyDBInstanceSpecCommon for more information on using the ModifyDBInstanceSpecCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceSpecCommonRequest method.
//    req, resp := client.ModifyDBInstanceSpecCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceSpecCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBInstanceSpecCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceSpecCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceSpecCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceSpecCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceSpecCommonRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceSpecCommonWithContext is the same as ModifyDBInstanceSpecCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceSpecCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceSpecCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBInstanceSpecCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstanceSpec = "ModifyDBInstanceSpec"

// ModifyDBInstanceSpecRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDBInstanceSpec operation. The "output" return
// value will be populated with the ModifyDBInstanceSpecCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBInstanceSpecCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBInstanceSpecCommon Send returns without error.
//
// See ModifyDBInstanceSpec for more information on using the ModifyDBInstanceSpec
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBInstanceSpecRequest method.
//    req, resp := client.ModifyDBInstanceSpecRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBInstanceSpecRequest(input *ModifyDBInstanceSpecInput) (req *request.Request, output *ModifyDBInstanceSpecOutput) {
	op := &request.Operation{
		Name:       opModifyDBInstanceSpec,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBInstanceSpecInput{}
	}

	output = &ModifyDBInstanceSpecOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBInstanceSpec API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBInstanceSpec for usage and error information.
func (c *RDSMYSQLV2) ModifyDBInstanceSpec(input *ModifyDBInstanceSpecInput) (*ModifyDBInstanceSpecOutput, error) {
	req, out := c.ModifyDBInstanceSpecRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceSpecWithContext is the same as ModifyDBInstanceSpec with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstanceSpec for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBInstanceSpecWithContext(ctx volcstack.Context, input *ModifyDBInstanceSpecInput, opts ...request.Option) (*ModifyDBInstanceSpecOutput, error) {
	req, out := c.ModifyDBInstanceSpecRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDatabasePrivilegeCommon = "ModifyDatabasePrivilege"

// ModifyDatabasePrivilegeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDatabasePrivilegeCommon operation. The "output" return
// value will be populated with the ModifyDatabasePrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDatabasePrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDatabasePrivilegeCommon Send returns without error.
//
// See ModifyDatabasePrivilegeCommon for more information on using the ModifyDatabasePrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDatabasePrivilegeCommonRequest method.
//    req, resp := client.ModifyDatabasePrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDatabasePrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDatabasePrivilegeCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDatabasePrivilegeCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDatabasePrivilegeCommonRequest(input)
	return out, req.Send()
}

// ModifyDatabasePrivilegeCommonWithContext is the same as ModifyDatabasePrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDatabasePrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDatabasePrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDatabasePrivilege = "ModifyDatabasePrivilege"

// ModifyDatabasePrivilegeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDatabasePrivilege operation. The "output" return
// value will be populated with the ModifyDatabasePrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDatabasePrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDatabasePrivilegeCommon Send returns without error.
//
// See ModifyDatabasePrivilege for more information on using the ModifyDatabasePrivilege
// API call, and error handling.
//
//    // Example sending a request using the ModifyDatabasePrivilegeRequest method.
//    req, resp := client.ModifyDatabasePrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeRequest(input *ModifyDatabasePrivilegeInput) (req *request.Request, output *ModifyDatabasePrivilegeOutput) {
	op := &request.Operation{
		Name:       opModifyDatabasePrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDatabasePrivilegeInput{}
	}

	output = &ModifyDatabasePrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyDatabasePrivilege API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ModifyDatabasePrivilege for usage and error information.
func (c *RDSMYSQLV2) ModifyDatabasePrivilege(input *ModifyDatabasePrivilegeInput) (*ModifyDatabasePrivilegeOutput, error) {
	req, out := c.ModifyDatabasePrivilegeRequest(input)
	return out, req.Send()
}

// ModifyDatabasePrivilegeWithContext is the same as ModifyDatabasePrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDatabasePrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDatabasePrivilegeWithContext(ctx volcstack.Context, input *ModifyDatabasePrivilegeInput, opts ...request.Option) (*ModifyDatabasePrivilegeOutput, error) {
	req, out := c.ModifyDatabasePrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetDBAccountCommon = "ResetDBAccount"

// ResetDBAccountCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetDBAccountCommon operation. The "output" return
// value will be populated with the ResetDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetDBAccountCommon Send returns without error.
//
// See ResetDBAccountCommon for more information on using the ResetDBAccountCommon
// API call, and error handling.
//
//    // Example sending a request using the ResetDBAccountCommonRequest method.
//    req, resp := client.ResetDBAccountCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ResetDBAccountCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetDBAccountCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ResetDBAccountCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ResetDBAccountCommon for usage and error information.
func (c *RDSMYSQLV2) ResetDBAccountCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetDBAccountCommonRequest(input)
	return out, req.Send()
}

// ResetDBAccountCommonWithContext is the same as ResetDBAccountCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetDBAccountCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ResetDBAccountCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetDBAccountCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetDBAccount = "ResetDBAccount"

// ResetDBAccountRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetDBAccount operation. The "output" return
// value will be populated with the ResetDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ResetDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after ResetDBAccountCommon Send returns without error.
//
// See ResetDBAccount for more information on using the ResetDBAccount
// API call, and error handling.
//
//    // Example sending a request using the ResetDBAccountRequest method.
//    req, resp := client.ResetDBAccountRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ResetDBAccountRequest(input *ResetDBAccountInput) (req *request.Request, output *ResetDBAccountOutput) {
	op := &request.Operation{
		Name:       opResetDBAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetDBAccountInput{}
	}

	output = &ResetDBAccountOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResetDBAccount API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation ResetDBAccount for usage and error information.
func (c *RDSMYSQLV2) ResetDBAccount(input *ResetDBAccountInput) (*ResetDBAccountOutput, error) {
	req, out := c.ResetDBAccountRequest(input)
	return out, req.Send()
}

// ResetDBAccountWithContext is the same as ResetDBAccount with the addition of
// the ability to pass a context and additional request options.
//
// See ResetDBAccount for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ResetDBAccountWithContext(ctx volcstack.Context, input *ResetDBAccountInput, opts ...request.Option) (*ResetDBAccountOutput, error) {
	req, out := c.ResetDBAccountRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestartDBInstanceCommon = "RestartDBInstance"

// RestartDBInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RestartDBInstanceCommon operation. The "output" return
// value will be populated with the RestartDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestartDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestartDBInstanceCommon Send returns without error.
//
// See RestartDBInstanceCommon for more information on using the RestartDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RestartDBInstanceCommonRequest method.
//    req, resp := client.RestartDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) RestartDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestartDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestartDBInstanceCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation RestartDBInstanceCommon for usage and error information.
func (c *RDSMYSQLV2) RestartDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestartDBInstanceCommonRequest(input)
	return out, req.Send()
}

// RestartDBInstanceCommonWithContext is the same as RestartDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RestartDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) RestartDBInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestartDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestartDBInstance = "RestartDBInstance"

// RestartDBInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RestartDBInstance operation. The "output" return
// value will be populated with the RestartDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestartDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestartDBInstanceCommon Send returns without error.
//
// See RestartDBInstance for more information on using the RestartDBInstance
// API call, and error handling.
//
//    // Example sending a request using the RestartDBInstanceRequest method.
//    req, resp := client.RestartDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) RestartDBInstanceRequest(input *RestartDBInstanceInput) (req *request.Request, output *RestartDBInstanceOutput) {
	op := &request.Operation{
		Name:       opRestartDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestartDBInstanceInput{}
	}

	output = &RestartDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// RestartDBInstance API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation RestartDBInstance for usage and error information.
func (c *RDSMYSQLV2) RestartDBInstance(input *RestartDBInstanceInput) (*RestartDBInstanceOutput, error) {
	req, out := c.RestartDBInstanceRequest(input)
	return out, req.Send()
}

// RestartDBInstanceWithContext is the same as RestartDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RestartDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) RestartDBInstanceWithContext(ctx volcstack.Context, input *RestartDBInstanceInput, opts ...request.Option) (*RestartDBInstanceOutput, error) {
	req, out := c.RestartDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestoreToNewInstanceCommon = "RestoreToNewInstance"

// RestoreToNewInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RestoreToNewInstanceCommon operation. The "output" return
// value will be populated with the RestoreToNewInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreToNewInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreToNewInstanceCommon Send returns without error.
//
// See RestoreToNewInstanceCommon for more information on using the RestoreToNewInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RestoreToNewInstanceCommonRequest method.
//    req, resp := client.RestoreToNewInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) RestoreToNewInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestoreToNewInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreToNewInstanceCommon API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation RestoreToNewInstanceCommon for usage and error information.
func (c *RDSMYSQLV2) RestoreToNewInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestoreToNewInstanceCommonRequest(input)
	return out, req.Send()
}

// RestoreToNewInstanceCommonWithContext is the same as RestoreToNewInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreToNewInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) RestoreToNewInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestoreToNewInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestoreToNewInstance = "RestoreToNewInstance"

// RestoreToNewInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RestoreToNewInstance operation. The "output" return
// value will be populated with the RestoreToNewInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreToNewInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreToNewInstanceCommon Send returns without error.
//
// See RestoreToNewInstance for more information on using the RestoreToNewInstance
// API call, and error handling.
//
//    // Example sending a request using the RestoreToNewInstanceRequest method.
//    req, resp := client.RestoreToNewInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) RestoreToNewInstanceRequest(input *RestoreToNewInstanceInput) (req *request.Request, output *RestoreToNewInstanceOutput) {
	op := &request.Operation{
		Name:       opRestoreToNewInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestoreToNewInstanceInput{}
	}

	output = &RestoreToNewInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreToNewInstance API operation for RDS_MYSQL_V2.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for RDS_MYSQL_V2's
// API operation RestoreToNewInstance for usage and error information.
func (c *RDSMYSQLV2) RestoreToNewInstance(input *RestoreToNewInstanceInput) (*RestoreToNewInstanceOutput, error) {
	req, out := c.RestoreToNewInstanceRequest(input)
	return out, req.Send()
}

// RestoreToNewInstanceWithContext is the same as RestoreToNewInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreToNewInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) RestoreToNewInstanceWithContext(ctx volcstack.Context, input *RestoreToNewInstanceInput, opts ...request.Option) (*RestoreToNewInstanceOutput, error) {
	req, out := c.RestoreToNewInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccountPrivilegesInfoForCreateDBAccountInput struct {
	_ struct{} `type:"structure"`

	AccountPrivilege *string `type:"string"`

	AccountPrivilegeCustom *string `type:"string"`

	DBName *string `type:"string"`
}

// String returns the string representation
func (s AccountPrivilegesInfoForCreateDBAccountInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AccountPrivilegesInfoForCreateDBAccountInput) GoString() string {
	return s.String()
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *AccountPrivilegesInfoForCreateDBAccountInput) SetAccountPrivilege(v string) *AccountPrivilegesInfoForCreateDBAccountInput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeCustom sets the AccountPrivilegeCustom field's value.
func (s *AccountPrivilegesInfoForCreateDBAccountInput) SetAccountPrivilegeCustom(v string) *AccountPrivilegesInfoForCreateDBAccountInput {
	s.AccountPrivilegeCustom = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *AccountPrivilegesInfoForCreateDBAccountInput) SetDBName(v string) *AccountPrivilegesInfoForCreateDBAccountInput {
	s.DBName = &v
	return s
}

type AccountPrivilegesInfoForDescribeDBAccountsOutput struct {
	_ struct{} `type:"structure"`

	AccountPrivilege *string `type:"string"`

	AccountPrivilegeCustom *string `type:"string"`

	DBName *string `type:"string"`
}

// String returns the string representation
func (s AccountPrivilegesInfoForDescribeDBAccountsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AccountPrivilegesInfoForDescribeDBAccountsOutput) GoString() string {
	return s.String()
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *AccountPrivilegesInfoForDescribeDBAccountsOutput) SetAccountPrivilege(v string) *AccountPrivilegesInfoForDescribeDBAccountsOutput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeCustom sets the AccountPrivilegeCustom field's value.
func (s *AccountPrivilegesInfoForDescribeDBAccountsOutput) SetAccountPrivilegeCustom(v string) *AccountPrivilegesInfoForDescribeDBAccountsOutput {
	s.AccountPrivilegeCustom = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *AccountPrivilegesInfoForDescribeDBAccountsOutput) SetDBName(v string) *AccountPrivilegesInfoForDescribeDBAccountsOutput {
	s.DBName = &v
	return s
}

type AccountsInfoForDescribeDBAccountsOutput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPrivilegesInfo []*AccountPrivilegesInfoForDescribeDBAccountsOutput `type:"list"`

	AccountStatus *string `type:"string"`

	AccountType *string `type:"string"`
}

// String returns the string representation
func (s AccountsInfoForDescribeDBAccountsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AccountsInfoForDescribeDBAccountsOutput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *AccountsInfoForDescribeDBAccountsOutput) SetAccountName(v string) *AccountsInfoForDescribeDBAccountsOutput {
	s.AccountName = &v
	return s
}

// SetAccountPrivilegesInfo sets the AccountPrivilegesInfo field's value.
func (s *AccountsInfoForDescribeDBAccountsOutput) SetAccountPrivilegesInfo(v []*AccountPrivilegesInfoForDescribeDBAccountsOutput) *AccountsInfoForDescribeDBAccountsOutput {
	s.AccountPrivilegesInfo = v
	return s
}

// SetAccountStatus sets the AccountStatus field's value.
func (s *AccountsInfoForDescribeDBAccountsOutput) SetAccountStatus(v string) *AccountsInfoForDescribeDBAccountsOutput {
	s.AccountStatus = &v
	return s
}

// SetAccountType sets the AccountType field's value.
func (s *AccountsInfoForDescribeDBAccountsOutput) SetAccountType(v string) *AccountsInfoForDescribeDBAccountsOutput {
	s.AccountType = &v
	return s
}

type AddressForDescribeDBInstanceDetailOutput struct {
	_ struct{} `type:"structure"`

	Domain *string `type:"string"`

	EipId *string `type:"string"`

	IPAddress *string `type:"string"`

	NetworkType *string `type:"string"`

	Port *string `type:"string"`

	SubnetId *string `type:"string"`
}

// String returns the string representation
func (s AddressForDescribeDBInstanceDetailOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AddressForDescribeDBInstanceDetailOutput) GoString() string {
	return s.String()
}

// SetDomain sets the Domain field's value.
func (s *AddressForDescribeDBInstanceDetailOutput) SetDomain(v string) *AddressForDescribeDBInstanceDetailOutput {
	s.Domain = &v
	return s
}

// SetEipId sets the EipId field's value.
func (s *AddressForDescribeDBInstanceDetailOutput) SetEipId(v string) *AddressForDescribeDBInstanceDetailOutput {
	s.EipId = &v
	return s
}

// SetIPAddress sets the IPAddress field's value.
func (s *AddressForDescribeDBInstanceDetailOutput) SetIPAddress(v string) *AddressForDescribeDBInstanceDetailOutput {
	s.IPAddress = &v
	return s
}

// SetNetworkType sets the NetworkType field's value.
func (s *AddressForDescribeDBInstanceDetailOutput) SetNetworkType(v string) *AddressForDescribeDBInstanceDetailOutput {
	s.NetworkType = &v
	return s
}

// SetPort sets the Port field's value.
func (s *AddressForDescribeDBInstanceDetailOutput) SetPort(v string) *AddressForDescribeDBInstanceDetailOutput {
	s.Port = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *AddressForDescribeDBInstanceDetailOutput) SetSubnetId(v string) *AddressForDescribeDBInstanceDetailOutput {
	s.SubnetId = &v
	return s
}

type BackupMetaForCreateBackupInput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`
}

// String returns the string representation
func (s BackupMetaForCreateBackupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BackupMetaForCreateBackupInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *BackupMetaForCreateBackupInput) SetDBName(v string) *BackupMetaForCreateBackupInput {
	s.DBName = &v
	return s
}

type BackupsInfoForDescribeBackupsOutput struct {
	_ struct{} `type:"structure"`

	BackupEndTime *string `type:"string"`

	BackupFileName *string `type:"string"`

	BackupFileSize *int64 `type:"int64"`

	BackupId *string `type:"string"`

	BackupMethod *string `type:"string"`

	BackupStartTime *string `type:"string"`

	BackupStatus *string `type:"string"`

	BackupType *string `type:"string"`

	ConsistentTime *string `type:"string"`

	CreateType *string `type:"string"`
}

// String returns the string representation
func (s BackupsInfoForDescribeBackupsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BackupsInfoForDescribeBackupsOutput) GoString() string {
	return s.String()
}

// SetBackupEndTime sets the BackupEndTime field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupEndTime(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupEndTime = &v
	return s
}

// SetBackupFileName sets the BackupFileName field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupFileName(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupFileName = &v
	return s
}

// SetBackupFileSize sets the BackupFileSize field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupFileSize(v int64) *BackupsInfoForDescribeBackupsOutput {
	s.BackupFileSize = &v
	return s
}

// SetBackupId sets the BackupId field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupId(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupId = &v
	return s
}

// SetBackupMethod sets the BackupMethod field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupMethod(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupMethod = &v
	return s
}

// SetBackupStartTime sets the BackupStartTime field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupStartTime(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupStartTime = &v
	return s
}

// SetBackupStatus sets the BackupStatus field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupStatus(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupStatus = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetBackupType(v string) *BackupsInfoForDescribeBackupsOutput {
	s.BackupType = &v
	return s
}

// SetConsistentTime sets the ConsistentTime field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetConsistentTime(v string) *BackupsInfoForDescribeBackupsOutput {
	s.ConsistentTime = &v
	return s
}

// SetCreateType sets the CreateType field's value.
func (s *BackupsInfoForDescribeBackupsOutput) SetCreateType(v string) *BackupsInfoForDescribeBackupsOutput {
	s.CreateType = &v
	return s
}

type BasicInfoForDescribeDBInstanceDetailOutput struct {
	_ struct{} `type:"structure"`

	BackupUse *int32 `type:"int32"`

	CreateTime *string `type:"string"`

	DBEngine *string `type:"string"`

	DBEngineVersion *string `type:"string"`

	DataSyncMode *string `type:"string"`

	InnerVersion *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceStatus *string `type:"string"`

	InstanceType *string `type:"string"`

	IsLatestVersion *bool `type:"boolean"`

	LowerCaseTableNames *string `type:"string"`

	Memory *int32 `type:"int32"`

	NodeNumber *string `type:"string"`

	NodeSpec *string `type:"string"`

	ProjectName *string `type:"string"`

	RegionId *string `type:"string"`

	StorageSpace *int32 `type:"int32"`

	StorageType *string `type:"string"`

	StorageUse *int32 `type:"int32"`

	TimeZone *string `type:"string"`

	UpdateTime *string `type:"string"`

	VCPU *int32 `type:"int32"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s BasicInfoForDescribeDBInstanceDetailOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BasicInfoForDescribeDBInstanceDetailOutput) GoString() string {
	return s.String()
}

// SetBackupUse sets the BackupUse field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetBackupUse(v int32) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.BackupUse = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetCreateTime(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.CreateTime = &v
	return s
}

// SetDBEngine sets the DBEngine field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetDBEngine(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.DBEngine = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetDBEngineVersion(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.DBEngineVersion = &v
	return s
}

// SetDataSyncMode sets the DataSyncMode field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetDataSyncMode(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.DataSyncMode = &v
	return s
}

// SetInnerVersion sets the InnerVersion field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetInnerVersion(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.InnerVersion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetInstanceId(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetInstanceName(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.InstanceName = &v
	return s
}

// SetInstanceStatus sets the InstanceStatus field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetInstanceStatus(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.InstanceStatus = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetInstanceType(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.InstanceType = &v
	return s
}

// SetIsLatestVersion sets the IsLatestVersion field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetIsLatestVersion(v bool) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.IsLatestVersion = &v
	return s
}

// SetLowerCaseTableNames sets the LowerCaseTableNames field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetLowerCaseTableNames(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.LowerCaseTableNames = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetMemory(v int32) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.Memory = &v
	return s
}

// SetNodeNumber sets the NodeNumber field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetNodeNumber(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.NodeNumber = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetNodeSpec(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.NodeSpec = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetProjectName(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.ProjectName = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetRegionId(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.RegionId = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetStorageSpace(v int32) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.StorageSpace = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetStorageType(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.StorageType = &v
	return s
}

// SetStorageUse sets the StorageUse field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetStorageUse(v int32) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.StorageUse = &v
	return s
}

// SetTimeZone sets the TimeZone field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetTimeZone(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.TimeZone = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetUpdateTime(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.UpdateTime = &v
	return s
}

// SetVCPU sets the VCPU field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetVCPU(v int32) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.VCPU = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetVpcId(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *BasicInfoForDescribeDBInstanceDetailOutput) SetZoneId(v string) *BasicInfoForDescribeDBInstanceDetailOutput {
	s.ZoneId = &v
	return s
}

type ChargeDetailForDescribeDBInstanceDetailOutput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	ChargeEndTime *string `type:"string"`

	ChargeStartTime *string `type:"string"`

	ChargeStatus *string `type:"string"`

	ChargeType *string `type:"string"`

	Number *int32 `type:"int32"`

	OverdueReclaimTime *string `type:"string"`

	OverdueTime *string `type:"string"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s ChargeDetailForDescribeDBInstanceDetailOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargeDetailForDescribeDBInstanceDetailOutput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetAutoRenew(v bool) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.AutoRenew = &v
	return s
}

// SetChargeEndTime sets the ChargeEndTime field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetChargeEndTime(v string) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.ChargeEndTime = &v
	return s
}

// SetChargeStartTime sets the ChargeStartTime field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetChargeStartTime(v string) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.ChargeStartTime = &v
	return s
}

// SetChargeStatus sets the ChargeStatus field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetChargeStatus(v string) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.ChargeStatus = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetChargeType(v string) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.ChargeType = &v
	return s
}

// SetNumber sets the Number field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetNumber(v int32) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.Number = &v
	return s
}

// SetOverdueReclaimTime sets the OverdueReclaimTime field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetOverdueReclaimTime(v string) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.OverdueReclaimTime = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetOverdueTime(v string) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.OverdueTime = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetPeriod(v int32) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ChargeDetailForDescribeDBInstanceDetailOutput) SetPeriodUnit(v string) *ChargeDetailForDescribeDBInstanceDetailOutput {
	s.PeriodUnit = &v
	return s
}

type ChargeDetailForDescribeDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	ChargeEndTime *string `type:"string"`

	ChargeStartTime *string `type:"string"`

	ChargeStatus *string `type:"string"`

	ChargeType *string `type:"string"`

	Number *int32 `type:"int32"`

	OverdueReclaimTime *string `type:"string"`

	OverdueTime *string `type:"string"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s ChargeDetailForDescribeDBInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargeDetailForDescribeDBInstancesOutput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetAutoRenew(v bool) *ChargeDetailForDescribeDBInstancesOutput {
	s.AutoRenew = &v
	return s
}

// SetChargeEndTime sets the ChargeEndTime field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetChargeEndTime(v string) *ChargeDetailForDescribeDBInstancesOutput {
	s.ChargeEndTime = &v
	return s
}

// SetChargeStartTime sets the ChargeStartTime field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetChargeStartTime(v string) *ChargeDetailForDescribeDBInstancesOutput {
	s.ChargeStartTime = &v
	return s
}

// SetChargeStatus sets the ChargeStatus field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetChargeStatus(v string) *ChargeDetailForDescribeDBInstancesOutput {
	s.ChargeStatus = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetChargeType(v string) *ChargeDetailForDescribeDBInstancesOutput {
	s.ChargeType = &v
	return s
}

// SetNumber sets the Number field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetNumber(v int32) *ChargeDetailForDescribeDBInstancesOutput {
	s.Number = &v
	return s
}

// SetOverdueReclaimTime sets the OverdueReclaimTime field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetOverdueReclaimTime(v string) *ChargeDetailForDescribeDBInstancesOutput {
	s.OverdueReclaimTime = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetOverdueTime(v string) *ChargeDetailForDescribeDBInstancesOutput {
	s.OverdueTime = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetPeriod(v int32) *ChargeDetailForDescribeDBInstancesOutput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ChargeDetailForDescribeDBInstancesOutput) SetPeriodUnit(v string) *ChargeDetailForDescribeDBInstancesOutput {
	s.PeriodUnit = &v
	return s
}

type ChargeInfoForCreateDBInstanceInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	ChargeType *string `type:"string"`

	Number *int32 `type:"int32"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s ChargeInfoForCreateDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargeInfoForCreateDBInstanceInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ChargeInfoForCreateDBInstanceInput) SetAutoRenew(v bool) *ChargeInfoForCreateDBInstanceInput {
	s.AutoRenew = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *ChargeInfoForCreateDBInstanceInput) SetChargeType(v string) *ChargeInfoForCreateDBInstanceInput {
	s.ChargeType = &v
	return s
}

// SetNumber sets the Number field's value.
func (s *ChargeInfoForCreateDBInstanceInput) SetNumber(v int32) *ChargeInfoForCreateDBInstanceInput {
	s.Number = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ChargeInfoForCreateDBInstanceInput) SetPeriod(v int32) *ChargeInfoForCreateDBInstanceInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ChargeInfoForCreateDBInstanceInput) SetPeriodUnit(v string) *ChargeInfoForCreateDBInstanceInput {
	s.PeriodUnit = &v
	return s
}

type ChargeInfoForRestoreToNewInstanceInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	ChargeType *string `type:"string"`

	Number *int32 `type:"int32"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s ChargeInfoForRestoreToNewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ChargeInfoForRestoreToNewInstanceInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ChargeInfoForRestoreToNewInstanceInput) SetAutoRenew(v bool) *ChargeInfoForRestoreToNewInstanceInput {
	s.AutoRenew = &v
	return s
}

// SetChargeType sets the ChargeType field's value.
func (s *ChargeInfoForRestoreToNewInstanceInput) SetChargeType(v string) *ChargeInfoForRestoreToNewInstanceInput {
	s.ChargeType = &v
	return s
}

// SetNumber sets the Number field's value.
func (s *ChargeInfoForRestoreToNewInstanceInput) SetNumber(v int32) *ChargeInfoForRestoreToNewInstanceInput {
	s.Number = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ChargeInfoForRestoreToNewInstanceInput) SetPeriod(v int32) *ChargeInfoForRestoreToNewInstanceInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ChargeInfoForRestoreToNewInstanceInput) SetPeriodUnit(v string) *ChargeInfoForRestoreToNewInstanceInput {
	s.PeriodUnit = &v
	return s
}

type ConnectionInfoForDescribeDBInstanceDetailOutput struct {
	_ struct{} `type:"structure"`

	Address []*AddressForDescribeDBInstanceDetailOutput `type:"list"`

	Description *string `type:"string"`

	EnableReadOnly *string `type:"string"`

	EnableReadWriteSplitting *string `type:"string"`

	EndpointId *string `type:"string"`

	EndpointType *string `type:"string"`

	Nodes *string `type:"string"`
}

// String returns the string representation
func (s ConnectionInfoForDescribeDBInstanceDetailOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ConnectionInfoForDescribeDBInstanceDetailOutput) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *ConnectionInfoForDescribeDBInstanceDetailOutput) SetAddress(v []*AddressForDescribeDBInstanceDetailOutput) *ConnectionInfoForDescribeDBInstanceDetailOutput {
	s.Address = v
	return s
}

// SetDescription sets the Description field's value.
func (s *ConnectionInfoForDescribeDBInstanceDetailOutput) SetDescription(v string) *ConnectionInfoForDescribeDBInstanceDetailOutput {
	s.Description = &v
	return s
}

// SetEnableReadOnly sets the EnableReadOnly field's value.
func (s *ConnectionInfoForDescribeDBInstanceDetailOutput) SetEnableReadOnly(v string) *ConnectionInfoForDescribeDBInstanceDetailOutput {
	s.EnableReadOnly = &v
	return s
}

// SetEnableReadWriteSplitting sets the EnableReadWriteSplitting field's value.
func (s *ConnectionInfoForDescribeDBInstanceDetailOutput) SetEnableReadWriteSplitting(v string) *ConnectionInfoForDescribeDBInstanceDetailOutput {
	s.EnableReadWriteSplitting = &v
	return s
}

// SetEndpointId sets the EndpointId field's value.
func (s *ConnectionInfoForDescribeDBInstanceDetailOutput) SetEndpointId(v string) *ConnectionInfoForDescribeDBInstanceDetailOutput {
	s.EndpointId = &v
	return s
}

// SetEndpointType sets the EndpointType field's value.
func (s *ConnectionInfoForDescribeDBInstanceDetailOutput) SetEndpointType(v string) *ConnectionInfoForDescribeDBInstanceDetailOutput {
	s.EndpointType = &v
	return s
}

// SetNodes sets the Nodes field's value.
func (s *ConnectionInfoForDescribeDBInstanceDetailOutput) SetNodes(v string) *ConnectionInfoForDescribeDBInstanceDetailOutput {
	s.Nodes = &v
	return s
}

type CreateBackupInput struct {
	_ struct{} `type:"structure"`

	BackupMeta []*BackupMetaForCreateBackupInput `type:"list"`

	BackupMethod *string `type:"string"`

	BackupType *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateBackupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupInput) GoString() string {
	return s.String()
}

// SetBackupMeta sets the BackupMeta field's value.
func (s *CreateBackupInput) SetBackupMeta(v []*BackupMetaForCreateBackupInput) *CreateBackupInput {
	s.BackupMeta = v
	return s
}

// SetBackupMethod sets the BackupMethod field's value.
func (s *CreateBackupInput) SetBackupMethod(v string) *CreateBackupInput {
	s.BackupMethod = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *CreateBackupInput) SetBackupType(v string) *CreateBackupInput {
	s.BackupType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateBackupInput) SetInstanceId(v string) *CreateBackupInput {
	s.InstanceId = &v
	return s
}

type CreateBackupOutput struct {
	_ struct{} `type:"structure"`

	BackupId *string `type:"string"`
}

// String returns the string representation
func (s CreateBackupOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupOutput) GoString() string {
	return s.String()
}

// SetBackupId sets the BackupId field's value.
func (s *CreateBackupOutput) SetBackupId(v string) *CreateBackupOutput {
	s.BackupId = &v
	return s
}

type CreateDBAccountInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPassword *string `type:"string"`

	AccountPrivilegesInfo []*AccountPrivilegesInfoForCreateDBAccountInput `type:"list"`

	AccountType *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateDBAccountInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBAccountInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *CreateDBAccountInput) SetAccountName(v string) *CreateDBAccountInput {
	s.AccountName = &v
	return s
}

// SetAccountPassword sets the AccountPassword field's value.
func (s *CreateDBAccountInput) SetAccountPassword(v string) *CreateDBAccountInput {
	s.AccountPassword = &v
	return s
}

// SetAccountPrivilegesInfo sets the AccountPrivilegesInfo field's value.
func (s *CreateDBAccountInput) SetAccountPrivilegesInfo(v []*AccountPrivilegesInfoForCreateDBAccountInput) *CreateDBAccountInput {
	s.AccountPrivilegesInfo = v
	return s
}

// SetAccountType sets the AccountType field's value.
func (s *CreateDBAccountInput) SetAccountType(v string) *CreateDBAccountInput {
	s.AccountType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBAccountInput) SetInstanceId(v string) *CreateDBAccountInput {
	s.InstanceId = &v
	return s
}

type CreateDBAccountOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s CreateDBAccountOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBAccountOutput) GoString() string {
	return s.String()
}

type CreateDBInstanceInput struct {
	_ struct{} `type:"structure"`

	ChargeInfo *ChargeInfoForCreateDBInstanceInput `type:"structure"`

	DBEngineVersion *string `type:"string"`

	DBParamGroupId *string `type:"string"`

	DBTimeZone *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	LowerCaseTableNames *string `type:"string"`

	NodeInfo []*NodeInfoForCreateDBInstanceInput `type:"list"`

	NodeNumber *int32 `type:"int32"`

	NodeSpec *string `type:"string"`

	ProjectName *string `type:"string"`

	StorageSpace *int32 `type:"int32"`

	StorageType *string `type:"string"`

	SuperAccountName *string `type:"string"`

	SuperAccountPassword *string `type:"string"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s CreateDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceInput) GoString() string {
	return s.String()
}

// SetChargeInfo sets the ChargeInfo field's value.
func (s *CreateDBInstanceInput) SetChargeInfo(v *ChargeInfoForCreateDBInstanceInput) *CreateDBInstanceInput {
	s.ChargeInfo = v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *CreateDBInstanceInput) SetDBEngineVersion(v string) *CreateDBInstanceInput {
	s.DBEngineVersion = &v
	return s
}

// SetDBParamGroupId sets the DBParamGroupId field's value.
func (s *CreateDBInstanceInput) SetDBParamGroupId(v string) *CreateDBInstanceInput {
	s.DBParamGroupId = &v
	return s
}

// SetDBTimeZone sets the DBTimeZone field's value.
func (s *CreateDBInstanceInput) SetDBTimeZone(v string) *CreateDBInstanceInput {
	s.DBTimeZone = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *CreateDBInstanceInput) SetInstanceName(v string) *CreateDBInstanceInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *CreateDBInstanceInput) SetInstanceType(v string) *CreateDBInstanceInput {
	s.InstanceType = &v
	return s
}

// SetLowerCaseTableNames sets the LowerCaseTableNames field's value.
func (s *CreateDBInstanceInput) SetLowerCaseTableNames(v string) *CreateDBInstanceInput {
	s.LowerCaseTableNames = &v
	return s
}

// SetNodeInfo sets the NodeInfo field's value.
func (s *CreateDBInstanceInput) SetNodeInfo(v []*NodeInfoForCreateDBInstanceInput) *CreateDBInstanceInput {
	s.NodeInfo = v
	return s
}

// SetNodeNumber sets the NodeNumber field's value.
func (s *CreateDBInstanceInput) SetNodeNumber(v int32) *CreateDBInstanceInput {
	s.NodeNumber = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *CreateDBInstanceInput) SetNodeSpec(v string) *CreateDBInstanceInput {
	s.NodeSpec = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateDBInstanceInput) SetProjectName(v string) *CreateDBInstanceInput {
	s.ProjectName = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *CreateDBInstanceInput) SetStorageSpace(v int32) *CreateDBInstanceInput {
	s.StorageSpace = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *CreateDBInstanceInput) SetStorageType(v string) *CreateDBInstanceInput {
	s.StorageType = &v
	return s
}

// SetSuperAccountName sets the SuperAccountName field's value.
func (s *CreateDBInstanceInput) SetSuperAccountName(v string) *CreateDBInstanceInput {
	s.SuperAccountName = &v
	return s
}

// SetSuperAccountPassword sets the SuperAccountPassword field's value.
func (s *CreateDBInstanceInput) SetSuperAccountPassword(v string) *CreateDBInstanceInput {
	s.SuperAccountPassword = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateDBInstanceInput) SetVpcId(v string) *CreateDBInstanceInput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *CreateDBInstanceInput) SetZoneId(v string) *CreateDBInstanceInput {
	s.ZoneId = &v
	return s
}

type CreateDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s CreateDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBInstanceOutput) SetInstanceId(v string) *CreateDBInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderId sets the OrderId field's value.
func (s *CreateDBInstanceOutput) SetOrderId(v string) *CreateDBInstanceOutput {
	s.OrderId = &v
	return s
}

type CreateDatabaseInput struct {
	_ struct{} `type:"structure"`

	CharacterSetName *string `type:"string"`

	DBName *string `type:"string"`

	DatabasePrivilegesInfo []*DatabasePrivilegesInfoForCreateDatabaseInput `type:"list"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateDatabaseInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDatabaseInput) GoString() string {
	return s.String()
}

// SetCharacterSetName sets the CharacterSetName field's value.
func (s *CreateDatabaseInput) SetCharacterSetName(v string) *CreateDatabaseInput {
	s.CharacterSetName = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *CreateDatabaseInput) SetDBName(v string) *CreateDatabaseInput {
	s.DBName = &v
	return s
}

// SetDatabasePrivilegesInfo sets the DatabasePrivilegesInfo field's value.
func (s *CreateDatabaseInput) SetDatabasePrivilegesInfo(v []*DatabasePrivilegesInfoForCreateDatabaseInput) *CreateDatabaseInput {
	s.DatabasePrivilegesInfo = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDatabaseInput) SetInstanceId(v string) *CreateDatabaseInput {
	s.InstanceId = &v
	return s
}

type CreateDatabaseOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s CreateDatabaseOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDatabaseOutput) GoString() string {
	return s.String()
}

type DatabasePrivilegesInfoForCreateDatabaseInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPrivilege *string `type:"string"`

	AccountPrivilegeCustom *string `type:"string"`
}

// String returns the string representation
func (s DatabasePrivilegesInfoForCreateDatabaseInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DatabasePrivilegesInfoForCreateDatabaseInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *DatabasePrivilegesInfoForCreateDatabaseInput) SetAccountName(v string) *DatabasePrivilegesInfoForCreateDatabaseInput {
	s.AccountName = &v
	return s
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *DatabasePrivilegesInfoForCreateDatabaseInput) SetAccountPrivilege(v string) *DatabasePrivilegesInfoForCreateDatabaseInput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeCustom sets the AccountPrivilegeCustom field's value.
func (s *DatabasePrivilegesInfoForCreateDatabaseInput) SetAccountPrivilegeCustom(v string) *DatabasePrivilegesInfoForCreateDatabaseInput {
	s.AccountPrivilegeCustom = &v
	return s
}

type DatabasePrivilegesInfoForDescribeDatabasesOutput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPrivilege *string `type:"string"`

	AccountPrivilegeCustom *string `type:"string"`
}

// String returns the string representation
func (s DatabasePrivilegesInfoForDescribeDatabasesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DatabasePrivilegesInfoForDescribeDatabasesOutput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *DatabasePrivilegesInfoForDescribeDatabasesOutput) SetAccountName(v string) *DatabasePrivilegesInfoForDescribeDatabasesOutput {
	s.AccountName = &v
	return s
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *DatabasePrivilegesInfoForDescribeDatabasesOutput) SetAccountPrivilege(v string) *DatabasePrivilegesInfoForDescribeDatabasesOutput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeCustom sets the AccountPrivilegeCustom field's value.
func (s *DatabasePrivilegesInfoForDescribeDatabasesOutput) SetAccountPrivilegeCustom(v string) *DatabasePrivilegesInfoForDescribeDatabasesOutput {
	s.AccountPrivilegeCustom = &v
	return s
}

type DatabasesInfoForDescribeDatabasesOutput struct {
	_ struct{} `type:"structure"`

	CharacterSetName *string `type:"string"`

	DBName *string `type:"string"`

	DBStatus *string `type:"string"`

	DatabasePrivilegesInfo []*DatabasePrivilegesInfoForDescribeDatabasesOutput `type:"list"`
}

// String returns the string representation
func (s DatabasesInfoForDescribeDatabasesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DatabasesInfoForDescribeDatabasesOutput) GoString() string {
	return s.String()
}

// SetCharacterSetName sets the CharacterSetName field's value.
func (s *DatabasesInfoForDescribeDatabasesOutput) SetCharacterSetName(v string) *DatabasesInfoForDescribeDatabasesOutput {
	s.CharacterSetName = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *DatabasesInfoForDescribeDatabasesOutput) SetDBName(v string) *DatabasesInfoForDescribeDatabasesOutput {
	s.DBName = &v
	return s
}

// SetDBStatus sets the DBStatus field's value.
func (s *DatabasesInfoForDescribeDatabasesOutput) SetDBStatus(v string) *DatabasesInfoForDescribeDatabasesOutput {
	s.DBStatus = &v
	return s
}

// SetDatabasePrivilegesInfo sets the DatabasePrivilegesInfo field's value.
func (s *DatabasesInfoForDescribeDatabasesOutput) SetDatabasePrivilegesInfo(v []*DatabasePrivilegesInfoForDescribeDatabasesOutput) *DatabasesInfoForDescribeDatabasesOutput {
	s.DatabasePrivilegesInfo = v
	return s
}

type DeleteBackupInput struct {
	_ struct{} `type:"structure"`

	BackupId *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteBackupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteBackupInput) GoString() string {
	return s.String()
}

// SetBackupId sets the BackupId field's value.
func (s *DeleteBackupInput) SetBackupId(v string) *DeleteBackupInput {
	s.BackupId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteBackupInput) SetInstanceId(v string) *DeleteBackupInput {
	s.InstanceId = &v
	return s
}

type DeleteBackupOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteBackupOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteBackupOutput) GoString() string {
	return s.String()
}

type DeleteDBAccountInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDBAccountInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBAccountInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *DeleteDBAccountInput) SetAccountName(v string) *DeleteDBAccountInput {
	s.AccountName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteDBAccountInput) SetInstanceId(v string) *DeleteDBAccountInput {
	s.InstanceId = &v
	return s
}

type DeleteDBAccountOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDBAccountOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBAccountOutput) GoString() string {
	return s.String()
}

type DeleteDBInstanceInput struct {
	_ struct{} `type:"structure"`

	DataKeepPolicy *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceInput) GoString() string {
	return s.String()
}

// SetDataKeepPolicy sets the DataKeepPolicy field's value.
func (s *DeleteDBInstanceInput) SetDataKeepPolicy(v string) *DeleteDBInstanceInput {
	s.DataKeepPolicy = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteDBInstanceInput) SetInstanceId(v string) *DeleteDBInstanceInput {
	s.InstanceId = &v
	return s
}

type DeleteDBInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceOutput) GoString() string {
	return s.String()
}

type DeleteDatabaseInput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDatabaseInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDatabaseInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *DeleteDatabaseInput) SetDBName(v string) *DeleteDatabaseInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteDatabaseInput) SetInstanceId(v string) *DeleteDatabaseInput {
	s.InstanceId = &v
	return s
}

type DeleteDatabaseOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDatabaseOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDatabaseOutput) GoString() string {
	return s.String()
}

type DescribeAvailabilityZonesInput struct {
	_ struct{} `type:"structure"`

	RegionId *string `type:"string"`
}

// String returns the string representation
func (s DescribeAvailabilityZonesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailabilityZonesInput) GoString() string {
	return s.String()
}

// SetRegionId sets the RegionId field's value.
func (s *DescribeAvailabilityZonesInput) SetRegionId(v string) *DescribeAvailabilityZonesInput {
	s.RegionId = &v
	return s
}

type DescribeAvailabilityZonesOutput struct {
	_ struct{} `type:"structure"`

	RegionId *string `type:"string"`

	Zones []*ZoneForDescribeAvailabilityZonesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeAvailabilityZonesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailabilityZonesOutput) GoString() string {
	return s.String()
}

// SetRegionId sets the RegionId field's value.
func (s *DescribeAvailabilityZonesOutput) SetRegionId(v string) *DescribeAvailabilityZonesOutput {
	s.RegionId = &v
	return s
}

// SetZones sets the Zones field's value.
func (s *DescribeAvailabilityZonesOutput) SetZones(v []*ZoneForDescribeAvailabilityZonesOutput) *DescribeAvailabilityZonesOutput {
	s.Zones = v
	return s
}

type DescribeBackupPolicyInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeBackupPolicyInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPolicyInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupPolicyInput) SetInstanceId(v string) *DescribeBackupPolicyInput {
	s.InstanceId = &v
	return s
}

type DescribeBackupPolicyOutput struct {
	_ struct{} `type:"structure"`

	BackupRetentionPeriod *int32 `type:"int32"`

	BackupTime *string `type:"string"`

	FullBackupPeriod *string `type:"string"`

	IncrementBackupPeriod *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeBackupPolicyOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPolicyOutput) GoString() string {
	return s.String()
}

// SetBackupRetentionPeriod sets the BackupRetentionPeriod field's value.
func (s *DescribeBackupPolicyOutput) SetBackupRetentionPeriod(v int32) *DescribeBackupPolicyOutput {
	s.BackupRetentionPeriod = &v
	return s
}

// SetBackupTime sets the BackupTime field's value.
func (s *DescribeBackupPolicyOutput) SetBackupTime(v string) *DescribeBackupPolicyOutput {
	s.BackupTime = &v
	return s
}

// SetFullBackupPeriod sets the FullBackupPeriod field's value.
func (s *DescribeBackupPolicyOutput) SetFullBackupPeriod(v string) *DescribeBackupPolicyOutput {
	s.FullBackupPeriod = &v
	return s
}

// SetIncrementBackupPeriod sets the IncrementBackupPeriod field's value.
func (s *DescribeBackupPolicyOutput) SetIncrementBackupPeriod(v string) *DescribeBackupPolicyOutput {
	s.IncrementBackupPeriod = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupPolicyOutput) SetInstanceId(v string) *DescribeBackupPolicyOutput {
	s.InstanceId = &v
	return s
}

type DescribeBackupsInput struct {
	_ struct{} `type:"structure"`

	BackupEndTime *string `type:"string"`

	BackupMethod *string `type:"string"`

	BackupStartTime *string `type:"string"`

	BackupStatus *string `type:"string"`

	BackupType *string `type:"string"`

	InstanceId *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeBackupsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupsInput) GoString() string {
	return s.String()
}

// SetBackupEndTime sets the BackupEndTime field's value.
func (s *DescribeBackupsInput) SetBackupEndTime(v string) *DescribeBackupsInput {
	s.BackupEndTime = &v
	return s
}

// SetBackupMethod sets the BackupMethod field's value.
func (s *DescribeBackupsInput) SetBackupMethod(v string) *DescribeBackupsInput {
	s.BackupMethod = &v
	return s
}

// SetBackupStartTime sets the BackupStartTime field's value.
func (s *DescribeBackupsInput) SetBackupStartTime(v string) *DescribeBackupsInput {
	s.BackupStartTime = &v
	return s
}

// SetBackupStatus sets the BackupStatus field's value.
func (s *DescribeBackupsInput) SetBackupStatus(v string) *DescribeBackupsInput {
	s.BackupStatus = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *DescribeBackupsInput) SetBackupType(v string) *DescribeBackupsInput {
	s.BackupType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupsInput) SetInstanceId(v string) *DescribeBackupsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeBackupsInput) SetPageNumber(v int32) *DescribeBackupsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeBackupsInput) SetPageSize(v int32) *DescribeBackupsInput {
	s.PageSize = &v
	return s
}

type DescribeBackupsOutput struct {
	_ struct{} `type:"structure"`

	BackupsInfo []*BackupsInfoForDescribeBackupsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeBackupsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupsOutput) GoString() string {
	return s.String()
}

// SetBackupsInfo sets the BackupsInfo field's value.
func (s *DescribeBackupsOutput) SetBackupsInfo(v []*BackupsInfoForDescribeBackupsOutput) *DescribeBackupsOutput {
	s.BackupsInfo = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeBackupsOutput) SetTotal(v int32) *DescribeBackupsOutput {
	s.Total = &v
	return s
}

type DescribeDBAccountsInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	InstanceId *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDBAccountsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBAccountsInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *DescribeDBAccountsInput) SetAccountName(v string) *DescribeDBAccountsInput {
	s.AccountName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBAccountsInput) SetInstanceId(v string) *DescribeDBAccountsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDBAccountsInput) SetPageNumber(v int32) *DescribeDBAccountsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDBAccountsInput) SetPageSize(v int32) *DescribeDBAccountsInput {
	s.PageSize = &v
	return s
}

type DescribeDBAccountsOutput struct {
	_ struct{} `type:"structure"`

	AccountsInfo []*AccountsInfoForDescribeDBAccountsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDBAccountsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBAccountsOutput) GoString() string {
	return s.String()
}

// SetAccountsInfo sets the AccountsInfo field's value.
func (s *DescribeDBAccountsOutput) SetAccountsInfo(v []*AccountsInfoForDescribeDBAccountsOutput) *DescribeDBAccountsOutput {
	s.AccountsInfo = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeDBAccountsOutput) SetTotal(v int32) *DescribeDBAccountsOutput {
	s.Total = &v
	return s
}

type DescribeDBInstanceDetailInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstanceDetailInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceDetailInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstanceDetailInput) SetInstanceId(v string) *DescribeDBInstanceDetailInput {
	s.InstanceId = &v
	return s
}

type DescribeDBInstanceDetailOutput struct {
	_ struct{} `type:"structure"`

	BasicInfo *BasicInfoForDescribeDBInstanceDetailOutput `type:"structure"`

	ChargeDetail *ChargeDetailForDescribeDBInstanceDetailOutput `type:"structure"`

	ConnectionInfo []*ConnectionInfoForDescribeDBInstanceDetailOutput `type:"list"`

	NodeDetailInfo []*NodeDetailInfoForDescribeDBInstanceDetailOutput `type:"list"`
}

// String returns the string representation
func (s DescribeDBInstanceDetailOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceDetailOutput) GoString() string {
	return s.String()
}

// SetBasicInfo sets the BasicInfo field's value.
func (s *DescribeDBInstanceDetailOutput) SetBasicInfo(v *BasicInfoForDescribeDBInstanceDetailOutput) *DescribeDBInstanceDetailOutput {
	s.BasicInfo = v
	return s
}

// SetChargeDetail sets the ChargeDetail field's value.
func (s *DescribeDBInstanceDetailOutput) SetChargeDetail(v *ChargeDetailForDescribeDBInstanceDetailOutput) *DescribeDBInstanceDetailOutput {
	s.ChargeDetail = v
	return s
}

// SetConnectionInfo sets the ConnectionInfo field's value.
func (s *DescribeDBInstanceDetailOutput) SetConnectionInfo(v []*ConnectionInfoForDescribeDBInstanceDetailOutput) *DescribeDBInstanceDetailOutput {
	s.ConnectionInfo = v
	return s
}

// SetNodeDetailInfo sets the NodeDetailInfo field's value.
func (s *DescribeDBInstanceDetailOutput) SetNodeDetailInfo(v []*NodeDetailInfoForDescribeDBInstanceDetailOutput) *DescribeDBInstanceDetailOutput {
	s.NodeDetailInfo = v
	return s
}

type DescribeDBInstancePriceDetailInput struct {
	_ struct{} `type:"structure"`

	ChargeType *string `type:"string"`

	NodeNumber *string `type:"string"`

	NodeSpec *string `type:"string"`

	Number *int32 `type:"int32"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	StorageSpace *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDBInstancePriceDetailInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancePriceDetailInput) GoString() string {
	return s.String()
}

// SetChargeType sets the ChargeType field's value.
func (s *DescribeDBInstancePriceDetailInput) SetChargeType(v string) *DescribeDBInstancePriceDetailInput {
	s.ChargeType = &v
	return s
}

// SetNodeNumber sets the NodeNumber field's value.
func (s *DescribeDBInstancePriceDetailInput) SetNodeNumber(v string) *DescribeDBInstancePriceDetailInput {
	s.NodeNumber = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *DescribeDBInstancePriceDetailInput) SetNodeSpec(v string) *DescribeDBInstancePriceDetailInput {
	s.NodeSpec = &v
	return s
}

// SetNumber sets the Number field's value.
func (s *DescribeDBInstancePriceDetailInput) SetNumber(v int32) *DescribeDBInstancePriceDetailInput {
	s.Number = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *DescribeDBInstancePriceDetailInput) SetPeriod(v int32) *DescribeDBInstancePriceDetailInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *DescribeDBInstancePriceDetailInput) SetPeriodUnit(v string) *DescribeDBInstancePriceDetailInput {
	s.PeriodUnit = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *DescribeDBInstancePriceDetailInput) SetStorageSpace(v int32) *DescribeDBInstancePriceDetailInput {
	s.StorageSpace = &v
	return s
}

type DescribeDBInstancePriceDetailOutput struct {
	_ struct{} `type:"structure"`

	ChargeType *string `type:"string"`

	Currency *string `type:"string"`

	DiscountPrice *float64 `type:"double"`

	OriginalPrice *float64 `type:"double"`

	PayablePrice *float64 `type:"double"`
}

// String returns the string representation
func (s DescribeDBInstancePriceDetailOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancePriceDetailOutput) GoString() string {
	return s.String()
}

// SetChargeType sets the ChargeType field's value.
func (s *DescribeDBInstancePriceDetailOutput) SetChargeType(v string) *DescribeDBInstancePriceDetailOutput {
	s.ChargeType = &v
	return s
}

// SetCurrency sets the Currency field's value.
func (s *DescribeDBInstancePriceDetailOutput) SetCurrency(v string) *DescribeDBInstancePriceDetailOutput {
	s.Currency = &v
	return s
}

// SetDiscountPrice sets the DiscountPrice field's value.
func (s *DescribeDBInstancePriceDetailOutput) SetDiscountPrice(v float64) *DescribeDBInstancePriceDetailOutput {
	s.DiscountPrice = &v
	return s
}

// SetOriginalPrice sets the OriginalPrice field's value.
func (s *DescribeDBInstancePriceDetailOutput) SetOriginalPrice(v float64) *DescribeDBInstancePriceDetailOutput {
	s.OriginalPrice = &v
	return s
}

// SetPayablePrice sets the PayablePrice field's value.
func (s *DescribeDBInstancePriceDetailOutput) SetPayablePrice(v float64) *DescribeDBInstancePriceDetailOutput {
	s.PayablePrice = &v
	return s
}

type DescribeDBInstanceSpecsInput struct {
	_ struct{} `type:"structure"`

	DBEngineVersion *string `type:"string"`

	InstanceType *string `type:"string"`

	SpecCode *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstanceSpecsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceSpecsInput) GoString() string {
	return s.String()
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *DescribeDBInstanceSpecsInput) SetDBEngineVersion(v string) *DescribeDBInstanceSpecsInput {
	s.DBEngineVersion = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeDBInstanceSpecsInput) SetInstanceType(v string) *DescribeDBInstanceSpecsInput {
	s.InstanceType = &v
	return s
}

// SetSpecCode sets the SpecCode field's value.
func (s *DescribeDBInstanceSpecsInput) SetSpecCode(v string) *DescribeDBInstanceSpecsInput {
	s.SpecCode = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeDBInstanceSpecsInput) SetZoneId(v string) *DescribeDBInstanceSpecsInput {
	s.ZoneId = &v
	return s
}

type DescribeDBInstanceSpecsOutput struct {
	_ struct{} `type:"structure"`

	InstanceSpecsInfo []*InstanceSpecsInfoForDescribeDBInstanceSpecsOutput `type:"list"`
}

// String returns the string representation
func (s DescribeDBInstanceSpecsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstanceSpecsOutput) GoString() string {
	return s.String()
}

// SetInstanceSpecsInfo sets the InstanceSpecsInfo field's value.
func (s *DescribeDBInstanceSpecsOutput) SetInstanceSpecsInfo(v []*InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) *DescribeDBInstanceSpecsOutput {
	s.InstanceSpecsInfo = v
	return s
}

type DescribeDBInstancesInput struct {
	_ struct{} `type:"structure"`

	ChargeType *string `type:"string"`

	CreateTimeEnd *string `type:"string"`

	CreateTimeStart *string `type:"string"`

	DBEngineVersion *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceStatus *string `type:"string"`

	InstanceType *string `type:"string"`

	NodeSpec *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TenantId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancesInput) GoString() string {
	return s.String()
}

// SetChargeType sets the ChargeType field's value.
func (s *DescribeDBInstancesInput) SetChargeType(v string) *DescribeDBInstancesInput {
	s.ChargeType = &v
	return s
}

// SetCreateTimeEnd sets the CreateTimeEnd field's value.
func (s *DescribeDBInstancesInput) SetCreateTimeEnd(v string) *DescribeDBInstancesInput {
	s.CreateTimeEnd = &v
	return s
}

// SetCreateTimeStart sets the CreateTimeStart field's value.
func (s *DescribeDBInstancesInput) SetCreateTimeStart(v string) *DescribeDBInstancesInput {
	s.CreateTimeStart = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *DescribeDBInstancesInput) SetDBEngineVersion(v string) *DescribeDBInstancesInput {
	s.DBEngineVersion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDBInstancesInput) SetInstanceId(v string) *DescribeDBInstancesInput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *DescribeDBInstancesInput) SetInstanceName(v string) *DescribeDBInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceStatus sets the InstanceStatus field's value.
func (s *DescribeDBInstancesInput) SetInstanceStatus(v string) *DescribeDBInstancesInput {
	s.InstanceStatus = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeDBInstancesInput) SetInstanceType(v string) *DescribeDBInstancesInput {
	s.InstanceType = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *DescribeDBInstancesInput) SetNodeSpec(v string) *DescribeDBInstancesInput {
	s.NodeSpec = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDBInstancesInput) SetPageNumber(v int32) *DescribeDBInstancesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDBInstancesInput) SetPageSize(v int32) *DescribeDBInstancesInput {
	s.PageSize = &v
	return s
}

// SetTenantId sets the TenantId field's value.
func (s *DescribeDBInstancesInput) SetTenantId(v string) *DescribeDBInstancesInput {
	s.TenantId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeDBInstancesInput) SetZoneId(v string) *DescribeDBInstancesInput {
	s.ZoneId = &v
	return s
}

type DescribeDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	InstancesInfo []*InstancesInfoForDescribeDBInstancesOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDBInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancesOutput) GoString() string {
	return s.String()
}

// SetInstancesInfo sets the InstancesInfo field's value.
func (s *DescribeDBInstancesOutput) SetInstancesInfo(v []*InstancesInfoForDescribeDBInstancesOutput) *DescribeDBInstancesOutput {
	s.InstancesInfo = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeDBInstancesOutput) SetTotal(v int32) *DescribeDBInstancesOutput {
	s.Total = &v
	return s
}

type DescribeDatabasesInput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	InstanceId *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDatabasesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDatabasesInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *DescribeDatabasesInput) SetDBName(v string) *DescribeDatabasesInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeDatabasesInput) SetInstanceId(v string) *DescribeDatabasesInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDatabasesInput) SetPageNumber(v int32) *DescribeDatabasesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDatabasesInput) SetPageSize(v int32) *DescribeDatabasesInput {
	s.PageSize = &v
	return s
}

type DescribeDatabasesOutput struct {
	_ struct{} `type:"structure"`

	DatabasesInfo []*DatabasesInfoForDescribeDatabasesOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeDatabasesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDatabasesOutput) GoString() string {
	return s.String()
}

// SetDatabasesInfo sets the DatabasesInfo field's value.
func (s *DescribeDatabasesOutput) SetDatabasesInfo(v []*DatabasesInfoForDescribeDatabasesOutput) *DescribeDatabasesOutput {
	s.DatabasesInfo = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeDatabasesOutput) SetTotal(v int32) *DescribeDatabasesOutput {
	s.Total = &v
	return s
}

type DescribeErrorLogsInput struct {
	_ struct{} `type:"structure"`

	ErrorLevel *string `type:"string"`

	ErrorLogEndTime *string `type:"string"`

	ErrorLogStartTime *string `type:"string"`

	InstanceId *string `type:"string"`

	NodeId *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeErrorLogsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeErrorLogsInput) GoString() string {
	return s.String()
}

// SetErrorLevel sets the ErrorLevel field's value.
func (s *DescribeErrorLogsInput) SetErrorLevel(v string) *DescribeErrorLogsInput {
	s.ErrorLevel = &v
	return s
}

// SetErrorLogEndTime sets the ErrorLogEndTime field's value.
func (s *DescribeErrorLogsInput) SetErrorLogEndTime(v string) *DescribeErrorLogsInput {
	s.ErrorLogEndTime = &v
	return s
}

// SetErrorLogStartTime sets the ErrorLogStartTime field's value.
func (s *DescribeErrorLogsInput) SetErrorLogStartTime(v string) *DescribeErrorLogsInput {
	s.ErrorLogStartTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeErrorLogsInput) SetInstanceId(v string) *DescribeErrorLogsInput {
	s.InstanceId = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *DescribeErrorLogsInput) SetNodeId(v string) *DescribeErrorLogsInput {
	s.NodeId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeErrorLogsInput) SetPageNumber(v int32) *DescribeErrorLogsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeErrorLogsInput) SetPageSize(v int32) *DescribeErrorLogsInput {
	s.PageSize = &v
	return s
}

type DescribeErrorLogsOutput struct {
	_ struct{} `type:"structure"`

	ErrorLog []*ErrorLogForDescribeErrorLogsOutput `type:"list"`

	InstanceId *string `type:"string"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeErrorLogsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeErrorLogsOutput) GoString() string {
	return s.String()
}

// SetErrorLog sets the ErrorLog field's value.
func (s *DescribeErrorLogsOutput) SetErrorLog(v []*ErrorLogForDescribeErrorLogsOutput) *DescribeErrorLogsOutput {
	s.ErrorLog = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeErrorLogsOutput) SetInstanceId(v string) *DescribeErrorLogsOutput {
	s.InstanceId = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeErrorLogsOutput) SetTotal(v int32) *DescribeErrorLogsOutput {
	s.Total = &v
	return s
}

type DescribeRecoverableTimeInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeRecoverableTimeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRecoverableTimeInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeRecoverableTimeInput) SetInstanceId(v string) *DescribeRecoverableTimeInput {
	s.InstanceId = &v
	return s
}

type DescribeRecoverableTimeOutput struct {
	_ struct{} `type:"structure"`

	RecoverableTimeInfo []*RecoverableTimeInfoForDescribeRecoverableTimeOutput `type:"list"`
}

// String returns the string representation
func (s DescribeRecoverableTimeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRecoverableTimeOutput) GoString() string {
	return s.String()
}

// SetRecoverableTimeInfo sets the RecoverableTimeInfo field's value.
func (s *DescribeRecoverableTimeOutput) SetRecoverableTimeInfo(v []*RecoverableTimeInfoForDescribeRecoverableTimeOutput) *DescribeRecoverableTimeOutput {
	s.RecoverableTimeInfo = v
	return s
}

type DescribeRegionsInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DescribeRegionsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRegionsInput) GoString() string {
	return s.String()
}

type DescribeRegionsOutput struct {
	_ struct{} `type:"structure"`

	Regions []*RegionForDescribeRegionsOutput `type:"list"`
}

// String returns the string representation
func (s DescribeRegionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRegionsOutput) GoString() string {
	return s.String()
}

// SetRegions sets the Regions field's value.
func (s *DescribeRegionsOutput) SetRegions(v []*RegionForDescribeRegionsOutput) *DescribeRegionsOutput {
	s.Regions = v
	return s
}

type DescribeSlowLogsInput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	InstanceId *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	QueryEndTime *string `type:"string"`

	QueryStartTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeSlowLogsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSlowLogsInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *DescribeSlowLogsInput) SetDBName(v string) *DescribeSlowLogsInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeSlowLogsInput) SetInstanceId(v string) *DescribeSlowLogsInput {
	s.InstanceId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSlowLogsInput) SetPageNumber(v int32) *DescribeSlowLogsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSlowLogsInput) SetPageSize(v int32) *DescribeSlowLogsInput {
	s.PageSize = &v
	return s
}

// SetQueryEndTime sets the QueryEndTime field's value.
func (s *DescribeSlowLogsInput) SetQueryEndTime(v string) *DescribeSlowLogsInput {
	s.QueryEndTime = &v
	return s
}

// SetQueryStartTime sets the QueryStartTime field's value.
func (s *DescribeSlowLogsInput) SetQueryStartTime(v string) *DescribeSlowLogsInput {
	s.QueryStartTime = &v
	return s
}

type DescribeSlowLogsOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	SlowQuery []*SlowQueryForDescribeSlowLogsOutput `type:"list"`

	Total *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeSlowLogsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSlowLogsOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeSlowLogsOutput) SetInstanceId(v string) *DescribeSlowLogsOutput {
	s.InstanceId = &v
	return s
}

// SetSlowQuery sets the SlowQuery field's value.
func (s *DescribeSlowLogsOutput) SetSlowQuery(v []*SlowQueryForDescribeSlowLogsOutput) *DescribeSlowLogsOutput {
	s.SlowQuery = v
	return s
}

// SetTotal sets the Total field's value.
func (s *DescribeSlowLogsOutput) SetTotal(v int32) *DescribeSlowLogsOutput {
	s.Total = &v
	return s
}

type ErrorLogForDescribeErrorLogsOutput struct {
	_ struct{} `type:"structure"`

	CreateTime *string `type:"string"`

	LogInfo *string `type:"string"`

	LogLevel *string `type:"string"`

	NodeId *string `type:"string"`
}

// String returns the string representation
func (s ErrorLogForDescribeErrorLogsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorLogForDescribeErrorLogsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetCreateTime(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.CreateTime = &v
	return s
}

// SetLogInfo sets the LogInfo field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetLogInfo(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.LogInfo = &v
	return s
}

// SetLogLevel sets the LogLevel field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetLogLevel(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.LogLevel = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *ErrorLogForDescribeErrorLogsOutput) SetNodeId(v string) *ErrorLogForDescribeErrorLogsOutput {
	s.NodeId = &v
	return s
}

type InstanceSpecsInfoForDescribeDBInstanceSpecsOutput struct {
	_ struct{} `type:"structure"`

	Connection *int32 `type:"int32"`

	DBEngineVersion *string `type:"string"`

	IOPS *int32 `type:"int32"`

	InstanceType *string `type:"string"`

	Memory *int32 `type:"int32"`

	QPS *int32 `type:"int32"`

	RegionId *string `type:"string"`

	SpecCode *string `type:"string"`

	SpecStatus *string `type:"string"`

	StorageMax *int32 `type:"int32"`

	StorageMin *int32 `type:"int32"`

	StorageStep *int32 `type:"int32"`

	VCPU *int32 `type:"int32"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) GoString() string {
	return s.String()
}

// SetConnection sets the Connection field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetConnection(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.Connection = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetDBEngineVersion(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.DBEngineVersion = &v
	return s
}

// SetIOPS sets the IOPS field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetIOPS(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.IOPS = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetInstanceType(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.InstanceType = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetMemory(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.Memory = &v
	return s
}

// SetQPS sets the QPS field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetQPS(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.QPS = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetRegionId(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.RegionId = &v
	return s
}

// SetSpecCode sets the SpecCode field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetSpecCode(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.SpecCode = &v
	return s
}

// SetSpecStatus sets the SpecStatus field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetSpecStatus(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.SpecStatus = &v
	return s
}

// SetStorageMax sets the StorageMax field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetStorageMax(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.StorageMax = &v
	return s
}

// SetStorageMin sets the StorageMin field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetStorageMin(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.StorageMin = &v
	return s
}

// SetStorageStep sets the StorageStep field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetStorageStep(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.StorageStep = &v
	return s
}

// SetVCPU sets the VCPU field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetVCPU(v int32) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.VCPU = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput) SetZoneId(v string) *InstanceSpecsInfoForDescribeDBInstanceSpecsOutput {
	s.ZoneId = &v
	return s
}

type InstancesInfoForDescribeDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	ChargeDetail *ChargeDetailForDescribeDBInstancesOutput `type:"structure"`

	CreateTime *string `type:"string"`

	DBEngineVersion *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceStatus *string `type:"string"`

	InstanceType *string `type:"string"`

	LowerCaseTableNames *string `type:"string"`

	NodeDetailInfo []*NodeDetailInfoForDescribeDBInstancesOutput `type:"list"`

	NodeNumber *int32 `type:"int32"`

	NodeSpec *string `type:"string"`

	Port *string `type:"string"`

	ProjectName *string `type:"string"`

	RegionId *string `type:"string"`

	StorageSpace *int32 `type:"int32"`

	StorageType *string `type:"string"`

	StorageUse *int32 `type:"int32"`

	TimeZone *string `type:"string"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s InstancesInfoForDescribeDBInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstancesInfoForDescribeDBInstancesOutput) GoString() string {
	return s.String()
}

// SetChargeDetail sets the ChargeDetail field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetChargeDetail(v *ChargeDetailForDescribeDBInstancesOutput) *InstancesInfoForDescribeDBInstancesOutput {
	s.ChargeDetail = v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetCreateTime(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.CreateTime = &v
	return s
}

// SetDBEngineVersion sets the DBEngineVersion field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetDBEngineVersion(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.DBEngineVersion = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetInstanceId(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetInstanceName(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.InstanceName = &v
	return s
}

// SetInstanceStatus sets the InstanceStatus field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetInstanceStatus(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.InstanceStatus = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetInstanceType(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.InstanceType = &v
	return s
}

// SetLowerCaseTableNames sets the LowerCaseTableNames field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetLowerCaseTableNames(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.LowerCaseTableNames = &v
	return s
}

// SetNodeDetailInfo sets the NodeDetailInfo field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetNodeDetailInfo(v []*NodeDetailInfoForDescribeDBInstancesOutput) *InstancesInfoForDescribeDBInstancesOutput {
	s.NodeDetailInfo = v
	return s
}

// SetNodeNumber sets the NodeNumber field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetNodeNumber(v int32) *InstancesInfoForDescribeDBInstancesOutput {
	s.NodeNumber = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetNodeSpec(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.NodeSpec = &v
	return s
}

// SetPort sets the Port field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetPort(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.Port = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetProjectName(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.ProjectName = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetRegionId(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.RegionId = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetStorageSpace(v int32) *InstancesInfoForDescribeDBInstancesOutput {
	s.StorageSpace = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetStorageType(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.StorageType = &v
	return s
}

// SetStorageUse sets the StorageUse field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetStorageUse(v int32) *InstancesInfoForDescribeDBInstancesOutput {
	s.StorageUse = &v
	return s
}

// SetTimeZone sets the TimeZone field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetTimeZone(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.TimeZone = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetVpcId(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *InstancesInfoForDescribeDBInstancesOutput) SetZoneId(v string) *InstancesInfoForDescribeDBInstancesOutput {
	s.ZoneId = &v
	return s
}

type ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput struct {
	_ struct{} `type:"structure"`

	ActionType *string `type:"string"`

	DBName *string `type:"string"`

	Privilege *string `type:"string"`

	PrivilegeCustom *string `type:"string"`
}

// String returns the string representation
func (s ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput) GoString() string {
	return s.String()
}

// SetActionType sets the ActionType field's value.
func (s *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput) SetActionType(v string) *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput {
	s.ActionType = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput) SetDBName(v string) *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput {
	s.DBName = &v
	return s
}

// SetPrivilege sets the Privilege field's value.
func (s *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput) SetPrivilege(v string) *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput {
	s.Privilege = &v
	return s
}

// SetPrivilegeCustom sets the PrivilegeCustom field's value.
func (s *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput) SetPrivilegeCustom(v string) *ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput {
	s.PrivilegeCustom = &v
	return s
}

type ModifyBackupPolicyInput struct {
	_ struct{} `type:"structure"`

	BackupRetentionPeriod *int32 `type:"int32"`

	BackupTime *string `type:"string"`

	FullBackupPeriod *string `type:"string"`

	IncrementBackupPeriod *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ModifyBackupPolicyInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBackupPolicyInput) GoString() string {
	return s.String()
}

// SetBackupRetentionPeriod sets the BackupRetentionPeriod field's value.
func (s *ModifyBackupPolicyInput) SetBackupRetentionPeriod(v int32) *ModifyBackupPolicyInput {
	s.BackupRetentionPeriod = &v
	return s
}

// SetBackupTime sets the BackupTime field's value.
func (s *ModifyBackupPolicyInput) SetBackupTime(v string) *ModifyBackupPolicyInput {
	s.BackupTime = &v
	return s
}

// SetFullBackupPeriod sets the FullBackupPeriod field's value.
func (s *ModifyBackupPolicyInput) SetFullBackupPeriod(v string) *ModifyBackupPolicyInput {
	s.FullBackupPeriod = &v
	return s
}

// SetIncrementBackupPeriod sets the IncrementBackupPeriod field's value.
func (s *ModifyBackupPolicyInput) SetIncrementBackupPeriod(v string) *ModifyBackupPolicyInput {
	s.IncrementBackupPeriod = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyBackupPolicyInput) SetInstanceId(v string) *ModifyBackupPolicyInput {
	s.InstanceId = &v
	return s
}

type ModifyBackupPolicyOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyBackupPolicyOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBackupPolicyOutput) GoString() string {
	return s.String()
}

type ModifyDBAccountPrivilegeInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	InstanceId *string `type:"string"`

	ModifyAccountPrivilegesInfo []*ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput `type:"list"`
}

// String returns the string representation
func (s ModifyDBAccountPrivilegeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBAccountPrivilegeInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *ModifyDBAccountPrivilegeInput) SetAccountName(v string) *ModifyDBAccountPrivilegeInput {
	s.AccountName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBAccountPrivilegeInput) SetInstanceId(v string) *ModifyDBAccountPrivilegeInput {
	s.InstanceId = &v
	return s
}

// SetModifyAccountPrivilegesInfo sets the ModifyAccountPrivilegesInfo field's value.
func (s *ModifyDBAccountPrivilegeInput) SetModifyAccountPrivilegesInfo(v []*ModifyAccountPrivilegesInfoForModifyDBAccountPrivilegeInput) *ModifyDBAccountPrivilegeInput {
	s.ModifyAccountPrivilegesInfo = v
	return s
}

type ModifyDBAccountPrivilegeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyDBAccountPrivilegeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBAccountPrivilegeOutput) GoString() string {
	return s.String()
}

type ModifyDBInstanceNameInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	InstanceNewName *string `type:"string"`
}

// String returns the string representation
func (s ModifyDBInstanceNameInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceNameInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceNameInput) SetInstanceId(v string) *ModifyDBInstanceNameInput {
	s.InstanceId = &v
	return s
}

// SetInstanceNewName sets the InstanceNewName field's value.
func (s *ModifyDBInstanceNameInput) SetInstanceNewName(v string) *ModifyDBInstanceNameInput {
	s.InstanceNewName = &v
	return s
}

type ModifyDBInstanceNameOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyDBInstanceNameOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceNameOutput) GoString() string {
	return s.String()
}

type ModifyDBInstanceSpecInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	NodeInfo []*NodeInfoForModifyDBInstanceSpecInput `type:"list"`

	NodeSpec *string `type:"string"`

	StorageSpace *int32 `type:"int32"`

	StorageType *string `type:"string"`
}

// String returns the string representation
func (s ModifyDBInstanceSpecInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceSpecInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceSpecInput) SetInstanceId(v string) *ModifyDBInstanceSpecInput {
	s.InstanceId = &v
	return s
}

// SetNodeInfo sets the NodeInfo field's value.
func (s *ModifyDBInstanceSpecInput) SetNodeInfo(v []*NodeInfoForModifyDBInstanceSpecInput) *ModifyDBInstanceSpecInput {
	s.NodeInfo = v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *ModifyDBInstanceSpecInput) SetNodeSpec(v string) *ModifyDBInstanceSpecInput {
	s.NodeSpec = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *ModifyDBInstanceSpecInput) SetStorageSpace(v int32) *ModifyDBInstanceSpecInput {
	s.StorageSpace = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *ModifyDBInstanceSpecInput) SetStorageType(v string) *ModifyDBInstanceSpecInput {
	s.StorageType = &v
	return s
}

type ModifyDBInstanceSpecOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s ModifyDBInstanceSpecOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceSpecOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBInstanceSpecOutput) SetInstanceId(v string) *ModifyDBInstanceSpecOutput {
	s.InstanceId = &v
	return s
}

// SetOrderId sets the OrderId field's value.
func (s *ModifyDBInstanceSpecOutput) SetOrderId(v string) *ModifyDBInstanceSpecOutput {
	s.OrderId = &v
	return s
}

type ModifyDatabasePrivilegeInput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	InstanceId *string `type:"string"`

	ModifyDatabasePrivilegesInfo []*ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput `type:"list"`
}

// String returns the string representation
func (s ModifyDatabasePrivilegeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabasePrivilegeInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *ModifyDatabasePrivilegeInput) SetDBName(v string) *ModifyDatabasePrivilegeInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDatabasePrivilegeInput) SetInstanceId(v string) *ModifyDatabasePrivilegeInput {
	s.InstanceId = &v
	return s
}

// SetModifyDatabasePrivilegesInfo sets the ModifyDatabasePrivilegesInfo field's value.
func (s *ModifyDatabasePrivilegeInput) SetModifyDatabasePrivilegesInfo(v []*ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) *ModifyDatabasePrivilegeInput {
	s.ModifyDatabasePrivilegesInfo = v
	return s
}

type ModifyDatabasePrivilegeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyDatabasePrivilegeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabasePrivilegeOutput) GoString() string {
	return s.String()
}

type ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	ActionType *string `type:"string"`

	Privilege *string `type:"string"`

	PrivilegeCustom *string `type:"string"`
}

// String returns the string representation
func (s ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetAccountName(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.AccountName = &v
	return s
}

// SetActionType sets the ActionType field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetActionType(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.ActionType = &v
	return s
}

// SetPrivilege sets the Privilege field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetPrivilege(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.Privilege = &v
	return s
}

// SetPrivilegeCustom sets the PrivilegeCustom field's value.
func (s *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput) SetPrivilegeCustom(v string) *ModifyDatabasePrivilegesInfoForModifyDatabasePrivilegeInput {
	s.PrivilegeCustom = &v
	return s
}

type NodeDetailInfoForDescribeDBInstanceDetailOutput struct {
	_ struct{} `type:"structure"`

	CreateTime *string `type:"string"`

	InstanceId *string `type:"string"`

	Memory *int32 `type:"int32"`

	NodeId *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeStatus *string `type:"string"`

	NodeType *string `type:"string"`

	RegionId *string `type:"string"`

	UpdateTime *string `type:"string"`

	VCPU *int32 `type:"int32"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s NodeDetailInfoForDescribeDBInstanceDetailOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeDetailInfoForDescribeDBInstanceDetailOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetCreateTime(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.CreateTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetInstanceId(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.InstanceId = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetMemory(v int32) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.Memory = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetNodeId(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.NodeId = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetNodeSpec(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.NodeSpec = &v
	return s
}

// SetNodeStatus sets the NodeStatus field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetNodeStatus(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.NodeStatus = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetNodeType(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.NodeType = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetRegionId(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.RegionId = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetUpdateTime(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.UpdateTime = &v
	return s
}

// SetVCPU sets the VCPU field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetVCPU(v int32) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.VCPU = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeDetailInfoForDescribeDBInstanceDetailOutput) SetZoneId(v string) *NodeDetailInfoForDescribeDBInstanceDetailOutput {
	s.ZoneId = &v
	return s
}

type NodeDetailInfoForDescribeDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	CreateTime *string `type:"string"`

	InstanceId *string `type:"string"`

	Memory *int32 `type:"int32"`

	NodeId *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeStatus *string `type:"string"`

	NodeType *string `type:"string"`

	RegionId *string `type:"string"`

	UpdateTime *string `type:"string"`

	VCPU *int32 `type:"int32"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s NodeDetailInfoForDescribeDBInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeDetailInfoForDescribeDBInstancesOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetCreateTime(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.CreateTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetInstanceId(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.InstanceId = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetMemory(v int32) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.Memory = &v
	return s
}

// SetNodeId sets the NodeId field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetNodeId(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.NodeId = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetNodeSpec(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.NodeSpec = &v
	return s
}

// SetNodeStatus sets the NodeStatus field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetNodeStatus(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.NodeStatus = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetNodeType(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.NodeType = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetRegionId(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.RegionId = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetUpdateTime(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.UpdateTime = &v
	return s
}

// SetVCPU sets the VCPU field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetVCPU(v int32) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.VCPU = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *NodeDetailInfoForDescribeDBInstancesOutput) SetZoneId(v string) *NodeDetailInfoForDescribeDBInstancesOutput {
	s.ZoneId = &v
	return s
}

type NodeInfoForCreateDBInstanceInput struct {
	_ struct{} `type:"structure"`

	NodeId *string `type:"string"`

	NodeOperateType *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeType *string `type:"string"`
}

// String returns the string representation
func (s NodeInfoForCreateDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoForCreateDBInstanceInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *NodeInfoForCreateDBInstanceInput) SetNodeId(v string) *NodeInfoForCreateDBInstanceInput {
	s.NodeId = &v
	return s
}

// SetNodeOperateType sets the NodeOperateType field's value.
func (s *NodeInfoForCreateDBInstanceInput) SetNodeOperateType(v string) *NodeInfoForCreateDBInstanceInput {
	s.NodeOperateType = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeInfoForCreateDBInstanceInput) SetNodeSpec(v string) *NodeInfoForCreateDBInstanceInput {
	s.NodeSpec = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoForCreateDBInstanceInput) SetNodeType(v string) *NodeInfoForCreateDBInstanceInput {
	s.NodeType = &v
	return s
}

type NodeInfoForModifyDBInstanceSpecInput struct {
	_ struct{} `type:"structure"`

	NodeId *string `type:"string"`

	NodeOperateType *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeType *string `type:"string"`
}

// String returns the string representation
func (s NodeInfoForModifyDBInstanceSpecInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoForModifyDBInstanceSpecInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *NodeInfoForModifyDBInstanceSpecInput) SetNodeId(v string) *NodeInfoForModifyDBInstanceSpecInput {
	s.NodeId = &v
	return s
}

// SetNodeOperateType sets the NodeOperateType field's value.
func (s *NodeInfoForModifyDBInstanceSpecInput) SetNodeOperateType(v string) *NodeInfoForModifyDBInstanceSpecInput {
	s.NodeOperateType = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeInfoForModifyDBInstanceSpecInput) SetNodeSpec(v string) *NodeInfoForModifyDBInstanceSpecInput {
	s.NodeSpec = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoForModifyDBInstanceSpecInput) SetNodeType(v string) *NodeInfoForModifyDBInstanceSpecInput {
	s.NodeType = &v
	return s
}

type NodeInfoForRestoreToNewInstanceInput struct {
	_ struct{} `type:"structure"`

	NodeId *string `type:"string"`

	NodeOperateType *string `type:"string"`

	NodeSpec *string `type:"string"`

	NodeType *string `type:"string"`
}

// String returns the string representation
func (s NodeInfoForRestoreToNewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NodeInfoForRestoreToNewInstanceInput) GoString() string {
	return s.String()
}

// SetNodeId sets the NodeId field's value.
func (s *NodeInfoForRestoreToNewInstanceInput) SetNodeId(v string) *NodeInfoForRestoreToNewInstanceInput {
	s.NodeId = &v
	return s
}

// SetNodeOperateType sets the NodeOperateType field's value.
func (s *NodeInfoForRestoreToNewInstanceInput) SetNodeOperateType(v string) *NodeInfoForRestoreToNewInstanceInput {
	s.NodeOperateType = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *NodeInfoForRestoreToNewInstanceInput) SetNodeSpec(v string) *NodeInfoForRestoreToNewInstanceInput {
	s.NodeSpec = &v
	return s
}

// SetNodeType sets the NodeType field's value.
func (s *NodeInfoForRestoreToNewInstanceInput) SetNodeType(v string) *NodeInfoForRestoreToNewInstanceInput {
	s.NodeType = &v
	return s
}

type RecoverableTimeInfoForDescribeRecoverableTimeOutput struct {
	_ struct{} `type:"structure"`

	EarliestRecoverableTime *string `type:"string"`

	LatestRecoverableTime *string `type:"string"`
}

// String returns the string representation
func (s RecoverableTimeInfoForDescribeRecoverableTimeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RecoverableTimeInfoForDescribeRecoverableTimeOutput) GoString() string {
	return s.String()
}

// SetEarliestRecoverableTime sets the EarliestRecoverableTime field's value.
func (s *RecoverableTimeInfoForDescribeRecoverableTimeOutput) SetEarliestRecoverableTime(v string) *RecoverableTimeInfoForDescribeRecoverableTimeOutput {
	s.EarliestRecoverableTime = &v
	return s
}

// SetLatestRecoverableTime sets the LatestRecoverableTime field's value.
func (s *RecoverableTimeInfoForDescribeRecoverableTimeOutput) SetLatestRecoverableTime(v string) *RecoverableTimeInfoForDescribeRecoverableTimeOutput {
	s.LatestRecoverableTime = &v
	return s
}

type RegionForDescribeRegionsOutput struct {
	_ struct{} `type:"structure"`

	RegionId *string `type:"string"`

	RegionName *string `type:"string"`
}

// String returns the string representation
func (s RegionForDescribeRegionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RegionForDescribeRegionsOutput) GoString() string {
	return s.String()
}

// SetRegionId sets the RegionId field's value.
func (s *RegionForDescribeRegionsOutput) SetRegionId(v string) *RegionForDescribeRegionsOutput {
	s.RegionId = &v
	return s
}

// SetRegionName sets the RegionName field's value.
func (s *RegionForDescribeRegionsOutput) SetRegionName(v string) *RegionForDescribeRegionsOutput {
	s.RegionName = &v
	return s
}

type ResetDBAccountInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPassword *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ResetDBAccountInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetDBAccountInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *ResetDBAccountInput) SetAccountName(v string) *ResetDBAccountInput {
	s.AccountName = &v
	return s
}

// SetAccountPassword sets the AccountPassword field's value.
func (s *ResetDBAccountInput) SetAccountPassword(v string) *ResetDBAccountInput {
	s.AccountPassword = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResetDBAccountInput) SetInstanceId(v string) *ResetDBAccountInput {
	s.InstanceId = &v
	return s
}

type ResetDBAccountOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ResetDBAccountOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetDBAccountOutput) GoString() string {
	return s.String()
}

type RestartDBInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s RestartDBInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RestartDBInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *RestartDBInstanceInput) SetInstanceId(v string) *RestartDBInstanceInput {
	s.InstanceId = &v
	return s
}

type RestartDBInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s RestartDBInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RestartDBInstanceOutput) GoString() string {
	return s.String()
}

type RestoreToNewInstanceInput struct {
	_ struct{} `type:"structure"`

	BackupId *string `type:"string"`

	ChargeInfo *ChargeInfoForRestoreToNewInstanceInput `type:"structure"`

	DBParamGroupId *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	NodeInfo []*NodeInfoForRestoreToNewInstanceInput `type:"list"`

	NodeNumber *int32 `type:"int32"`

	NodeSpec *string `type:"string"`

	ProjectName *string `type:"string"`

	RestoreTime *string `type:"string"`

	StorageSpace *int32 `type:"int32"`

	StorageType *string `type:"string"`

	TableMeta []*TableMetaForRestoreToNewInstanceInput `type:"list"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s RestoreToNewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreToNewInstanceInput) GoString() string {
	return s.String()
}

// SetBackupId sets the BackupId field's value.
func (s *RestoreToNewInstanceInput) SetBackupId(v string) *RestoreToNewInstanceInput {
	s.BackupId = &v
	return s
}

// SetChargeInfo sets the ChargeInfo field's value.
func (s *RestoreToNewInstanceInput) SetChargeInfo(v *ChargeInfoForRestoreToNewInstanceInput) *RestoreToNewInstanceInput {
	s.ChargeInfo = v
	return s
}

// SetDBParamGroupId sets the DBParamGroupId field's value.
func (s *RestoreToNewInstanceInput) SetDBParamGroupId(v string) *RestoreToNewInstanceInput {
	s.DBParamGroupId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RestoreToNewInstanceInput) SetInstanceId(v string) *RestoreToNewInstanceInput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *RestoreToNewInstanceInput) SetInstanceName(v string) *RestoreToNewInstanceInput {
	s.InstanceName = &v
	return s
}

// SetNodeInfo sets the NodeInfo field's value.
func (s *RestoreToNewInstanceInput) SetNodeInfo(v []*NodeInfoForRestoreToNewInstanceInput) *RestoreToNewInstanceInput {
	s.NodeInfo = v
	return s
}

// SetNodeNumber sets the NodeNumber field's value.
func (s *RestoreToNewInstanceInput) SetNodeNumber(v int32) *RestoreToNewInstanceInput {
	s.NodeNumber = &v
	return s
}

// SetNodeSpec sets the NodeSpec field's value.
func (s *RestoreToNewInstanceInput) SetNodeSpec(v string) *RestoreToNewInstanceInput {
	s.NodeSpec = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *RestoreToNewInstanceInput) SetProjectName(v string) *RestoreToNewInstanceInput {
	s.ProjectName = &v
	return s
}

// SetRestoreTime sets the RestoreTime field's value.
func (s *RestoreToNewInstanceInput) SetRestoreTime(v string) *RestoreToNewInstanceInput {
	s.RestoreTime = &v
	return s
}

// SetStorageSpace sets the StorageSpace field's value.
func (s *RestoreToNewInstanceInput) SetStorageSpace(v int32) *RestoreToNewInstanceInput {
	s.StorageSpace = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *RestoreToNewInstanceInput) SetStorageType(v string) *RestoreToNewInstanceInput {
	s.StorageType = &v
	return s
}

// SetTableMeta sets the TableMeta field's value.
func (s *RestoreToNewInstanceInput) SetTableMeta(v []*TableMetaForRestoreToNewInstanceInput) *RestoreToNewInstanceInput {
	s.TableMeta = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *RestoreToNewInstanceInput) SetVpcId(v string) *RestoreToNewInstanceInput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *RestoreToNewInstanceInput) SetZoneId(v string) *RestoreToNewInstanceInput {
	s.ZoneId = &v
	return s
}

type RestoreToNewInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s RestoreToNewInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreToNewInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *RestoreToNewInstanceOutput) SetInstanceId(v string) *RestoreToNewInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderId sets the OrderId field's value.
func (s *RestoreToNewInstanceOutput) SetOrderId(v string) *RestoreToNewInstanceOutput {
	s.OrderId = &v
	return s
}

type SlowQueryForDescribeSlowLogsOutput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	ExecutionStartTime *string `type:"string"`

	HostAddress *string `type:"string"`

	LockTimes *int64 `type:"int64"`

	ParseRowCounts *int64 `type:"int64"`

	QueryText *string `type:"string"`

	QueryTimes *int64 `type:"int64"`

	QueryType *string `type:"string"`

	ReturnRowCounts *int64 `type:"int64"`

	UserName *string `type:"string"`
}

// String returns the string representation
func (s SlowQueryForDescribeSlowLogsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s SlowQueryForDescribeSlowLogsOutput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetDBName(v string) *SlowQueryForDescribeSlowLogsOutput {
	s.DBName = &v
	return s
}

// SetExecutionStartTime sets the ExecutionStartTime field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetExecutionStartTime(v string) *SlowQueryForDescribeSlowLogsOutput {
	s.ExecutionStartTime = &v
	return s
}

// SetHostAddress sets the HostAddress field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetHostAddress(v string) *SlowQueryForDescribeSlowLogsOutput {
	s.HostAddress = &v
	return s
}

// SetLockTimes sets the LockTimes field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetLockTimes(v int64) *SlowQueryForDescribeSlowLogsOutput {
	s.LockTimes = &v
	return s
}

// SetParseRowCounts sets the ParseRowCounts field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetParseRowCounts(v int64) *SlowQueryForDescribeSlowLogsOutput {
	s.ParseRowCounts = &v
	return s
}

// SetQueryText sets the QueryText field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetQueryText(v string) *SlowQueryForDescribeSlowLogsOutput {
	s.QueryText = &v
	return s
}

// SetQueryTimes sets the QueryTimes field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetQueryTimes(v int64) *SlowQueryForDescribeSlowLogsOutput {
	s.QueryTimes = &v
	return s
}

// SetQueryType sets the QueryType field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetQueryType(v string) *SlowQueryForDescribeSlowLogsOutput {
	s.QueryType = &v
	return s
}

// SetReturnRowCounts sets the ReturnRowCounts field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetReturnRowCounts(v int64) *SlowQueryForDescribeSlowLogsOutput {
	s.ReturnRowCounts = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *SlowQueryForDescribeSlowLogsOutput) SetUserName(v string) *SlowQueryForDescribeSlowLogsOutput {
	s.UserName = &v
	return s
}

type TableForRestoreToNewInstanceInput struct {
	_ struct{} `type:"structure"`

	NewTableName *string `type:"string"`

	TableName *string `type:"string"`
}

// String returns the string representation
func (s TableForRestoreToNewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s TableForRestoreToNewInstanceInput) GoString() string {
	return s.String()
}

// SetNewTableName sets the NewTableName field's value.
func (s *TableForRestoreToNewInstanceInput) SetNewTableName(v string) *TableForRestoreToNewInstanceInput {
	s.NewTableName = &v
	return s
}

// SetTableName sets the TableName field's value.
func (s *TableForRestoreToNewInstanceInput) SetTableName(v string) *TableForRestoreToNewInstanceInput {
	s.TableName = &v
	return s
}

type TableMetaForRestoreToNewInstanceInput struct {
	_ struct{} `type:"structure"`

	DBName *string `type:"string"`

	NewDBName *string `type:"string"`

	Table []*TableForRestoreToNewInstanceInput `type:"list"`
}

// String returns the string representation
func (s TableMetaForRestoreToNewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s TableMetaForRestoreToNewInstanceInput) GoString() string {
	return s.String()
}

// SetDBName sets the DBName field's value.
func (s *TableMetaForRestoreToNewInstanceInput) SetDBName(v string) *TableMetaForRestoreToNewInstanceInput {
	s.DBName = &v
	return s
}

// SetNewDBName sets the NewDBName field's value.
func (s *TableMetaForRestoreToNewInstanceInput) SetNewDBName(v string) *TableMetaForRestoreToNewInstanceInput {
	s.NewDBName = &v
	return s
}

// SetTable sets the Table field's value.
func (s *TableMetaForRestoreToNewInstanceInput) SetTable(v []*TableForRestoreToNewInstanceInput) *TableMetaForRestoreToNewInstanceInput {
	s.Table = v
	return s
}

type ZoneForDescribeAvailabilityZonesOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	ZoneId *string `type:"string"`

	ZoneName *string `type:"string"`
}

// String returns the string representation
func (s ZoneForDescribeAvailabilityZonesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ZoneForDescribeAvailabilityZonesOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *ZoneForDescribeAvailabilityZonesOutput) SetDescription(v string) *ZoneForDescribeAvailabilityZonesOutput {
	s.Description = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *ZoneForDescribeAvailabilityZonesOutput) SetZoneId(v string) *ZoneForDescribeAvailabilityZonesOutput {
	s.ZoneId = &v
	return s
}

// SetZoneName sets the ZoneName field's value.
func (s *ZoneForDescribeAvailabilityZonesOutput) SetZoneName(v string) *ZoneForDescribeAvailabilityZonesOutput {
	s.ZoneName = &v
	return s
}

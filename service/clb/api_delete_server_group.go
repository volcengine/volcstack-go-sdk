// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opDeleteServerGroupCommon = "DeleteServerGroup"

// DeleteServerGroupCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteServerGroupCommon operation. The "output" return
// value will be populated with the DeleteServerGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteServerGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteServerGroupCommon Send returns without error.
//
// See DeleteServerGroupCommon for more information on using the DeleteServerGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteServerGroupCommonRequest method.
//    req, resp := client.DeleteServerGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteServerGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteServerGroupCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteServerGroupCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteServerGroupCommon for usage and error information.
func (c *CLB) DeleteServerGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteServerGroupCommonRequest(input)
	return out, req.Send()
}

// DeleteServerGroupCommonWithContext is the same as DeleteServerGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteServerGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteServerGroupCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteServerGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteServerGroup = "DeleteServerGroup"

// DeleteServerGroupRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteServerGroup operation. The "output" return
// value will be populated with the DeleteServerGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteServerGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteServerGroupCommon Send returns without error.
//
// See DeleteServerGroup for more information on using the DeleteServerGroup
// API call, and error handling.
//
//    // Example sending a request using the DeleteServerGroupRequest method.
//    req, resp := client.DeleteServerGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteServerGroupRequest(input *DeleteServerGroupInput) (req *request.Request, output *DeleteServerGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteServerGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteServerGroupInput{}
	}

	output = &DeleteServerGroupOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteServerGroup API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteServerGroup for usage and error information.
func (c *CLB) DeleteServerGroup(input *DeleteServerGroupInput) (*DeleteServerGroupOutput, error) {
	req, out := c.DeleteServerGroupRequest(input)
	return out, req.Send()
}

// DeleteServerGroupWithContext is the same as DeleteServerGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteServerGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteServerGroupWithContext(ctx volcstack.Context, input *DeleteServerGroupInput, opts ...request.Option) (*DeleteServerGroupOutput, error) {
	req, out := c.DeleteServerGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteServerGroupInput struct {
	_ struct{} `type:"structure"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteServerGroupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteServerGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteServerGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteServerGroupInput"}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *DeleteServerGroupInput) SetServerGroupId(v string) *DeleteServerGroupInput {
	s.ServerGroupId = &v
	return s
}

type DeleteServerGroupOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteServerGroupOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteServerGroupOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteServerGroupOutput) SetRequestId(v string) *DeleteServerGroupOutput {
	s.RequestId = &v
	return s
}

// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"fmt"

	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opAddServerGroupBackendServersCommon = "AddServerGroupBackendServers"

// AddServerGroupBackendServersCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the AddServerGroupBackendServersCommon operation. The "output" return
// value will be populated with the AddServerGroupBackendServersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddServerGroupBackendServersCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddServerGroupBackendServersCommon Send returns without error.
//
// See AddServerGroupBackendServersCommon for more information on using the AddServerGroupBackendServersCommon
// API call, and error handling.
//
//    // Example sending a request using the AddServerGroupBackendServersCommonRequest method.
//    req, resp := client.AddServerGroupBackendServersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) AddServerGroupBackendServersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddServerGroupBackendServersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AddServerGroupBackendServersCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation AddServerGroupBackendServersCommon for usage and error information.
func (c *CLB) AddServerGroupBackendServersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddServerGroupBackendServersCommonRequest(input)
	return out, req.Send()
}

// AddServerGroupBackendServersCommonWithContext is the same as AddServerGroupBackendServersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddServerGroupBackendServersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AddServerGroupBackendServersCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddServerGroupBackendServersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddServerGroupBackendServers = "AddServerGroupBackendServers"

// AddServerGroupBackendServersRequest generates a "volcstack/request.Request" representing the
// client's request for the AddServerGroupBackendServers operation. The "output" return
// value will be populated with the AddServerGroupBackendServersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddServerGroupBackendServersCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddServerGroupBackendServersCommon Send returns without error.
//
// See AddServerGroupBackendServers for more information on using the AddServerGroupBackendServers
// API call, and error handling.
//
//    // Example sending a request using the AddServerGroupBackendServersRequest method.
//    req, resp := client.AddServerGroupBackendServersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) AddServerGroupBackendServersRequest(input *AddServerGroupBackendServersInput) (req *request.Request, output *AddServerGroupBackendServersOutput) {
	op := &request.Operation{
		Name:       opAddServerGroupBackendServers,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddServerGroupBackendServersInput{}
	}

	output = &AddServerGroupBackendServersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AddServerGroupBackendServers API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation AddServerGroupBackendServers for usage and error information.
func (c *CLB) AddServerGroupBackendServers(input *AddServerGroupBackendServersInput) (*AddServerGroupBackendServersOutput, error) {
	req, out := c.AddServerGroupBackendServersRequest(input)
	return out, req.Send()
}

// AddServerGroupBackendServersWithContext is the same as AddServerGroupBackendServers with the addition of
// the ability to pass a context and additional request options.
//
// See AddServerGroupBackendServers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AddServerGroupBackendServersWithContext(ctx volcstack.Context, input *AddServerGroupBackendServersInput, opts ...request.Option) (*AddServerGroupBackendServersOutput, error) {
	req, out := c.AddServerGroupBackendServersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddServerGroupBackendServersInput struct {
	_ struct{} `type:"structure"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`

	// Servers is a required field
	Servers []*ServerForAddServerGroupBackendServersInput `type:"list" required:"true"`
}

// String returns the string representation
func (s AddServerGroupBackendServersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AddServerGroupBackendServersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddServerGroupBackendServersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddServerGroupBackendServersInput"}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}
	if s.Servers == nil {
		invalidParams.Add(request.NewErrParamRequired("Servers"))
	}
	if s.Servers != nil {
		for i, v := range s.Servers {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Servers", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *AddServerGroupBackendServersInput) SetServerGroupId(v string) *AddServerGroupBackendServersInput {
	s.ServerGroupId = &v
	return s
}

// SetServers sets the Servers field's value.
func (s *AddServerGroupBackendServersInput) SetServers(v []*ServerForAddServerGroupBackendServersInput) *AddServerGroupBackendServersInput {
	s.Servers = v
	return s
}

type AddServerGroupBackendServersOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	ServerIds []*string `type:"list"`
}

// String returns the string representation
func (s AddServerGroupBackendServersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AddServerGroupBackendServersOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *AddServerGroupBackendServersOutput) SetRequestId(v string) *AddServerGroupBackendServersOutput {
	s.RequestId = &v
	return s
}

// SetServerIds sets the ServerIds field's value.
func (s *AddServerGroupBackendServersOutput) SetServerIds(v []*string) *AddServerGroupBackendServersOutput {
	s.ServerIds = v
	return s
}

type ServerForAddServerGroupBackendServersInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// Ip is a required field
	Ip *string `type:"string" required:"true"`

	// Port is a required field
	Port *int64 `type:"integer" required:"true"`

	// Type is a required field
	Type *string `type:"string" required:"true"`

	Weight *int64 `type:"integer"`
}

// String returns the string representation
func (s ServerForAddServerGroupBackendServersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerForAddServerGroupBackendServersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ServerForAddServerGroupBackendServersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ServerForAddServerGroupBackendServersInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Ip == nil {
		invalidParams.Add(request.NewErrParamRequired("Ip"))
	}
	if s.Port == nil {
		invalidParams.Add(request.NewErrParamRequired("Port"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetDescription(v string) *ServerForAddServerGroupBackendServersInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetInstanceId(v string) *ServerForAddServerGroupBackendServersInput {
	s.InstanceId = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetIp(v string) *ServerForAddServerGroupBackendServersInput {
	s.Ip = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetPort(v int64) *ServerForAddServerGroupBackendServersInput {
	s.Port = &v
	return s
}

// SetType sets the Type field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetType(v string) *ServerForAddServerGroupBackendServersInput {
	s.Type = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetWeight(v int64) *ServerForAddServerGroupBackendServersInput {
	s.Weight = &v
	return s
}

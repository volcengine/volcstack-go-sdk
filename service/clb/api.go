// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"fmt"

	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opAddAclEntriesCommon = "AddAclEntries"

// AddAclEntriesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the AddAclEntriesCommon operation. The "output" return
// value will be populated with the AddAclEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddAclEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddAclEntriesCommon Send returns without error.
//
// See AddAclEntriesCommon for more information on using the AddAclEntriesCommon
// API call, and error handling.
//
//    // Example sending a request using the AddAclEntriesCommonRequest method.
//    req, resp := client.AddAclEntriesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) AddAclEntriesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddAclEntriesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AddAclEntriesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation AddAclEntriesCommon for usage and error information.
func (c *CLB) AddAclEntriesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddAclEntriesCommonRequest(input)
	return out, req.Send()
}

// AddAclEntriesCommonWithContext is the same as AddAclEntriesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddAclEntriesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AddAclEntriesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddAclEntriesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddAclEntries = "AddAclEntries"

// AddAclEntriesRequest generates a "volcstack/request.Request" representing the
// client's request for the AddAclEntries operation. The "output" return
// value will be populated with the AddAclEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddAclEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddAclEntriesCommon Send returns without error.
//
// See AddAclEntries for more information on using the AddAclEntries
// API call, and error handling.
//
//    // Example sending a request using the AddAclEntriesRequest method.
//    req, resp := client.AddAclEntriesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) AddAclEntriesRequest(input *AddAclEntriesInput) (req *request.Request, output *AddAclEntriesOutput) {
	op := &request.Operation{
		Name:       opAddAclEntries,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddAclEntriesInput{}
	}

	output = &AddAclEntriesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AddAclEntries API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation AddAclEntries for usage and error information.
func (c *CLB) AddAclEntries(input *AddAclEntriesInput) (*AddAclEntriesOutput, error) {
	req, out := c.AddAclEntriesRequest(input)
	return out, req.Send()
}

// AddAclEntriesWithContext is the same as AddAclEntries with the addition of
// the ability to pass a context and additional request options.
//
// See AddAclEntries for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AddAclEntriesWithContext(ctx volcstack.Context, input *AddAclEntriesInput, opts ...request.Option) (*AddAclEntriesOutput, error) {
	req, out := c.AddAclEntriesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddServerGroupBackendServersCommon = "AddServerGroupBackendServers"

// AddServerGroupBackendServersCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the AddServerGroupBackendServersCommon operation. The "output" return
// value will be populated with the AddServerGroupBackendServersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddServerGroupBackendServersCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddServerGroupBackendServersCommon Send returns without error.
//
// See AddServerGroupBackendServersCommon for more information on using the AddServerGroupBackendServersCommon
// API call, and error handling.
//
//    // Example sending a request using the AddServerGroupBackendServersCommonRequest method.
//    req, resp := client.AddServerGroupBackendServersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) AddServerGroupBackendServersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAddServerGroupBackendServersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AddServerGroupBackendServersCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation AddServerGroupBackendServersCommon for usage and error information.
func (c *CLB) AddServerGroupBackendServersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AddServerGroupBackendServersCommonRequest(input)
	return out, req.Send()
}

// AddServerGroupBackendServersCommonWithContext is the same as AddServerGroupBackendServersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AddServerGroupBackendServersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AddServerGroupBackendServersCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AddServerGroupBackendServersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAddServerGroupBackendServers = "AddServerGroupBackendServers"

// AddServerGroupBackendServersRequest generates a "volcstack/request.Request" representing the
// client's request for the AddServerGroupBackendServers operation. The "output" return
// value will be populated with the AddServerGroupBackendServersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AddServerGroupBackendServersCommon Request to send the API call to the service.
// the "output" return value is not valid until after AddServerGroupBackendServersCommon Send returns without error.
//
// See AddServerGroupBackendServers for more information on using the AddServerGroupBackendServers
// API call, and error handling.
//
//    // Example sending a request using the AddServerGroupBackendServersRequest method.
//    req, resp := client.AddServerGroupBackendServersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) AddServerGroupBackendServersRequest(input *AddServerGroupBackendServersInput) (req *request.Request, output *AddServerGroupBackendServersOutput) {
	op := &request.Operation{
		Name:       opAddServerGroupBackendServers,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddServerGroupBackendServersInput{}
	}

	output = &AddServerGroupBackendServersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AddServerGroupBackendServers API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation AddServerGroupBackendServers for usage and error information.
func (c *CLB) AddServerGroupBackendServers(input *AddServerGroupBackendServersInput) (*AddServerGroupBackendServersOutput, error) {
	req, out := c.AddServerGroupBackendServersRequest(input)
	return out, req.Send()
}

// AddServerGroupBackendServersWithContext is the same as AddServerGroupBackendServers with the addition of
// the ability to pass a context and additional request options.
//
// See AddServerGroupBackendServers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AddServerGroupBackendServersWithContext(ctx volcstack.Context, input *AddServerGroupBackendServersInput, opts ...request.Option) (*AddServerGroupBackendServersOutput, error) {
	req, out := c.AddServerGroupBackendServersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAclCommon = "CreateAcl"

// CreateAclCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateAclCommon operation. The "output" return
// value will be populated with the CreateAclCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAclCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAclCommon Send returns without error.
//
// See CreateAclCommon for more information on using the CreateAclCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateAclCommonRequest method.
//    req, resp := client.CreateAclCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateAclCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateAclCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateAclCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateAclCommon for usage and error information.
func (c *CLB) CreateAclCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateAclCommonRequest(input)
	return out, req.Send()
}

// CreateAclCommonWithContext is the same as CreateAclCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAclCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateAclCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateAclCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateAcl = "CreateAcl"

// CreateAclRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateAcl operation. The "output" return
// value will be populated with the CreateAclCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateAclCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateAclCommon Send returns without error.
//
// See CreateAcl for more information on using the CreateAcl
// API call, and error handling.
//
//    // Example sending a request using the CreateAclRequest method.
//    req, resp := client.CreateAclRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateAclRequest(input *CreateAclInput) (req *request.Request, output *CreateAclOutput) {
	op := &request.Operation{
		Name:       opCreateAcl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateAclInput{}
	}

	output = &CreateAclOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateAcl API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateAcl for usage and error information.
func (c *CLB) CreateAcl(input *CreateAclInput) (*CreateAclOutput, error) {
	req, out := c.CreateAclRequest(input)
	return out, req.Send()
}

// CreateAclWithContext is the same as CreateAcl with the addition of
// the ability to pass a context and additional request options.
//
// See CreateAcl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateAclWithContext(ctx volcstack.Context, input *CreateAclInput, opts ...request.Option) (*CreateAclOutput, error) {
	req, out := c.CreateAclRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateListenerCommon = "CreateListener"

// CreateListenerCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateListenerCommon operation. The "output" return
// value will be populated with the CreateListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateListenerCommon Send returns without error.
//
// See CreateListenerCommon for more information on using the CreateListenerCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateListenerCommonRequest method.
//    req, resp := client.CreateListenerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateListenerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateListenerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateListenerCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateListenerCommon for usage and error information.
func (c *CLB) CreateListenerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateListenerCommonRequest(input)
	return out, req.Send()
}

// CreateListenerCommonWithContext is the same as CreateListenerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateListenerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateListenerCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateListenerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateListener = "CreateListener"

// CreateListenerRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateListener operation. The "output" return
// value will be populated with the CreateListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateListenerCommon Send returns without error.
//
// See CreateListener for more information on using the CreateListener
// API call, and error handling.
//
//    // Example sending a request using the CreateListenerRequest method.
//    req, resp := client.CreateListenerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateListenerRequest(input *CreateListenerInput) (req *request.Request, output *CreateListenerOutput) {
	op := &request.Operation{
		Name:       opCreateListener,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateListenerInput{}
	}

	output = &CreateListenerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateListener API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateListener for usage and error information.
func (c *CLB) CreateListener(input *CreateListenerInput) (*CreateListenerOutput, error) {
	req, out := c.CreateListenerRequest(input)
	return out, req.Send()
}

// CreateListenerWithContext is the same as CreateListener with the addition of
// the ability to pass a context and additional request options.
//
// See CreateListener for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateListenerWithContext(ctx volcstack.Context, input *CreateListenerInput, opts ...request.Option) (*CreateListenerOutput, error) {
	req, out := c.CreateListenerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateLoadBalancerCommon = "CreateLoadBalancer"

// CreateLoadBalancerCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateLoadBalancerCommon operation. The "output" return
// value will be populated with the CreateLoadBalancerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateLoadBalancerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateLoadBalancerCommon Send returns without error.
//
// See CreateLoadBalancerCommon for more information on using the CreateLoadBalancerCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateLoadBalancerCommonRequest method.
//    req, resp := client.CreateLoadBalancerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateLoadBalancerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateLoadBalancerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateLoadBalancerCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateLoadBalancerCommon for usage and error information.
func (c *CLB) CreateLoadBalancerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateLoadBalancerCommonRequest(input)
	return out, req.Send()
}

// CreateLoadBalancerCommonWithContext is the same as CreateLoadBalancerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateLoadBalancerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateLoadBalancerCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateLoadBalancerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateLoadBalancer = "CreateLoadBalancer"

// CreateLoadBalancerRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateLoadBalancer operation. The "output" return
// value will be populated with the CreateLoadBalancerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateLoadBalancerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateLoadBalancerCommon Send returns without error.
//
// See CreateLoadBalancer for more information on using the CreateLoadBalancer
// API call, and error handling.
//
//    // Example sending a request using the CreateLoadBalancerRequest method.
//    req, resp := client.CreateLoadBalancerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateLoadBalancerRequest(input *CreateLoadBalancerInput) (req *request.Request, output *CreateLoadBalancerOutput) {
	op := &request.Operation{
		Name:       opCreateLoadBalancer,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateLoadBalancerInput{}
	}

	output = &CreateLoadBalancerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateLoadBalancer API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateLoadBalancer for usage and error information.
func (c *CLB) CreateLoadBalancer(input *CreateLoadBalancerInput) (*CreateLoadBalancerOutput, error) {
	req, out := c.CreateLoadBalancerRequest(input)
	return out, req.Send()
}

// CreateLoadBalancerWithContext is the same as CreateLoadBalancer with the addition of
// the ability to pass a context and additional request options.
//
// See CreateLoadBalancer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateLoadBalancerWithContext(ctx volcstack.Context, input *CreateLoadBalancerInput, opts ...request.Option) (*CreateLoadBalancerOutput, error) {
	req, out := c.CreateLoadBalancerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateRulesCommon = "CreateRules"

// CreateRulesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateRulesCommon operation. The "output" return
// value will be populated with the CreateRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRulesCommon Send returns without error.
//
// See CreateRulesCommon for more information on using the CreateRulesCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateRulesCommonRequest method.
//    req, resp := client.CreateRulesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateRulesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateRulesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateRulesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateRulesCommon for usage and error information.
func (c *CLB) CreateRulesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateRulesCommonRequest(input)
	return out, req.Send()
}

// CreateRulesCommonWithContext is the same as CreateRulesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRulesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateRulesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateRulesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateRules = "CreateRules"

// CreateRulesRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateRules operation. The "output" return
// value will be populated with the CreateRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateRulesCommon Send returns without error.
//
// See CreateRules for more information on using the CreateRules
// API call, and error handling.
//
//    // Example sending a request using the CreateRulesRequest method.
//    req, resp := client.CreateRulesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateRulesRequest(input *CreateRulesInput) (req *request.Request, output *CreateRulesOutput) {
	op := &request.Operation{
		Name:       opCreateRules,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateRulesInput{}
	}

	output = &CreateRulesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateRules API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateRules for usage and error information.
func (c *CLB) CreateRules(input *CreateRulesInput) (*CreateRulesOutput, error) {
	req, out := c.CreateRulesRequest(input)
	return out, req.Send()
}

// CreateRulesWithContext is the same as CreateRules with the addition of
// the ability to pass a context and additional request options.
//
// See CreateRules for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateRulesWithContext(ctx volcstack.Context, input *CreateRulesInput, opts ...request.Option) (*CreateRulesOutput, error) {
	req, out := c.CreateRulesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateServerGroupCommon = "CreateServerGroup"

// CreateServerGroupCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateServerGroupCommon operation. The "output" return
// value will be populated with the CreateServerGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateServerGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateServerGroupCommon Send returns without error.
//
// See CreateServerGroupCommon for more information on using the CreateServerGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateServerGroupCommonRequest method.
//    req, resp := client.CreateServerGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateServerGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateServerGroupCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateServerGroupCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateServerGroupCommon for usage and error information.
func (c *CLB) CreateServerGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateServerGroupCommonRequest(input)
	return out, req.Send()
}

// CreateServerGroupCommonWithContext is the same as CreateServerGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateServerGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateServerGroupCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateServerGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateServerGroup = "CreateServerGroup"

// CreateServerGroupRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateServerGroup operation. The "output" return
// value will be populated with the CreateServerGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateServerGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateServerGroupCommon Send returns without error.
//
// See CreateServerGroup for more information on using the CreateServerGroup
// API call, and error handling.
//
//    // Example sending a request using the CreateServerGroupRequest method.
//    req, resp := client.CreateServerGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) CreateServerGroupRequest(input *CreateServerGroupInput) (req *request.Request, output *CreateServerGroupOutput) {
	op := &request.Operation{
		Name:       opCreateServerGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateServerGroupInput{}
	}

	output = &CreateServerGroupOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateServerGroup API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation CreateServerGroup for usage and error information.
func (c *CLB) CreateServerGroup(input *CreateServerGroupInput) (*CreateServerGroupOutput, error) {
	req, out := c.CreateServerGroupRequest(input)
	return out, req.Send()
}

// CreateServerGroupWithContext is the same as CreateServerGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateServerGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) CreateServerGroupWithContext(ctx volcstack.Context, input *CreateServerGroupInput, opts ...request.Option) (*CreateServerGroupOutput, error) {
	req, out := c.CreateServerGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteAclCommon = "DeleteAcl"

// DeleteAclCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteAclCommon operation. The "output" return
// value will be populated with the DeleteAclCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteAclCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteAclCommon Send returns without error.
//
// See DeleteAclCommon for more information on using the DeleteAclCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteAclCommonRequest method.
//    req, resp := client.DeleteAclCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteAclCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteAclCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteAclCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteAclCommon for usage and error information.
func (c *CLB) DeleteAclCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteAclCommonRequest(input)
	return out, req.Send()
}

// DeleteAclCommonWithContext is the same as DeleteAclCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteAclCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteAclCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteAclCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteAcl = "DeleteAcl"

// DeleteAclRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteAcl operation. The "output" return
// value will be populated with the DeleteAclCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteAclCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteAclCommon Send returns without error.
//
// See DeleteAcl for more information on using the DeleteAcl
// API call, and error handling.
//
//    // Example sending a request using the DeleteAclRequest method.
//    req, resp := client.DeleteAclRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteAclRequest(input *DeleteAclInput) (req *request.Request, output *DeleteAclOutput) {
	op := &request.Operation{
		Name:       opDeleteAcl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteAclInput{}
	}

	output = &DeleteAclOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteAcl API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteAcl for usage and error information.
func (c *CLB) DeleteAcl(input *DeleteAclInput) (*DeleteAclOutput, error) {
	req, out := c.DeleteAclRequest(input)
	return out, req.Send()
}

// DeleteAclWithContext is the same as DeleteAcl with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteAcl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteAclWithContext(ctx volcstack.Context, input *DeleteAclInput, opts ...request.Option) (*DeleteAclOutput, error) {
	req, out := c.DeleteAclRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCertificateCommon = "DeleteCertificate"

// DeleteCertificateCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCertificateCommon operation. The "output" return
// value will be populated with the DeleteCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCertificateCommon Send returns without error.
//
// See DeleteCertificateCommon for more information on using the DeleteCertificateCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteCertificateCommonRequest method.
//    req, resp := client.DeleteCertificateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteCertificateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteCertificateCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCertificateCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteCertificateCommon for usage and error information.
func (c *CLB) DeleteCertificateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteCertificateCommonRequest(input)
	return out, req.Send()
}

// DeleteCertificateCommonWithContext is the same as DeleteCertificateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCertificateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteCertificateCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteCertificateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteCertificate = "DeleteCertificate"

// DeleteCertificateRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteCertificate operation. The "output" return
// value will be populated with the DeleteCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteCertificateCommon Send returns without error.
//
// See DeleteCertificate for more information on using the DeleteCertificate
// API call, and error handling.
//
//    // Example sending a request using the DeleteCertificateRequest method.
//    req, resp := client.DeleteCertificateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteCertificateRequest(input *DeleteCertificateInput) (req *request.Request, output *DeleteCertificateOutput) {
	op := &request.Operation{
		Name:       opDeleteCertificate,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteCertificateInput{}
	}

	output = &DeleteCertificateOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteCertificate API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteCertificate for usage and error information.
func (c *CLB) DeleteCertificate(input *DeleteCertificateInput) (*DeleteCertificateOutput, error) {
	req, out := c.DeleteCertificateRequest(input)
	return out, req.Send()
}

// DeleteCertificateWithContext is the same as DeleteCertificate with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteCertificate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteCertificateWithContext(ctx volcstack.Context, input *DeleteCertificateInput, opts ...request.Option) (*DeleteCertificateOutput, error) {
	req, out := c.DeleteCertificateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteListenerCommon = "DeleteListener"

// DeleteListenerCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteListenerCommon operation. The "output" return
// value will be populated with the DeleteListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteListenerCommon Send returns without error.
//
// See DeleteListenerCommon for more information on using the DeleteListenerCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteListenerCommonRequest method.
//    req, resp := client.DeleteListenerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteListenerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteListenerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteListenerCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteListenerCommon for usage and error information.
func (c *CLB) DeleteListenerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteListenerCommonRequest(input)
	return out, req.Send()
}

// DeleteListenerCommonWithContext is the same as DeleteListenerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteListenerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteListenerCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteListenerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteListener = "DeleteListener"

// DeleteListenerRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteListener operation. The "output" return
// value will be populated with the DeleteListenerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteListenerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteListenerCommon Send returns without error.
//
// See DeleteListener for more information on using the DeleteListener
// API call, and error handling.
//
//    // Example sending a request using the DeleteListenerRequest method.
//    req, resp := client.DeleteListenerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteListenerRequest(input *DeleteListenerInput) (req *request.Request, output *DeleteListenerOutput) {
	op := &request.Operation{
		Name:       opDeleteListener,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteListenerInput{}
	}

	output = &DeleteListenerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteListener API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteListener for usage and error information.
func (c *CLB) DeleteListener(input *DeleteListenerInput) (*DeleteListenerOutput, error) {
	req, out := c.DeleteListenerRequest(input)
	return out, req.Send()
}

// DeleteListenerWithContext is the same as DeleteListener with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteListener for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteListenerWithContext(ctx volcstack.Context, input *DeleteListenerInput, opts ...request.Option) (*DeleteListenerOutput, error) {
	req, out := c.DeleteListenerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteLoadBalancerCommon = "DeleteLoadBalancer"

// DeleteLoadBalancerCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteLoadBalancerCommon operation. The "output" return
// value will be populated with the DeleteLoadBalancerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteLoadBalancerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteLoadBalancerCommon Send returns without error.
//
// See DeleteLoadBalancerCommon for more information on using the DeleteLoadBalancerCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteLoadBalancerCommonRequest method.
//    req, resp := client.DeleteLoadBalancerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteLoadBalancerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteLoadBalancerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteLoadBalancerCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteLoadBalancerCommon for usage and error information.
func (c *CLB) DeleteLoadBalancerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteLoadBalancerCommonRequest(input)
	return out, req.Send()
}

// DeleteLoadBalancerCommonWithContext is the same as DeleteLoadBalancerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteLoadBalancerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteLoadBalancerCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteLoadBalancerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteLoadBalancer = "DeleteLoadBalancer"

// DeleteLoadBalancerRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteLoadBalancer operation. The "output" return
// value will be populated with the DeleteLoadBalancerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteLoadBalancerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteLoadBalancerCommon Send returns without error.
//
// See DeleteLoadBalancer for more information on using the DeleteLoadBalancer
// API call, and error handling.
//
//    // Example sending a request using the DeleteLoadBalancerRequest method.
//    req, resp := client.DeleteLoadBalancerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteLoadBalancerRequest(input *DeleteLoadBalancerInput) (req *request.Request, output *DeleteLoadBalancerOutput) {
	op := &request.Operation{
		Name:       opDeleteLoadBalancer,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteLoadBalancerInput{}
	}

	output = &DeleteLoadBalancerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteLoadBalancer API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteLoadBalancer for usage and error information.
func (c *CLB) DeleteLoadBalancer(input *DeleteLoadBalancerInput) (*DeleteLoadBalancerOutput, error) {
	req, out := c.DeleteLoadBalancerRequest(input)
	return out, req.Send()
}

// DeleteLoadBalancerWithContext is the same as DeleteLoadBalancer with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteLoadBalancer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteLoadBalancerWithContext(ctx volcstack.Context, input *DeleteLoadBalancerInput, opts ...request.Option) (*DeleteLoadBalancerOutput, error) {
	req, out := c.DeleteLoadBalancerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRulesCommon = "DeleteRules"

// DeleteRulesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteRulesCommon operation. The "output" return
// value will be populated with the DeleteRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRulesCommon Send returns without error.
//
// See DeleteRulesCommon for more information on using the DeleteRulesCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteRulesCommonRequest method.
//    req, resp := client.DeleteRulesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteRulesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRulesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRulesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteRulesCommon for usage and error information.
func (c *CLB) DeleteRulesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRulesCommonRequest(input)
	return out, req.Send()
}

// DeleteRulesCommonWithContext is the same as DeleteRulesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRulesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteRulesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRulesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRules = "DeleteRules"

// DeleteRulesRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteRules operation. The "output" return
// value will be populated with the DeleteRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRulesCommon Send returns without error.
//
// See DeleteRules for more information on using the DeleteRules
// API call, and error handling.
//
//    // Example sending a request using the DeleteRulesRequest method.
//    req, resp := client.DeleteRulesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteRulesRequest(input *DeleteRulesInput) (req *request.Request, output *DeleteRulesOutput) {
	op := &request.Operation{
		Name:       opDeleteRules,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteRulesInput{}
	}

	output = &DeleteRulesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRules API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteRules for usage and error information.
func (c *CLB) DeleteRules(input *DeleteRulesInput) (*DeleteRulesOutput, error) {
	req, out := c.DeleteRulesRequest(input)
	return out, req.Send()
}

// DeleteRulesWithContext is the same as DeleteRules with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRules for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteRulesWithContext(ctx volcstack.Context, input *DeleteRulesInput, opts ...request.Option) (*DeleteRulesOutput, error) {
	req, out := c.DeleteRulesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteServerGroupCommon = "DeleteServerGroup"

// DeleteServerGroupCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteServerGroupCommon operation. The "output" return
// value will be populated with the DeleteServerGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteServerGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteServerGroupCommon Send returns without error.
//
// See DeleteServerGroupCommon for more information on using the DeleteServerGroupCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteServerGroupCommonRequest method.
//    req, resp := client.DeleteServerGroupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteServerGroupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteServerGroupCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteServerGroupCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteServerGroupCommon for usage and error information.
func (c *CLB) DeleteServerGroupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteServerGroupCommonRequest(input)
	return out, req.Send()
}

// DeleteServerGroupCommonWithContext is the same as DeleteServerGroupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteServerGroupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteServerGroupCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteServerGroupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteServerGroup = "DeleteServerGroup"

// DeleteServerGroupRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteServerGroup operation. The "output" return
// value will be populated with the DeleteServerGroupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteServerGroupCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteServerGroupCommon Send returns without error.
//
// See DeleteServerGroup for more information on using the DeleteServerGroup
// API call, and error handling.
//
//    // Example sending a request using the DeleteServerGroupRequest method.
//    req, resp := client.DeleteServerGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DeleteServerGroupRequest(input *DeleteServerGroupInput) (req *request.Request, output *DeleteServerGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteServerGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteServerGroupInput{}
	}

	output = &DeleteServerGroupOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteServerGroup API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DeleteServerGroup for usage and error information.
func (c *CLB) DeleteServerGroup(input *DeleteServerGroupInput) (*DeleteServerGroupOutput, error) {
	req, out := c.DeleteServerGroupRequest(input)
	return out, req.Send()
}

// DeleteServerGroupWithContext is the same as DeleteServerGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteServerGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DeleteServerGroupWithContext(ctx volcstack.Context, input *DeleteServerGroupInput, opts ...request.Option) (*DeleteServerGroupOutput, error) {
	req, out := c.DeleteServerGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAclAttributesCommon = "DescribeAclAttributes"

// DescribeAclAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAclAttributesCommon operation. The "output" return
// value will be populated with the DescribeAclAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAclAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAclAttributesCommon Send returns without error.
//
// See DescribeAclAttributesCommon for more information on using the DescribeAclAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAclAttributesCommonRequest method.
//    req, resp := client.DescribeAclAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeAclAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAclAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAclAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeAclAttributesCommon for usage and error information.
func (c *CLB) DescribeAclAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAclAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeAclAttributesCommonWithContext is the same as DescribeAclAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAclAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeAclAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAclAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAclAttributes = "DescribeAclAttributes"

// DescribeAclAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAclAttributes operation. The "output" return
// value will be populated with the DescribeAclAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAclAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAclAttributesCommon Send returns without error.
//
// See DescribeAclAttributes for more information on using the DescribeAclAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeAclAttributesRequest method.
//    req, resp := client.DescribeAclAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeAclAttributesRequest(input *DescribeAclAttributesInput) (req *request.Request, output *DescribeAclAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeAclAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAclAttributesInput{}
	}

	output = &DescribeAclAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAclAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeAclAttributes for usage and error information.
func (c *CLB) DescribeAclAttributes(input *DescribeAclAttributesInput) (*DescribeAclAttributesOutput, error) {
	req, out := c.DescribeAclAttributesRequest(input)
	return out, req.Send()
}

// DescribeAclAttributesWithContext is the same as DescribeAclAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAclAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeAclAttributesWithContext(ctx volcstack.Context, input *DescribeAclAttributesInput, opts ...request.Option) (*DescribeAclAttributesOutput, error) {
	req, out := c.DescribeAclAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAclsCommon = "DescribeAcls"

// DescribeAclsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAclsCommon operation. The "output" return
// value will be populated with the DescribeAclsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAclsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAclsCommon Send returns without error.
//
// See DescribeAclsCommon for more information on using the DescribeAclsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAclsCommonRequest method.
//    req, resp := client.DescribeAclsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeAclsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAclsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAclsCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeAclsCommon for usage and error information.
func (c *CLB) DescribeAclsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAclsCommonRequest(input)
	return out, req.Send()
}

// DescribeAclsCommonWithContext is the same as DescribeAclsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAclsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeAclsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAclsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAcls = "DescribeAcls"

// DescribeAclsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAcls operation. The "output" return
// value will be populated with the DescribeAclsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAclsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAclsCommon Send returns without error.
//
// See DescribeAcls for more information on using the DescribeAcls
// API call, and error handling.
//
//    // Example sending a request using the DescribeAclsRequest method.
//    req, resp := client.DescribeAclsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeAclsRequest(input *DescribeAclsInput) (req *request.Request, output *DescribeAclsOutput) {
	op := &request.Operation{
		Name:       opDescribeAcls,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAclsInput{}
	}

	output = &DescribeAclsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAcls API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeAcls for usage and error information.
func (c *CLB) DescribeAcls(input *DescribeAclsInput) (*DescribeAclsOutput, error) {
	req, out := c.DescribeAclsRequest(input)
	return out, req.Send()
}

// DescribeAclsWithContext is the same as DescribeAcls with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAcls for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeAclsWithContext(ctx volcstack.Context, input *DescribeAclsInput, opts ...request.Option) (*DescribeAclsOutput, error) {
	req, out := c.DescribeAclsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCertificatesCommon = "DescribeCertificates"

// DescribeCertificatesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCertificatesCommon operation. The "output" return
// value will be populated with the DescribeCertificatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCertificatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCertificatesCommon Send returns without error.
//
// See DescribeCertificatesCommon for more information on using the DescribeCertificatesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeCertificatesCommonRequest method.
//    req, resp := client.DescribeCertificatesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeCertificatesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeCertificatesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCertificatesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeCertificatesCommon for usage and error information.
func (c *CLB) DescribeCertificatesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeCertificatesCommonRequest(input)
	return out, req.Send()
}

// DescribeCertificatesCommonWithContext is the same as DescribeCertificatesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCertificatesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeCertificatesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeCertificatesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeCertificates = "DescribeCertificates"

// DescribeCertificatesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeCertificates operation. The "output" return
// value will be populated with the DescribeCertificatesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeCertificatesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeCertificatesCommon Send returns without error.
//
// See DescribeCertificates for more information on using the DescribeCertificates
// API call, and error handling.
//
//    // Example sending a request using the DescribeCertificatesRequest method.
//    req, resp := client.DescribeCertificatesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeCertificatesRequest(input *DescribeCertificatesInput) (req *request.Request, output *DescribeCertificatesOutput) {
	op := &request.Operation{
		Name:       opDescribeCertificates,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeCertificatesInput{}
	}

	output = &DescribeCertificatesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeCertificates API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeCertificates for usage and error information.
func (c *CLB) DescribeCertificates(input *DescribeCertificatesInput) (*DescribeCertificatesOutput, error) {
	req, out := c.DescribeCertificatesRequest(input)
	return out, req.Send()
}

// DescribeCertificatesWithContext is the same as DescribeCertificates with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeCertificates for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeCertificatesWithContext(ctx volcstack.Context, input *DescribeCertificatesInput, opts ...request.Option) (*DescribeCertificatesOutput, error) {
	req, out := c.DescribeCertificatesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeListenerAttributesCommon = "DescribeListenerAttributes"

// DescribeListenerAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeListenerAttributesCommon operation. The "output" return
// value will be populated with the DescribeListenerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenerAttributesCommon Send returns without error.
//
// See DescribeListenerAttributesCommon for more information on using the DescribeListenerAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenerAttributesCommonRequest method.
//    req, resp := client.DescribeListenerAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeListenerAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeListenerAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeListenerAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeListenerAttributesCommon for usage and error information.
func (c *CLB) DescribeListenerAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeListenerAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeListenerAttributesCommonWithContext is the same as DescribeListenerAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListenerAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeListenerAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeListenerAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeListenerAttributes = "DescribeListenerAttributes"

// DescribeListenerAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeListenerAttributes operation. The "output" return
// value will be populated with the DescribeListenerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenerAttributesCommon Send returns without error.
//
// See DescribeListenerAttributes for more information on using the DescribeListenerAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenerAttributesRequest method.
//    req, resp := client.DescribeListenerAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeListenerAttributesRequest(input *DescribeListenerAttributesInput) (req *request.Request, output *DescribeListenerAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeListenerAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeListenerAttributesInput{}
	}

	output = &DescribeListenerAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeListenerAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeListenerAttributes for usage and error information.
func (c *CLB) DescribeListenerAttributes(input *DescribeListenerAttributesInput) (*DescribeListenerAttributesOutput, error) {
	req, out := c.DescribeListenerAttributesRequest(input)
	return out, req.Send()
}

// DescribeListenerAttributesWithContext is the same as DescribeListenerAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListenerAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeListenerAttributesWithContext(ctx volcstack.Context, input *DescribeListenerAttributesInput, opts ...request.Option) (*DescribeListenerAttributesOutput, error) {
	req, out := c.DescribeListenerAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeListenerHealthCommon = "DescribeListenerHealth"

// DescribeListenerHealthCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeListenerHealthCommon operation. The "output" return
// value will be populated with the DescribeListenerHealthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenerHealthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenerHealthCommon Send returns without error.
//
// See DescribeListenerHealthCommon for more information on using the DescribeListenerHealthCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenerHealthCommonRequest method.
//    req, resp := client.DescribeListenerHealthCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeListenerHealthCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeListenerHealthCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeListenerHealthCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeListenerHealthCommon for usage and error information.
func (c *CLB) DescribeListenerHealthCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeListenerHealthCommonRequest(input)
	return out, req.Send()
}

// DescribeListenerHealthCommonWithContext is the same as DescribeListenerHealthCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListenerHealthCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeListenerHealthCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeListenerHealthCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeListenerHealth = "DescribeListenerHealth"

// DescribeListenerHealthRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeListenerHealth operation. The "output" return
// value will be populated with the DescribeListenerHealthCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenerHealthCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenerHealthCommon Send returns without error.
//
// See DescribeListenerHealth for more information on using the DescribeListenerHealth
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenerHealthRequest method.
//    req, resp := client.DescribeListenerHealthRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeListenerHealthRequest(input *DescribeListenerHealthInput) (req *request.Request, output *DescribeListenerHealthOutput) {
	op := &request.Operation{
		Name:       opDescribeListenerHealth,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeListenerHealthInput{}
	}

	output = &DescribeListenerHealthOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeListenerHealth API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeListenerHealth for usage and error information.
func (c *CLB) DescribeListenerHealth(input *DescribeListenerHealthInput) (*DescribeListenerHealthOutput, error) {
	req, out := c.DescribeListenerHealthRequest(input)
	return out, req.Send()
}

// DescribeListenerHealthWithContext is the same as DescribeListenerHealth with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListenerHealth for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeListenerHealthWithContext(ctx volcstack.Context, input *DescribeListenerHealthInput, opts ...request.Option) (*DescribeListenerHealthOutput, error) {
	req, out := c.DescribeListenerHealthRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeListenersCommon = "DescribeListeners"

// DescribeListenersCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeListenersCommon operation. The "output" return
// value will be populated with the DescribeListenersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenersCommon Send returns without error.
//
// See DescribeListenersCommon for more information on using the DescribeListenersCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenersCommonRequest method.
//    req, resp := client.DescribeListenersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeListenersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeListenersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeListenersCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeListenersCommon for usage and error information.
func (c *CLB) DescribeListenersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeListenersCommonRequest(input)
	return out, req.Send()
}

// DescribeListenersCommonWithContext is the same as DescribeListenersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListenersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeListenersCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeListenersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeListeners = "DescribeListeners"

// DescribeListenersRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeListeners operation. The "output" return
// value will be populated with the DescribeListenersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeListenersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeListenersCommon Send returns without error.
//
// See DescribeListeners for more information on using the DescribeListeners
// API call, and error handling.
//
//    // Example sending a request using the DescribeListenersRequest method.
//    req, resp := client.DescribeListenersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeListenersRequest(input *DescribeListenersInput) (req *request.Request, output *DescribeListenersOutput) {
	op := &request.Operation{
		Name:       opDescribeListeners,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeListenersInput{}
	}

	output = &DescribeListenersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeListeners API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeListeners for usage and error information.
func (c *CLB) DescribeListeners(input *DescribeListenersInput) (*DescribeListenersOutput, error) {
	req, out := c.DescribeListenersRequest(input)
	return out, req.Send()
}

// DescribeListenersWithContext is the same as DescribeListeners with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeListeners for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeListenersWithContext(ctx volcstack.Context, input *DescribeListenersInput, opts ...request.Option) (*DescribeListenersOutput, error) {
	req, out := c.DescribeListenersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeLoadBalancerAttributesCommon = "DescribeLoadBalancerAttributes"

// DescribeLoadBalancerAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeLoadBalancerAttributesCommon operation. The "output" return
// value will be populated with the DescribeLoadBalancerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeLoadBalancerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeLoadBalancerAttributesCommon Send returns without error.
//
// See DescribeLoadBalancerAttributesCommon for more information on using the DescribeLoadBalancerAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeLoadBalancerAttributesCommonRequest method.
//    req, resp := client.DescribeLoadBalancerAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeLoadBalancerAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeLoadBalancerAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeLoadBalancerAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeLoadBalancerAttributesCommon for usage and error information.
func (c *CLB) DescribeLoadBalancerAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeLoadBalancerAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeLoadBalancerAttributesCommonWithContext is the same as DescribeLoadBalancerAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeLoadBalancerAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeLoadBalancerAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeLoadBalancerAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeLoadBalancerAttributes = "DescribeLoadBalancerAttributes"

// DescribeLoadBalancerAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeLoadBalancerAttributes operation. The "output" return
// value will be populated with the DescribeLoadBalancerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeLoadBalancerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeLoadBalancerAttributesCommon Send returns without error.
//
// See DescribeLoadBalancerAttributes for more information on using the DescribeLoadBalancerAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeLoadBalancerAttributesRequest method.
//    req, resp := client.DescribeLoadBalancerAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeLoadBalancerAttributesRequest(input *DescribeLoadBalancerAttributesInput) (req *request.Request, output *DescribeLoadBalancerAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeLoadBalancerAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeLoadBalancerAttributesInput{}
	}

	output = &DescribeLoadBalancerAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeLoadBalancerAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeLoadBalancerAttributes for usage and error information.
func (c *CLB) DescribeLoadBalancerAttributes(input *DescribeLoadBalancerAttributesInput) (*DescribeLoadBalancerAttributesOutput, error) {
	req, out := c.DescribeLoadBalancerAttributesRequest(input)
	return out, req.Send()
}

// DescribeLoadBalancerAttributesWithContext is the same as DescribeLoadBalancerAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeLoadBalancerAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeLoadBalancerAttributesWithContext(ctx volcstack.Context, input *DescribeLoadBalancerAttributesInput, opts ...request.Option) (*DescribeLoadBalancerAttributesOutput, error) {
	req, out := c.DescribeLoadBalancerAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeLoadBalancersCommon = "DescribeLoadBalancers"

// DescribeLoadBalancersCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeLoadBalancersCommon operation. The "output" return
// value will be populated with the DescribeLoadBalancersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeLoadBalancersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeLoadBalancersCommon Send returns without error.
//
// See DescribeLoadBalancersCommon for more information on using the DescribeLoadBalancersCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeLoadBalancersCommonRequest method.
//    req, resp := client.DescribeLoadBalancersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeLoadBalancersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeLoadBalancersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeLoadBalancersCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeLoadBalancersCommon for usage and error information.
func (c *CLB) DescribeLoadBalancersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeLoadBalancersCommonRequest(input)
	return out, req.Send()
}

// DescribeLoadBalancersCommonWithContext is the same as DescribeLoadBalancersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeLoadBalancersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeLoadBalancersCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeLoadBalancersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeLoadBalancers = "DescribeLoadBalancers"

// DescribeLoadBalancersRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeLoadBalancers operation. The "output" return
// value will be populated with the DescribeLoadBalancersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeLoadBalancersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeLoadBalancersCommon Send returns without error.
//
// See DescribeLoadBalancers for more information on using the DescribeLoadBalancers
// API call, and error handling.
//
//    // Example sending a request using the DescribeLoadBalancersRequest method.
//    req, resp := client.DescribeLoadBalancersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeLoadBalancersRequest(input *DescribeLoadBalancersInput) (req *request.Request, output *DescribeLoadBalancersOutput) {
	op := &request.Operation{
		Name:       opDescribeLoadBalancers,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeLoadBalancersInput{}
	}

	output = &DescribeLoadBalancersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeLoadBalancers API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeLoadBalancers for usage and error information.
func (c *CLB) DescribeLoadBalancers(input *DescribeLoadBalancersInput) (*DescribeLoadBalancersOutput, error) {
	req, out := c.DescribeLoadBalancersRequest(input)
	return out, req.Send()
}

// DescribeLoadBalancersWithContext is the same as DescribeLoadBalancers with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeLoadBalancers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeLoadBalancersWithContext(ctx volcstack.Context, input *DescribeLoadBalancersInput, opts ...request.Option) (*DescribeLoadBalancersOutput, error) {
	req, out := c.DescribeLoadBalancersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRulesCommon = "DescribeRules"

// DescribeRulesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRulesCommon operation. The "output" return
// value will be populated with the DescribeRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRulesCommon Send returns without error.
//
// See DescribeRulesCommon for more information on using the DescribeRulesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeRulesCommonRequest method.
//    req, resp := client.DescribeRulesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeRulesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeRulesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeRulesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeRulesCommon for usage and error information.
func (c *CLB) DescribeRulesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeRulesCommonRequest(input)
	return out, req.Send()
}

// DescribeRulesCommonWithContext is the same as DescribeRulesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRulesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeRulesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeRulesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeRules = "DescribeRules"

// DescribeRulesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeRules operation. The "output" return
// value will be populated with the DescribeRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeRulesCommon Send returns without error.
//
// See DescribeRules for more information on using the DescribeRules
// API call, and error handling.
//
//    // Example sending a request using the DescribeRulesRequest method.
//    req, resp := client.DescribeRulesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeRulesRequest(input *DescribeRulesInput) (req *request.Request, output *DescribeRulesOutput) {
	op := &request.Operation{
		Name:       opDescribeRules,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeRulesInput{}
	}

	output = &DescribeRulesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeRules API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeRules for usage and error information.
func (c *CLB) DescribeRules(input *DescribeRulesInput) (*DescribeRulesOutput, error) {
	req, out := c.DescribeRulesRequest(input)
	return out, req.Send()
}

// DescribeRulesWithContext is the same as DescribeRules with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeRules for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeRulesWithContext(ctx volcstack.Context, input *DescribeRulesInput, opts ...request.Option) (*DescribeRulesOutput, error) {
	req, out := c.DescribeRulesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeServerGroupAttributesCommon = "DescribeServerGroupAttributes"

// DescribeServerGroupAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeServerGroupAttributesCommon operation. The "output" return
// value will be populated with the DescribeServerGroupAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeServerGroupAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeServerGroupAttributesCommon Send returns without error.
//
// See DescribeServerGroupAttributesCommon for more information on using the DescribeServerGroupAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeServerGroupAttributesCommonRequest method.
//    req, resp := client.DescribeServerGroupAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeServerGroupAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeServerGroupAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeServerGroupAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeServerGroupAttributesCommon for usage and error information.
func (c *CLB) DescribeServerGroupAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeServerGroupAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeServerGroupAttributesCommonWithContext is the same as DescribeServerGroupAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeServerGroupAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeServerGroupAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeServerGroupAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeServerGroupAttributes = "DescribeServerGroupAttributes"

// DescribeServerGroupAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeServerGroupAttributes operation. The "output" return
// value will be populated with the DescribeServerGroupAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeServerGroupAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeServerGroupAttributesCommon Send returns without error.
//
// See DescribeServerGroupAttributes for more information on using the DescribeServerGroupAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeServerGroupAttributesRequest method.
//    req, resp := client.DescribeServerGroupAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeServerGroupAttributesRequest(input *DescribeServerGroupAttributesInput) (req *request.Request, output *DescribeServerGroupAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeServerGroupAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeServerGroupAttributesInput{}
	}

	output = &DescribeServerGroupAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeServerGroupAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeServerGroupAttributes for usage and error information.
func (c *CLB) DescribeServerGroupAttributes(input *DescribeServerGroupAttributesInput) (*DescribeServerGroupAttributesOutput, error) {
	req, out := c.DescribeServerGroupAttributesRequest(input)
	return out, req.Send()
}

// DescribeServerGroupAttributesWithContext is the same as DescribeServerGroupAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeServerGroupAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeServerGroupAttributesWithContext(ctx volcstack.Context, input *DescribeServerGroupAttributesInput, opts ...request.Option) (*DescribeServerGroupAttributesOutput, error) {
	req, out := c.DescribeServerGroupAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeServerGroupsCommon = "DescribeServerGroups"

// DescribeServerGroupsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeServerGroupsCommon operation. The "output" return
// value will be populated with the DescribeServerGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeServerGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeServerGroupsCommon Send returns without error.
//
// See DescribeServerGroupsCommon for more information on using the DescribeServerGroupsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeServerGroupsCommonRequest method.
//    req, resp := client.DescribeServerGroupsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeServerGroupsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeServerGroupsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeServerGroupsCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeServerGroupsCommon for usage and error information.
func (c *CLB) DescribeServerGroupsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeServerGroupsCommonRequest(input)
	return out, req.Send()
}

// DescribeServerGroupsCommonWithContext is the same as DescribeServerGroupsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeServerGroupsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeServerGroupsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeServerGroupsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeServerGroups = "DescribeServerGroups"

// DescribeServerGroupsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeServerGroups operation. The "output" return
// value will be populated with the DescribeServerGroupsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeServerGroupsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeServerGroupsCommon Send returns without error.
//
// See DescribeServerGroups for more information on using the DescribeServerGroups
// API call, and error handling.
//
//    // Example sending a request using the DescribeServerGroupsRequest method.
//    req, resp := client.DescribeServerGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DescribeServerGroupsRequest(input *DescribeServerGroupsInput) (req *request.Request, output *DescribeServerGroupsOutput) {
	op := &request.Operation{
		Name:       opDescribeServerGroups,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeServerGroupsInput{}
	}

	output = &DescribeServerGroupsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeServerGroups API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DescribeServerGroups for usage and error information.
func (c *CLB) DescribeServerGroups(input *DescribeServerGroupsInput) (*DescribeServerGroupsOutput, error) {
	req, out := c.DescribeServerGroupsRequest(input)
	return out, req.Send()
}

// DescribeServerGroupsWithContext is the same as DescribeServerGroups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeServerGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DescribeServerGroupsWithContext(ctx volcstack.Context, input *DescribeServerGroupsInput, opts ...request.Option) (*DescribeServerGroupsOutput, error) {
	req, out := c.DescribeServerGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisableAccessLogCommon = "DisableAccessLog"

// DisableAccessLogCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DisableAccessLogCommon operation. The "output" return
// value will be populated with the DisableAccessLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableAccessLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableAccessLogCommon Send returns without error.
//
// See DisableAccessLogCommon for more information on using the DisableAccessLogCommon
// API call, and error handling.
//
//    // Example sending a request using the DisableAccessLogCommonRequest method.
//    req, resp := client.DisableAccessLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DisableAccessLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisableAccessLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DisableAccessLogCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DisableAccessLogCommon for usage and error information.
func (c *CLB) DisableAccessLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisableAccessLogCommonRequest(input)
	return out, req.Send()
}

// DisableAccessLogCommonWithContext is the same as DisableAccessLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DisableAccessLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DisableAccessLogCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisableAccessLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisableAccessLog = "DisableAccessLog"

// DisableAccessLogRequest generates a "volcstack/request.Request" representing the
// client's request for the DisableAccessLog operation. The "output" return
// value will be populated with the DisableAccessLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DisableAccessLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after DisableAccessLogCommon Send returns without error.
//
// See DisableAccessLog for more information on using the DisableAccessLog
// API call, and error handling.
//
//    // Example sending a request using the DisableAccessLogRequest method.
//    req, resp := client.DisableAccessLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) DisableAccessLogRequest(input *DisableAccessLogInput) (req *request.Request, output *DisableAccessLogOutput) {
	op := &request.Operation{
		Name:       opDisableAccessLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DisableAccessLogInput{}
	}

	output = &DisableAccessLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DisableAccessLog API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation DisableAccessLog for usage and error information.
func (c *CLB) DisableAccessLog(input *DisableAccessLogInput) (*DisableAccessLogOutput, error) {
	req, out := c.DisableAccessLogRequest(input)
	return out, req.Send()
}

// DisableAccessLogWithContext is the same as DisableAccessLog with the addition of
// the ability to pass a context and additional request options.
//
// See DisableAccessLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) DisableAccessLogWithContext(ctx volcstack.Context, input *DisableAccessLogInput, opts ...request.Option) (*DisableAccessLogOutput, error) {
	req, out := c.DisableAccessLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableAccessLogCommon = "EnableAccessLog"

// EnableAccessLogCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the EnableAccessLogCommon operation. The "output" return
// value will be populated with the EnableAccessLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableAccessLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableAccessLogCommon Send returns without error.
//
// See EnableAccessLogCommon for more information on using the EnableAccessLogCommon
// API call, and error handling.
//
//    // Example sending a request using the EnableAccessLogCommonRequest method.
//    req, resp := client.EnableAccessLogCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) EnableAccessLogCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opEnableAccessLogCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// EnableAccessLogCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation EnableAccessLogCommon for usage and error information.
func (c *CLB) EnableAccessLogCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.EnableAccessLogCommonRequest(input)
	return out, req.Send()
}

// EnableAccessLogCommonWithContext is the same as EnableAccessLogCommon with the addition of
// the ability to pass a context and additional request options.
//
// See EnableAccessLogCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) EnableAccessLogCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.EnableAccessLogCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEnableAccessLog = "EnableAccessLog"

// EnableAccessLogRequest generates a "volcstack/request.Request" representing the
// client's request for the EnableAccessLog operation. The "output" return
// value will be populated with the EnableAccessLogCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned EnableAccessLogCommon Request to send the API call to the service.
// the "output" return value is not valid until after EnableAccessLogCommon Send returns without error.
//
// See EnableAccessLog for more information on using the EnableAccessLog
// API call, and error handling.
//
//    // Example sending a request using the EnableAccessLogRequest method.
//    req, resp := client.EnableAccessLogRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) EnableAccessLogRequest(input *EnableAccessLogInput) (req *request.Request, output *EnableAccessLogOutput) {
	op := &request.Operation{
		Name:       opEnableAccessLog,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EnableAccessLogInput{}
	}

	output = &EnableAccessLogOutput{}
	req = c.newRequest(op, input, output)

	return
}

// EnableAccessLog API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation EnableAccessLog for usage and error information.
func (c *CLB) EnableAccessLog(input *EnableAccessLogInput) (*EnableAccessLogOutput, error) {
	req, out := c.EnableAccessLogRequest(input)
	return out, req.Send()
}

// EnableAccessLogWithContext is the same as EnableAccessLog with the addition of
// the ability to pass a context and additional request options.
//
// See EnableAccessLog for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) EnableAccessLogWithContext(ctx volcstack.Context, input *EnableAccessLogInput, opts ...request.Option) (*EnableAccessLogOutput, error) {
	req, out := c.EnableAccessLogRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyAclAttributesCommon = "ModifyAclAttributes"

// ModifyAclAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyAclAttributesCommon operation. The "output" return
// value will be populated with the ModifyAclAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyAclAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyAclAttributesCommon Send returns without error.
//
// See ModifyAclAttributesCommon for more information on using the ModifyAclAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyAclAttributesCommonRequest method.
//    req, resp := client.ModifyAclAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyAclAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyAclAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyAclAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyAclAttributesCommon for usage and error information.
func (c *CLB) ModifyAclAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyAclAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyAclAttributesCommonWithContext is the same as ModifyAclAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyAclAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyAclAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyAclAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyAclAttributes = "ModifyAclAttributes"

// ModifyAclAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyAclAttributes operation. The "output" return
// value will be populated with the ModifyAclAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyAclAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyAclAttributesCommon Send returns without error.
//
// See ModifyAclAttributes for more information on using the ModifyAclAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyAclAttributesRequest method.
//    req, resp := client.ModifyAclAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyAclAttributesRequest(input *ModifyAclAttributesInput) (req *request.Request, output *ModifyAclAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyAclAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyAclAttributesInput{}
	}

	output = &ModifyAclAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyAclAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyAclAttributes for usage and error information.
func (c *CLB) ModifyAclAttributes(input *ModifyAclAttributesInput) (*ModifyAclAttributesOutput, error) {
	req, out := c.ModifyAclAttributesRequest(input)
	return out, req.Send()
}

// ModifyAclAttributesWithContext is the same as ModifyAclAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyAclAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyAclAttributesWithContext(ctx volcstack.Context, input *ModifyAclAttributesInput, opts ...request.Option) (*ModifyAclAttributesOutput, error) {
	req, out := c.ModifyAclAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyListenerAttributesCommon = "ModifyListenerAttributes"

// ModifyListenerAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyListenerAttributesCommon operation. The "output" return
// value will be populated with the ModifyListenerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyListenerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyListenerAttributesCommon Send returns without error.
//
// See ModifyListenerAttributesCommon for more information on using the ModifyListenerAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyListenerAttributesCommonRequest method.
//    req, resp := client.ModifyListenerAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyListenerAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyListenerAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyListenerAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyListenerAttributesCommon for usage and error information.
func (c *CLB) ModifyListenerAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyListenerAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyListenerAttributesCommonWithContext is the same as ModifyListenerAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyListenerAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyListenerAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyListenerAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyListenerAttributes = "ModifyListenerAttributes"

// ModifyListenerAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyListenerAttributes operation. The "output" return
// value will be populated with the ModifyListenerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyListenerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyListenerAttributesCommon Send returns without error.
//
// See ModifyListenerAttributes for more information on using the ModifyListenerAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyListenerAttributesRequest method.
//    req, resp := client.ModifyListenerAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyListenerAttributesRequest(input *ModifyListenerAttributesInput) (req *request.Request, output *ModifyListenerAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyListenerAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyListenerAttributesInput{}
	}

	output = &ModifyListenerAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyListenerAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyListenerAttributes for usage and error information.
func (c *CLB) ModifyListenerAttributes(input *ModifyListenerAttributesInput) (*ModifyListenerAttributesOutput, error) {
	req, out := c.ModifyListenerAttributesRequest(input)
	return out, req.Send()
}

// ModifyListenerAttributesWithContext is the same as ModifyListenerAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyListenerAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyListenerAttributesWithContext(ctx volcstack.Context, input *ModifyListenerAttributesInput, opts ...request.Option) (*ModifyListenerAttributesOutput, error) {
	req, out := c.ModifyListenerAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyLoadBalancerAttributesCommon = "ModifyLoadBalancerAttributes"

// ModifyLoadBalancerAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyLoadBalancerAttributesCommon operation. The "output" return
// value will be populated with the ModifyLoadBalancerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyLoadBalancerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyLoadBalancerAttributesCommon Send returns without error.
//
// See ModifyLoadBalancerAttributesCommon for more information on using the ModifyLoadBalancerAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyLoadBalancerAttributesCommonRequest method.
//    req, resp := client.ModifyLoadBalancerAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyLoadBalancerAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyLoadBalancerAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyLoadBalancerAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyLoadBalancerAttributesCommon for usage and error information.
func (c *CLB) ModifyLoadBalancerAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyLoadBalancerAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyLoadBalancerAttributesCommonWithContext is the same as ModifyLoadBalancerAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyLoadBalancerAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyLoadBalancerAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyLoadBalancerAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyLoadBalancerAttributes = "ModifyLoadBalancerAttributes"

// ModifyLoadBalancerAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyLoadBalancerAttributes operation. The "output" return
// value will be populated with the ModifyLoadBalancerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyLoadBalancerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyLoadBalancerAttributesCommon Send returns without error.
//
// See ModifyLoadBalancerAttributes for more information on using the ModifyLoadBalancerAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyLoadBalancerAttributesRequest method.
//    req, resp := client.ModifyLoadBalancerAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyLoadBalancerAttributesRequest(input *ModifyLoadBalancerAttributesInput) (req *request.Request, output *ModifyLoadBalancerAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyLoadBalancerAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyLoadBalancerAttributesInput{}
	}

	output = &ModifyLoadBalancerAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyLoadBalancerAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyLoadBalancerAttributes for usage and error information.
func (c *CLB) ModifyLoadBalancerAttributes(input *ModifyLoadBalancerAttributesInput) (*ModifyLoadBalancerAttributesOutput, error) {
	req, out := c.ModifyLoadBalancerAttributesRequest(input)
	return out, req.Send()
}

// ModifyLoadBalancerAttributesWithContext is the same as ModifyLoadBalancerAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyLoadBalancerAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyLoadBalancerAttributesWithContext(ctx volcstack.Context, input *ModifyLoadBalancerAttributesInput, opts ...request.Option) (*ModifyLoadBalancerAttributesOutput, error) {
	req, out := c.ModifyLoadBalancerAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyRulesCommon = "ModifyRules"

// ModifyRulesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyRulesCommon operation. The "output" return
// value will be populated with the ModifyRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyRulesCommon Send returns without error.
//
// See ModifyRulesCommon for more information on using the ModifyRulesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyRulesCommonRequest method.
//    req, resp := client.ModifyRulesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyRulesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyRulesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyRulesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyRulesCommon for usage and error information.
func (c *CLB) ModifyRulesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyRulesCommonRequest(input)
	return out, req.Send()
}

// ModifyRulesCommonWithContext is the same as ModifyRulesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyRulesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyRulesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyRulesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyRules = "ModifyRules"

// ModifyRulesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyRules operation. The "output" return
// value will be populated with the ModifyRulesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyRulesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyRulesCommon Send returns without error.
//
// See ModifyRules for more information on using the ModifyRules
// API call, and error handling.
//
//    // Example sending a request using the ModifyRulesRequest method.
//    req, resp := client.ModifyRulesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyRulesRequest(input *ModifyRulesInput) (req *request.Request, output *ModifyRulesOutput) {
	op := &request.Operation{
		Name:       opModifyRules,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyRulesInput{}
	}

	output = &ModifyRulesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyRules API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyRules for usage and error information.
func (c *CLB) ModifyRules(input *ModifyRulesInput) (*ModifyRulesOutput, error) {
	req, out := c.ModifyRulesRequest(input)
	return out, req.Send()
}

// ModifyRulesWithContext is the same as ModifyRules with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyRules for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyRulesWithContext(ctx volcstack.Context, input *ModifyRulesInput, opts ...request.Option) (*ModifyRulesOutput, error) {
	req, out := c.ModifyRulesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyServerGroupAttributesCommon = "ModifyServerGroupAttributes"

// ModifyServerGroupAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyServerGroupAttributesCommon operation. The "output" return
// value will be populated with the ModifyServerGroupAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyServerGroupAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyServerGroupAttributesCommon Send returns without error.
//
// See ModifyServerGroupAttributesCommon for more information on using the ModifyServerGroupAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyServerGroupAttributesCommonRequest method.
//    req, resp := client.ModifyServerGroupAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyServerGroupAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyServerGroupAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyServerGroupAttributesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyServerGroupAttributesCommon for usage and error information.
func (c *CLB) ModifyServerGroupAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyServerGroupAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyServerGroupAttributesCommonWithContext is the same as ModifyServerGroupAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyServerGroupAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyServerGroupAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyServerGroupAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyServerGroupAttributes = "ModifyServerGroupAttributes"

// ModifyServerGroupAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyServerGroupAttributes operation. The "output" return
// value will be populated with the ModifyServerGroupAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyServerGroupAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyServerGroupAttributesCommon Send returns without error.
//
// See ModifyServerGroupAttributes for more information on using the ModifyServerGroupAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyServerGroupAttributesRequest method.
//    req, resp := client.ModifyServerGroupAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) ModifyServerGroupAttributesRequest(input *ModifyServerGroupAttributesInput) (req *request.Request, output *ModifyServerGroupAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyServerGroupAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyServerGroupAttributesInput{}
	}

	output = &ModifyServerGroupAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyServerGroupAttributes API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation ModifyServerGroupAttributes for usage and error information.
func (c *CLB) ModifyServerGroupAttributes(input *ModifyServerGroupAttributesInput) (*ModifyServerGroupAttributesOutput, error) {
	req, out := c.ModifyServerGroupAttributesRequest(input)
	return out, req.Send()
}

// ModifyServerGroupAttributesWithContext is the same as ModifyServerGroupAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyServerGroupAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) ModifyServerGroupAttributesWithContext(ctx volcstack.Context, input *ModifyServerGroupAttributesInput, opts ...request.Option) (*ModifyServerGroupAttributesOutput, error) {
	req, out := c.ModifyServerGroupAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRemoveAclEntriesCommon = "RemoveAclEntries"

// RemoveAclEntriesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RemoveAclEntriesCommon operation. The "output" return
// value will be populated with the RemoveAclEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RemoveAclEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after RemoveAclEntriesCommon Send returns without error.
//
// See RemoveAclEntriesCommon for more information on using the RemoveAclEntriesCommon
// API call, and error handling.
//
//    // Example sending a request using the RemoveAclEntriesCommonRequest method.
//    req, resp := client.RemoveAclEntriesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) RemoveAclEntriesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRemoveAclEntriesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RemoveAclEntriesCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation RemoveAclEntriesCommon for usage and error information.
func (c *CLB) RemoveAclEntriesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RemoveAclEntriesCommonRequest(input)
	return out, req.Send()
}

// RemoveAclEntriesCommonWithContext is the same as RemoveAclEntriesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RemoveAclEntriesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) RemoveAclEntriesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RemoveAclEntriesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRemoveAclEntries = "RemoveAclEntries"

// RemoveAclEntriesRequest generates a "volcstack/request.Request" representing the
// client's request for the RemoveAclEntries operation. The "output" return
// value will be populated with the RemoveAclEntriesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RemoveAclEntriesCommon Request to send the API call to the service.
// the "output" return value is not valid until after RemoveAclEntriesCommon Send returns without error.
//
// See RemoveAclEntries for more information on using the RemoveAclEntries
// API call, and error handling.
//
//    // Example sending a request using the RemoveAclEntriesRequest method.
//    req, resp := client.RemoveAclEntriesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) RemoveAclEntriesRequest(input *RemoveAclEntriesInput) (req *request.Request, output *RemoveAclEntriesOutput) {
	op := &request.Operation{
		Name:       opRemoveAclEntries,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RemoveAclEntriesInput{}
	}

	output = &RemoveAclEntriesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RemoveAclEntries API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation RemoveAclEntries for usage and error information.
func (c *CLB) RemoveAclEntries(input *RemoveAclEntriesInput) (*RemoveAclEntriesOutput, error) {
	req, out := c.RemoveAclEntriesRequest(input)
	return out, req.Send()
}

// RemoveAclEntriesWithContext is the same as RemoveAclEntries with the addition of
// the ability to pass a context and additional request options.
//
// See RemoveAclEntries for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) RemoveAclEntriesWithContext(ctx volcstack.Context, input *RemoveAclEntriesInput, opts ...request.Option) (*RemoveAclEntriesOutput, error) {
	req, out := c.RemoveAclEntriesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRemoveServerGroupBackendServersCommon = "RemoveServerGroupBackendServers"

// RemoveServerGroupBackendServersCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RemoveServerGroupBackendServersCommon operation. The "output" return
// value will be populated with the RemoveServerGroupBackendServersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RemoveServerGroupBackendServersCommon Request to send the API call to the service.
// the "output" return value is not valid until after RemoveServerGroupBackendServersCommon Send returns without error.
//
// See RemoveServerGroupBackendServersCommon for more information on using the RemoveServerGroupBackendServersCommon
// API call, and error handling.
//
//    // Example sending a request using the RemoveServerGroupBackendServersCommonRequest method.
//    req, resp := client.RemoveServerGroupBackendServersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) RemoveServerGroupBackendServersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRemoveServerGroupBackendServersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RemoveServerGroupBackendServersCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation RemoveServerGroupBackendServersCommon for usage and error information.
func (c *CLB) RemoveServerGroupBackendServersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RemoveServerGroupBackendServersCommonRequest(input)
	return out, req.Send()
}

// RemoveServerGroupBackendServersCommonWithContext is the same as RemoveServerGroupBackendServersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RemoveServerGroupBackendServersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) RemoveServerGroupBackendServersCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RemoveServerGroupBackendServersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRemoveServerGroupBackendServers = "RemoveServerGroupBackendServers"

// RemoveServerGroupBackendServersRequest generates a "volcstack/request.Request" representing the
// client's request for the RemoveServerGroupBackendServers operation. The "output" return
// value will be populated with the RemoveServerGroupBackendServersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RemoveServerGroupBackendServersCommon Request to send the API call to the service.
// the "output" return value is not valid until after RemoveServerGroupBackendServersCommon Send returns without error.
//
// See RemoveServerGroupBackendServers for more information on using the RemoveServerGroupBackendServers
// API call, and error handling.
//
//    // Example sending a request using the RemoveServerGroupBackendServersRequest method.
//    req, resp := client.RemoveServerGroupBackendServersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) RemoveServerGroupBackendServersRequest(input *RemoveServerGroupBackendServersInput) (req *request.Request, output *RemoveServerGroupBackendServersOutput) {
	op := &request.Operation{
		Name:       opRemoveServerGroupBackendServers,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RemoveServerGroupBackendServersInput{}
	}

	output = &RemoveServerGroupBackendServersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RemoveServerGroupBackendServers API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation RemoveServerGroupBackendServers for usage and error information.
func (c *CLB) RemoveServerGroupBackendServers(input *RemoveServerGroupBackendServersInput) (*RemoveServerGroupBackendServersOutput, error) {
	req, out := c.RemoveServerGroupBackendServersRequest(input)
	return out, req.Send()
}

// RemoveServerGroupBackendServersWithContext is the same as RemoveServerGroupBackendServers with the addition of
// the ability to pass a context and additional request options.
//
// See RemoveServerGroupBackendServers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) RemoveServerGroupBackendServersWithContext(ctx volcstack.Context, input *RemoveServerGroupBackendServersInput, opts ...request.Option) (*RemoveServerGroupBackendServersOutput, error) {
	req, out := c.RemoveServerGroupBackendServersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUploadCertificateCommon = "UploadCertificate"

// UploadCertificateCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the UploadCertificateCommon operation. The "output" return
// value will be populated with the UploadCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UploadCertificateCommon Send returns without error.
//
// See UploadCertificateCommon for more information on using the UploadCertificateCommon
// API call, and error handling.
//
//    // Example sending a request using the UploadCertificateCommonRequest method.
//    req, resp := client.UploadCertificateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) UploadCertificateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUploadCertificateCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// UploadCertificateCommon API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation UploadCertificateCommon for usage and error information.
func (c *CLB) UploadCertificateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UploadCertificateCommonRequest(input)
	return out, req.Send()
}

// UploadCertificateCommonWithContext is the same as UploadCertificateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UploadCertificateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) UploadCertificateCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UploadCertificateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUploadCertificate = "UploadCertificate"

// UploadCertificateRequest generates a "volcstack/request.Request" representing the
// client's request for the UploadCertificate operation. The "output" return
// value will be populated with the UploadCertificateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UploadCertificateCommon Request to send the API call to the service.
// the "output" return value is not valid until after UploadCertificateCommon Send returns without error.
//
// See UploadCertificate for more information on using the UploadCertificate
// API call, and error handling.
//
//    // Example sending a request using the UploadCertificateRequest method.
//    req, resp := client.UploadCertificateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CLB) UploadCertificateRequest(input *UploadCertificateInput) (req *request.Request, output *UploadCertificateOutput) {
	op := &request.Operation{
		Name:       opUploadCertificate,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UploadCertificateInput{}
	}

	output = &UploadCertificateOutput{}
	req = c.newRequest(op, input, output)

	return
}

// UploadCertificate API operation for CLB.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for CLB's
// API operation UploadCertificate for usage and error information.
func (c *CLB) UploadCertificate(input *UploadCertificateInput) (*UploadCertificateOutput, error) {
	req, out := c.UploadCertificateRequest(input)
	return out, req.Send()
}

// UploadCertificateWithContext is the same as UploadCertificate with the addition of
// the ability to pass a context and additional request options.
//
// See UploadCertificate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) UploadCertificateWithContext(ctx volcstack.Context, input *UploadCertificateInput, opts ...request.Option) (*UploadCertificateOutput, error) {
	req, out := c.UploadCertificateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccessLogForDescribeLoadBalancerAttributesOutput struct {
	_ struct{} `type:"structure"`

	BucketName *string `type:"string"`

	Enabled *bool `type:"boolean"`
}

// String returns the string representation
func (s AccessLogForDescribeLoadBalancerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AccessLogForDescribeLoadBalancerAttributesOutput) GoString() string {
	return s.String()
}

// SetBucketName sets the BucketName field's value.
func (s *AccessLogForDescribeLoadBalancerAttributesOutput) SetBucketName(v string) *AccessLogForDescribeLoadBalancerAttributesOutput {
	s.BucketName = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *AccessLogForDescribeLoadBalancerAttributesOutput) SetEnabled(v bool) *AccessLogForDescribeLoadBalancerAttributesOutput {
	s.Enabled = &v
	return s
}

type AclEntryForAddAclEntriesInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	// Entry is a required field
	Entry *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AclEntryForAddAclEntriesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AclEntryForAddAclEntriesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AclEntryForAddAclEntriesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AclEntryForAddAclEntriesInput"}
	if s.Entry == nil {
		invalidParams.Add(request.NewErrParamRequired("Entry"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *AclEntryForAddAclEntriesInput) SetDescription(v string) *AclEntryForAddAclEntriesInput {
	s.Description = &v
	return s
}

// SetEntry sets the Entry field's value.
func (s *AclEntryForAddAclEntriesInput) SetEntry(v string) *AclEntryForAddAclEntriesInput {
	s.Entry = &v
	return s
}

type AclEntryForDescribeAclAttributesOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	Entry *string `type:"string"`
}

// String returns the string representation
func (s AclEntryForDescribeAclAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AclEntryForDescribeAclAttributesOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *AclEntryForDescribeAclAttributesOutput) SetDescription(v string) *AclEntryForDescribeAclAttributesOutput {
	s.Description = &v
	return s
}

// SetEntry sets the Entry field's value.
func (s *AclEntryForDescribeAclAttributesOutput) SetEntry(v string) *AclEntryForDescribeAclAttributesOutput {
	s.Entry = &v
	return s
}

type AclForDescribeAclsOutput struct {
	_ struct{} `type:"structure"`

	AclEntryCount *int64 `type:"integer"`

	AclId *string `type:"string"`

	AclName *string `type:"string"`

	CreateTime *string `type:"string"`

	Description *string `type:"string"`

	Listeners []*string `type:"list"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s AclForDescribeAclsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AclForDescribeAclsOutput) GoString() string {
	return s.String()
}

// SetAclEntryCount sets the AclEntryCount field's value.
func (s *AclForDescribeAclsOutput) SetAclEntryCount(v int64) *AclForDescribeAclsOutput {
	s.AclEntryCount = &v
	return s
}

// SetAclId sets the AclId field's value.
func (s *AclForDescribeAclsOutput) SetAclId(v string) *AclForDescribeAclsOutput {
	s.AclId = &v
	return s
}

// SetAclName sets the AclName field's value.
func (s *AclForDescribeAclsOutput) SetAclName(v string) *AclForDescribeAclsOutput {
	s.AclName = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *AclForDescribeAclsOutput) SetCreateTime(v string) *AclForDescribeAclsOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *AclForDescribeAclsOutput) SetDescription(v string) *AclForDescribeAclsOutput {
	s.Description = &v
	return s
}

// SetListeners sets the Listeners field's value.
func (s *AclForDescribeAclsOutput) SetListeners(v []*string) *AclForDescribeAclsOutput {
	s.Listeners = v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *AclForDescribeAclsOutput) SetUpdateTime(v string) *AclForDescribeAclsOutput {
	s.UpdateTime = &v
	return s
}

type AddAclEntriesInput struct {
	_ struct{} `type:"structure"`

	// AclEntries is a required field
	AclEntries []*AclEntryForAddAclEntriesInput `type:"list" required:"true"`

	// AclId is a required field
	AclId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AddAclEntriesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AddAclEntriesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddAclEntriesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddAclEntriesInput"}
	if s.AclEntries == nil {
		invalidParams.Add(request.NewErrParamRequired("AclEntries"))
	}
	if s.AclId == nil {
		invalidParams.Add(request.NewErrParamRequired("AclId"))
	}
	if s.AclEntries != nil {
		for i, v := range s.AclEntries {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "AclEntries", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAclEntries sets the AclEntries field's value.
func (s *AddAclEntriesInput) SetAclEntries(v []*AclEntryForAddAclEntriesInput) *AddAclEntriesInput {
	s.AclEntries = v
	return s
}

// SetAclId sets the AclId field's value.
func (s *AddAclEntriesInput) SetAclId(v string) *AddAclEntriesInput {
	s.AclId = &v
	return s
}

type AddAclEntriesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s AddAclEntriesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AddAclEntriesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *AddAclEntriesOutput) SetRequestId(v string) *AddAclEntriesOutput {
	s.RequestId = &v
	return s
}

type AddServerGroupBackendServersInput struct {
	_ struct{} `type:"structure"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`

	// Servers is a required field
	Servers []*ServerForAddServerGroupBackendServersInput `type:"list" required:"true"`
}

// String returns the string representation
func (s AddServerGroupBackendServersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AddServerGroupBackendServersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddServerGroupBackendServersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AddServerGroupBackendServersInput"}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}
	if s.Servers == nil {
		invalidParams.Add(request.NewErrParamRequired("Servers"))
	}
	if s.Servers != nil {
		for i, v := range s.Servers {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Servers", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *AddServerGroupBackendServersInput) SetServerGroupId(v string) *AddServerGroupBackendServersInput {
	s.ServerGroupId = &v
	return s
}

// SetServers sets the Servers field's value.
func (s *AddServerGroupBackendServersInput) SetServers(v []*ServerForAddServerGroupBackendServersInput) *AddServerGroupBackendServersInput {
	s.Servers = v
	return s
}

type AddServerGroupBackendServersOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`

	ServerIds []*string `type:"list"`
}

// String returns the string representation
func (s AddServerGroupBackendServersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AddServerGroupBackendServersOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *AddServerGroupBackendServersOutput) SetRequestId(v string) *AddServerGroupBackendServersOutput {
	s.RequestId = &v
	return s
}

// SetServerIds sets the ServerIds field's value.
func (s *AddServerGroupBackendServersOutput) SetServerIds(v []*string) *AddServerGroupBackendServersOutput {
	s.ServerIds = v
	return s
}

type CertificateForDescribeCertificatesOutput struct {
	_ struct{} `type:"structure"`

	CertificateId *string `type:"string"`

	CertificateName *string `type:"string"`

	CreateTime *string `type:"string"`

	Description *string `type:"string"`

	DomainName *string `type:"string"`

	ExpiredAt *string `type:"string"`

	Listeners []*string `type:"list"`
}

// String returns the string representation
func (s CertificateForDescribeCertificatesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CertificateForDescribeCertificatesOutput) GoString() string {
	return s.String()
}

// SetCertificateId sets the CertificateId field's value.
func (s *CertificateForDescribeCertificatesOutput) SetCertificateId(v string) *CertificateForDescribeCertificatesOutput {
	s.CertificateId = &v
	return s
}

// SetCertificateName sets the CertificateName field's value.
func (s *CertificateForDescribeCertificatesOutput) SetCertificateName(v string) *CertificateForDescribeCertificatesOutput {
	s.CertificateName = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *CertificateForDescribeCertificatesOutput) SetCreateTime(v string) *CertificateForDescribeCertificatesOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CertificateForDescribeCertificatesOutput) SetDescription(v string) *CertificateForDescribeCertificatesOutput {
	s.Description = &v
	return s
}

// SetDomainName sets the DomainName field's value.
func (s *CertificateForDescribeCertificatesOutput) SetDomainName(v string) *CertificateForDescribeCertificatesOutput {
	s.DomainName = &v
	return s
}

// SetExpiredAt sets the ExpiredAt field's value.
func (s *CertificateForDescribeCertificatesOutput) SetExpiredAt(v string) *CertificateForDescribeCertificatesOutput {
	s.ExpiredAt = &v
	return s
}

// SetListeners sets the Listeners field's value.
func (s *CertificateForDescribeCertificatesOutput) SetListeners(v []*string) *CertificateForDescribeCertificatesOutput {
	s.Listeners = v
	return s
}

type CreateAclInput struct {
	_ struct{} `type:"structure"`

	AclName *string `type:"string"`

	Description *string `type:"string"`
}

// String returns the string representation
func (s CreateAclInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAclInput) GoString() string {
	return s.String()
}

// SetAclName sets the AclName field's value.
func (s *CreateAclInput) SetAclName(v string) *CreateAclInput {
	s.AclName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateAclInput) SetDescription(v string) *CreateAclInput {
	s.Description = &v
	return s
}

type CreateAclOutput struct {
	_ struct{} `type:"structure"`

	AclId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateAclOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateAclOutput) GoString() string {
	return s.String()
}

// SetAclId sets the AclId field's value.
func (s *CreateAclOutput) SetAclId(v string) *CreateAclOutput {
	s.AclId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateAclOutput) SetRequestId(v string) *CreateAclOutput {
	s.RequestId = &v
	return s
}

type CreateListenerInput struct {
	_ struct{} `type:"structure"`

	AclIds []*string `type:"list"`

	AclStatus *string `type:"string"`

	AclType *string `type:"string"`

	CertificateId *string `type:"string"`

	Description *string `type:"string"`

	Enabled *string `type:"string"`

	EstablishedTimeout *int64 `type:"integer"`

	HealthCheck *HealthCheckForCreateListenerInput `type:"structure"`

	ListenerName *string `type:"string"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`

	// Port is a required field
	Port *int64 `type:"integer" required:"true"`

	// Protocol is a required field
	Protocol *string `type:"string" required:"true"`

	Scheduler *string `type:"string"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateListenerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateListenerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateListenerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateListenerInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}
	if s.Port == nil {
		invalidParams.Add(request.NewErrParamRequired("Port"))
	}
	if s.Protocol == nil {
		invalidParams.Add(request.NewErrParamRequired("Protocol"))
	}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAclIds sets the AclIds field's value.
func (s *CreateListenerInput) SetAclIds(v []*string) *CreateListenerInput {
	s.AclIds = v
	return s
}

// SetAclStatus sets the AclStatus field's value.
func (s *CreateListenerInput) SetAclStatus(v string) *CreateListenerInput {
	s.AclStatus = &v
	return s
}

// SetAclType sets the AclType field's value.
func (s *CreateListenerInput) SetAclType(v string) *CreateListenerInput {
	s.AclType = &v
	return s
}

// SetCertificateId sets the CertificateId field's value.
func (s *CreateListenerInput) SetCertificateId(v string) *CreateListenerInput {
	s.CertificateId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateListenerInput) SetDescription(v string) *CreateListenerInput {
	s.Description = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *CreateListenerInput) SetEnabled(v string) *CreateListenerInput {
	s.Enabled = &v
	return s
}

// SetEstablishedTimeout sets the EstablishedTimeout field's value.
func (s *CreateListenerInput) SetEstablishedTimeout(v int64) *CreateListenerInput {
	s.EstablishedTimeout = &v
	return s
}

// SetHealthCheck sets the HealthCheck field's value.
func (s *CreateListenerInput) SetHealthCheck(v *HealthCheckForCreateListenerInput) *CreateListenerInput {
	s.HealthCheck = v
	return s
}

// SetListenerName sets the ListenerName field's value.
func (s *CreateListenerInput) SetListenerName(v string) *CreateListenerInput {
	s.ListenerName = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *CreateListenerInput) SetLoadBalancerId(v string) *CreateListenerInput {
	s.LoadBalancerId = &v
	return s
}

// SetPort sets the Port field's value.
func (s *CreateListenerInput) SetPort(v int64) *CreateListenerInput {
	s.Port = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *CreateListenerInput) SetProtocol(v string) *CreateListenerInput {
	s.Protocol = &v
	return s
}

// SetScheduler sets the Scheduler field's value.
func (s *CreateListenerInput) SetScheduler(v string) *CreateListenerInput {
	s.Scheduler = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *CreateListenerInput) SetServerGroupId(v string) *CreateListenerInput {
	s.ServerGroupId = &v
	return s
}

type CreateListenerOutput struct {
	_ struct{} `type:"structure"`

	ListenerId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateListenerOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateListenerOutput) GoString() string {
	return s.String()
}

// SetListenerId sets the ListenerId field's value.
func (s *CreateListenerOutput) SetListenerId(v string) *CreateListenerOutput {
	s.ListenerId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateListenerOutput) SetRequestId(v string) *CreateListenerOutput {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	EipBillingConfig *EipBillingConfigForCreateLoadBalancerInput `type:"structure"`

	EniAddress *string `type:"string"`

	LoadBalancerBillingType *int64 `type:"integer"`

	LoadBalancerName *string `type:"string"`

	// LoadBalancerSpec is a required field
	LoadBalancerSpec *string `type:"string" required:"true"`

	ModificationProtectionReason *string `type:"string"`

	ModificationProtectionStatus *string `type:"string"`

	// SubnetId is a required field
	SubnetId *string `type:"string" required:"true"`

	// Type is a required field
	Type *string `type:"string" required:"true"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s CreateLoadBalancerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoadBalancerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateLoadBalancerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateLoadBalancerInput"}
	if s.LoadBalancerSpec == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerSpec"))
	}
	if s.SubnetId == nil {
		invalidParams.Add(request.NewErrParamRequired("SubnetId"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateLoadBalancerInput) SetDescription(v string) *CreateLoadBalancerInput {
	s.Description = &v
	return s
}

// SetEipBillingConfig sets the EipBillingConfig field's value.
func (s *CreateLoadBalancerInput) SetEipBillingConfig(v *EipBillingConfigForCreateLoadBalancerInput) *CreateLoadBalancerInput {
	s.EipBillingConfig = v
	return s
}

// SetEniAddress sets the EniAddress field's value.
func (s *CreateLoadBalancerInput) SetEniAddress(v string) *CreateLoadBalancerInput {
	s.EniAddress = &v
	return s
}

// SetLoadBalancerBillingType sets the LoadBalancerBillingType field's value.
func (s *CreateLoadBalancerInput) SetLoadBalancerBillingType(v int64) *CreateLoadBalancerInput {
	s.LoadBalancerBillingType = &v
	return s
}

// SetLoadBalancerName sets the LoadBalancerName field's value.
func (s *CreateLoadBalancerInput) SetLoadBalancerName(v string) *CreateLoadBalancerInput {
	s.LoadBalancerName = &v
	return s
}

// SetLoadBalancerSpec sets the LoadBalancerSpec field's value.
func (s *CreateLoadBalancerInput) SetLoadBalancerSpec(v string) *CreateLoadBalancerInput {
	s.LoadBalancerSpec = &v
	return s
}

// SetModificationProtectionReason sets the ModificationProtectionReason field's value.
func (s *CreateLoadBalancerInput) SetModificationProtectionReason(v string) *CreateLoadBalancerInput {
	s.ModificationProtectionReason = &v
	return s
}

// SetModificationProtectionStatus sets the ModificationProtectionStatus field's value.
func (s *CreateLoadBalancerInput) SetModificationProtectionStatus(v string) *CreateLoadBalancerInput {
	s.ModificationProtectionStatus = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *CreateLoadBalancerInput) SetSubnetId(v string) *CreateLoadBalancerInput {
	s.SubnetId = &v
	return s
}

// SetType sets the Type field's value.
func (s *CreateLoadBalancerInput) SetType(v string) *CreateLoadBalancerInput {
	s.Type = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateLoadBalancerInput) SetVpcId(v string) *CreateLoadBalancerInput {
	s.VpcId = &v
	return s
}

type CreateLoadBalancerOutput struct {
	_ struct{} `type:"structure"`

	LoadBalancerId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateLoadBalancerOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoadBalancerOutput) GoString() string {
	return s.String()
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *CreateLoadBalancerOutput) SetLoadBalancerId(v string) *CreateLoadBalancerOutput {
	s.LoadBalancerId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateLoadBalancerOutput) SetRequestId(v string) *CreateLoadBalancerOutput {
	s.RequestId = &v
	return s
}

type CreateRulesInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`

	// Rules is a required field
	Rules []*RuleForCreateRulesInput `type:"list" required:"true"`
}

// String returns the string representation
func (s CreateRulesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRulesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateRulesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateRulesInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}
	if s.Rules == nil {
		invalidParams.Add(request.NewErrParamRequired("Rules"))
	}
	if s.Rules != nil {
		for i, v := range s.Rules {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Rules", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *CreateRulesInput) SetListenerId(v string) *CreateRulesInput {
	s.ListenerId = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *CreateRulesInput) SetRules(v []*RuleForCreateRulesInput) *CreateRulesInput {
	s.Rules = v
	return s
}

type CreateRulesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`

	RuleIds []*string `type:"list"`
}

// String returns the string representation
func (s CreateRulesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateRulesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateRulesOutput) SetRequestId(v string) *CreateRulesOutput {
	s.RequestId = &v
	return s
}

// SetRuleIds sets the RuleIds field's value.
func (s *CreateRulesOutput) SetRuleIds(v []*string) *CreateRulesOutput {
	s.RuleIds = v
	return s
}

type CreateServerGroupInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`

	ServerGroupName *string `type:"string"`

	// Servers is a required field
	Servers []*ServerForCreateServerGroupInput `type:"list" required:"true"`
}

// String returns the string representation
func (s CreateServerGroupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateServerGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateServerGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateServerGroupInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}
	if s.Servers == nil {
		invalidParams.Add(request.NewErrParamRequired("Servers"))
	}
	if s.Servers != nil {
		for i, v := range s.Servers {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Servers", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateServerGroupInput) SetDescription(v string) *CreateServerGroupInput {
	s.Description = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *CreateServerGroupInput) SetLoadBalancerId(v string) *CreateServerGroupInput {
	s.LoadBalancerId = &v
	return s
}

// SetServerGroupName sets the ServerGroupName field's value.
func (s *CreateServerGroupInput) SetServerGroupName(v string) *CreateServerGroupInput {
	s.ServerGroupName = &v
	return s
}

// SetServers sets the Servers field's value.
func (s *CreateServerGroupInput) SetServers(v []*ServerForCreateServerGroupInput) *CreateServerGroupInput {
	s.Servers = v
	return s
}

type CreateServerGroupOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`

	ServerGroupId *string `type:"string"`
}

// String returns the string representation
func (s CreateServerGroupOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateServerGroupOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateServerGroupOutput) SetRequestId(v string) *CreateServerGroupOutput {
	s.RequestId = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *CreateServerGroupOutput) SetServerGroupId(v string) *CreateServerGroupOutput {
	s.ServerGroupId = &v
	return s
}

type DeleteAclInput struct {
	_ struct{} `type:"structure"`

	// AclId is a required field
	AclId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteAclInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteAclInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteAclInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteAclInput"}
	if s.AclId == nil {
		invalidParams.Add(request.NewErrParamRequired("AclId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAclId sets the AclId field's value.
func (s *DeleteAclInput) SetAclId(v string) *DeleteAclInput {
	s.AclId = &v
	return s
}

type DeleteAclOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteAclOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteAclOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteAclOutput) SetRequestId(v string) *DeleteAclOutput {
	s.RequestId = &v
	return s
}

type DeleteCertificateInput struct {
	_ struct{} `type:"structure"`

	// CertificateId is a required field
	CertificateId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteCertificateInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCertificateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteCertificateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteCertificateInput"}
	if s.CertificateId == nil {
		invalidParams.Add(request.NewErrParamRequired("CertificateId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCertificateId sets the CertificateId field's value.
func (s *DeleteCertificateInput) SetCertificateId(v string) *DeleteCertificateInput {
	s.CertificateId = &v
	return s
}

type DeleteCertificateOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteCertificateOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteCertificateOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteCertificateOutput) SetRequestId(v string) *DeleteCertificateOutput {
	s.RequestId = &v
	return s
}

type DeleteListenerInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteListenerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteListenerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteListenerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteListenerInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *DeleteListenerInput) SetListenerId(v string) *DeleteListenerInput {
	s.ListenerId = &v
	return s
}

type DeleteListenerOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteListenerOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteListenerOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteListenerOutput) SetRequestId(v string) *DeleteListenerOutput {
	s.RequestId = &v
	return s
}

type DeleteLoadBalancerInput struct {
	_ struct{} `type:"structure"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteLoadBalancerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLoadBalancerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteLoadBalancerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteLoadBalancerInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DeleteLoadBalancerInput) SetLoadBalancerId(v string) *DeleteLoadBalancerInput {
	s.LoadBalancerId = &v
	return s
}

type DeleteLoadBalancerOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteLoadBalancerOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteLoadBalancerOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteLoadBalancerOutput) SetRequestId(v string) *DeleteLoadBalancerOutput {
	s.RequestId = &v
	return s
}

type DeleteRulesInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`

	// RuleIds is a required field
	RuleIds []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s DeleteRulesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRulesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteRulesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteRulesInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}
	if s.RuleIds == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleIds"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *DeleteRulesInput) SetListenerId(v string) *DeleteRulesInput {
	s.ListenerId = &v
	return s
}

// SetRuleIds sets the RuleIds field's value.
func (s *DeleteRulesInput) SetRuleIds(v []*string) *DeleteRulesInput {
	s.RuleIds = v
	return s
}

type DeleteRulesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteRulesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRulesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteRulesOutput) SetRequestId(v string) *DeleteRulesOutput {
	s.RequestId = &v
	return s
}

type DeleteServerGroupInput struct {
	_ struct{} `type:"structure"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteServerGroupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteServerGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteServerGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteServerGroupInput"}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *DeleteServerGroupInput) SetServerGroupId(v string) *DeleteServerGroupInput {
	s.ServerGroupId = &v
	return s
}

type DeleteServerGroupOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteServerGroupOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteServerGroupOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteServerGroupOutput) SetRequestId(v string) *DeleteServerGroupOutput {
	s.RequestId = &v
	return s
}

type DescribeAclAttributesInput struct {
	_ struct{} `type:"structure"`

	// AclId is a required field
	AclId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeAclAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAclAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeAclAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeAclAttributesInput"}
	if s.AclId == nil {
		invalidParams.Add(request.NewErrParamRequired("AclId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAclId sets the AclId field's value.
func (s *DescribeAclAttributesInput) SetAclId(v string) *DescribeAclAttributesInput {
	s.AclId = &v
	return s
}

type DescribeAclAttributesOutput struct {
	_ struct{} `type:"structure"`

	AclEntries []*AclEntryForDescribeAclAttributesOutput `type:"list"`

	AclId *string `type:"string"`

	AclName *string `type:"string"`

	CreateTime *string `type:"string"`

	Description *string `type:"string"`

	Listeners []*ListenerForDescribeAclAttributesOutput `type:"list"`

	RequestId *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeAclAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAclAttributesOutput) GoString() string {
	return s.String()
}

// SetAclEntries sets the AclEntries field's value.
func (s *DescribeAclAttributesOutput) SetAclEntries(v []*AclEntryForDescribeAclAttributesOutput) *DescribeAclAttributesOutput {
	s.AclEntries = v
	return s
}

// SetAclId sets the AclId field's value.
func (s *DescribeAclAttributesOutput) SetAclId(v string) *DescribeAclAttributesOutput {
	s.AclId = &v
	return s
}

// SetAclName sets the AclName field's value.
func (s *DescribeAclAttributesOutput) SetAclName(v string) *DescribeAclAttributesOutput {
	s.AclName = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeAclAttributesOutput) SetCreateTime(v string) *DescribeAclAttributesOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeAclAttributesOutput) SetDescription(v string) *DescribeAclAttributesOutput {
	s.Description = &v
	return s
}

// SetListeners sets the Listeners field's value.
func (s *DescribeAclAttributesOutput) SetListeners(v []*ListenerForDescribeAclAttributesOutput) *DescribeAclAttributesOutput {
	s.Listeners = v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeAclAttributesOutput) SetRequestId(v string) *DescribeAclAttributesOutput {
	s.RequestId = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeAclAttributesOutput) SetUpdateTime(v string) *DescribeAclAttributesOutput {
	s.UpdateTime = &v
	return s
}

type DescribeAclsInput struct {
	_ struct{} `type:"structure"`

	AclIds []*string `type:"list"`

	AclName *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeAclsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAclsInput) GoString() string {
	return s.String()
}

// SetAclIds sets the AclIds field's value.
func (s *DescribeAclsInput) SetAclIds(v []*string) *DescribeAclsInput {
	s.AclIds = v
	return s
}

// SetAclName sets the AclName field's value.
func (s *DescribeAclsInput) SetAclName(v string) *DescribeAclsInput {
	s.AclName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeAclsInput) SetPageNumber(v int64) *DescribeAclsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeAclsInput) SetPageSize(v int64) *DescribeAclsInput {
	s.PageSize = &v
	return s
}

type DescribeAclsOutput struct {
	_ struct{} `type:"structure"`

	Acls []*AclForDescribeAclsOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeAclsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAclsOutput) GoString() string {
	return s.String()
}

// SetAcls sets the Acls field's value.
func (s *DescribeAclsOutput) SetAcls(v []*AclForDescribeAclsOutput) *DescribeAclsOutput {
	s.Acls = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeAclsOutput) SetPageNumber(v int64) *DescribeAclsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeAclsOutput) SetPageSize(v int64) *DescribeAclsOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeAclsOutput) SetRequestId(v string) *DescribeAclsOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeAclsOutput) SetTotalCount(v int64) *DescribeAclsOutput {
	s.TotalCount = &v
	return s
}

type DescribeCertificatesInput struct {
	_ struct{} `type:"structure"`

	CertificateIds []*string `type:"list"`

	CertificateName *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCertificatesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCertificatesInput) GoString() string {
	return s.String()
}

// SetCertificateIds sets the CertificateIds field's value.
func (s *DescribeCertificatesInput) SetCertificateIds(v []*string) *DescribeCertificatesInput {
	s.CertificateIds = v
	return s
}

// SetCertificateName sets the CertificateName field's value.
func (s *DescribeCertificatesInput) SetCertificateName(v string) *DescribeCertificatesInput {
	s.CertificateName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCertificatesInput) SetPageNumber(v int64) *DescribeCertificatesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCertificatesInput) SetPageSize(v int64) *DescribeCertificatesInput {
	s.PageSize = &v
	return s
}

type DescribeCertificatesOutput struct {
	_ struct{} `type:"structure"`

	Certificates []*CertificateForDescribeCertificatesOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeCertificatesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeCertificatesOutput) GoString() string {
	return s.String()
}

// SetCertificates sets the Certificates field's value.
func (s *DescribeCertificatesOutput) SetCertificates(v []*CertificateForDescribeCertificatesOutput) *DescribeCertificatesOutput {
	s.Certificates = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeCertificatesOutput) SetPageNumber(v int64) *DescribeCertificatesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeCertificatesOutput) SetPageSize(v int64) *DescribeCertificatesOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeCertificatesOutput) SetRequestId(v string) *DescribeCertificatesOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeCertificatesOutput) SetTotalCount(v int64) *DescribeCertificatesOutput {
	s.TotalCount = &v
	return s
}

type DescribeListenerAttributesInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeListenerAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenerAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeListenerAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeListenerAttributesInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeListenerAttributesInput) SetListenerId(v string) *DescribeListenerAttributesInput {
	s.ListenerId = &v
	return s
}

type DescribeListenerAttributesOutput struct {
	_ struct{} `type:"structure"`

	AclIds []*string `type:"list"`

	AclStatus *string `type:"string"`

	AclType *string `type:"string"`

	CertificateId *string `type:"string"`

	CreateTime *string `type:"string"`

	Description *string `type:"string"`

	Enabled *string `type:"string"`

	EstablishedTimeout *int64 `type:"integer"`

	HealthCheck *HealthCheckForDescribeListenerAttributesOutput `type:"structure"`

	ListenerId *string `type:"string"`

	ListenerName *string `type:"string"`

	LoadBalancerId *string `type:"string"`

	Port *int64 `type:"integer"`

	Protocol *string `type:"string"`

	RequestId *string `type:"string"`

	Scheduler *string `type:"string"`

	ServerGroupId *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeListenerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenerAttributesOutput) GoString() string {
	return s.String()
}

// SetAclIds sets the AclIds field's value.
func (s *DescribeListenerAttributesOutput) SetAclIds(v []*string) *DescribeListenerAttributesOutput {
	s.AclIds = v
	return s
}

// SetAclStatus sets the AclStatus field's value.
func (s *DescribeListenerAttributesOutput) SetAclStatus(v string) *DescribeListenerAttributesOutput {
	s.AclStatus = &v
	return s
}

// SetAclType sets the AclType field's value.
func (s *DescribeListenerAttributesOutput) SetAclType(v string) *DescribeListenerAttributesOutput {
	s.AclType = &v
	return s
}

// SetCertificateId sets the CertificateId field's value.
func (s *DescribeListenerAttributesOutput) SetCertificateId(v string) *DescribeListenerAttributesOutput {
	s.CertificateId = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeListenerAttributesOutput) SetCreateTime(v string) *DescribeListenerAttributesOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeListenerAttributesOutput) SetDescription(v string) *DescribeListenerAttributesOutput {
	s.Description = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *DescribeListenerAttributesOutput) SetEnabled(v string) *DescribeListenerAttributesOutput {
	s.Enabled = &v
	return s
}

// SetEstablishedTimeout sets the EstablishedTimeout field's value.
func (s *DescribeListenerAttributesOutput) SetEstablishedTimeout(v int64) *DescribeListenerAttributesOutput {
	s.EstablishedTimeout = &v
	return s
}

// SetHealthCheck sets the HealthCheck field's value.
func (s *DescribeListenerAttributesOutput) SetHealthCheck(v *HealthCheckForDescribeListenerAttributesOutput) *DescribeListenerAttributesOutput {
	s.HealthCheck = v
	return s
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeListenerAttributesOutput) SetListenerId(v string) *DescribeListenerAttributesOutput {
	s.ListenerId = &v
	return s
}

// SetListenerName sets the ListenerName field's value.
func (s *DescribeListenerAttributesOutput) SetListenerName(v string) *DescribeListenerAttributesOutput {
	s.ListenerName = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DescribeListenerAttributesOutput) SetLoadBalancerId(v string) *DescribeListenerAttributesOutput {
	s.LoadBalancerId = &v
	return s
}

// SetPort sets the Port field's value.
func (s *DescribeListenerAttributesOutput) SetPort(v int64) *DescribeListenerAttributesOutput {
	s.Port = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *DescribeListenerAttributesOutput) SetProtocol(v string) *DescribeListenerAttributesOutput {
	s.Protocol = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeListenerAttributesOutput) SetRequestId(v string) *DescribeListenerAttributesOutput {
	s.RequestId = &v
	return s
}

// SetScheduler sets the Scheduler field's value.
func (s *DescribeListenerAttributesOutput) SetScheduler(v string) *DescribeListenerAttributesOutput {
	s.Scheduler = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *DescribeListenerAttributesOutput) SetServerGroupId(v string) *DescribeListenerAttributesOutput {
	s.ServerGroupId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeListenerAttributesOutput) SetStatus(v string) *DescribeListenerAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeListenerAttributesOutput) SetUpdateTime(v string) *DescribeListenerAttributesOutput {
	s.UpdateTime = &v
	return s
}

type DescribeListenerHealthInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`

	OnlyUnHealthy *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeListenerHealthInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenerHealthInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeListenerHealthInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeListenerHealthInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeListenerHealthInput) SetListenerId(v string) *DescribeListenerHealthInput {
	s.ListenerId = &v
	return s
}

// SetOnlyUnHealthy sets the OnlyUnHealthy field's value.
func (s *DescribeListenerHealthInput) SetOnlyUnHealthy(v string) *DescribeListenerHealthInput {
	s.OnlyUnHealthy = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeListenerHealthInput) SetPageNumber(v int64) *DescribeListenerHealthInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeListenerHealthInput) SetPageSize(v int64) *DescribeListenerHealthInput {
	s.PageSize = &v
	return s
}

type DescribeListenerHealthOutput struct {
	_ struct{} `type:"structure"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	Results []*ResultForDescribeListenerHealthOutput `type:"list"`

	Status *string `type:"string"`

	TotalCount *int64 `type:"integer"`

	UnHealthyCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeListenerHealthOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenerHealthOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeListenerHealthOutput) SetPageNumber(v int64) *DescribeListenerHealthOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeListenerHealthOutput) SetPageSize(v int64) *DescribeListenerHealthOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeListenerHealthOutput) SetRequestId(v string) *DescribeListenerHealthOutput {
	s.RequestId = &v
	return s
}

// SetResults sets the Results field's value.
func (s *DescribeListenerHealthOutput) SetResults(v []*ResultForDescribeListenerHealthOutput) *DescribeListenerHealthOutput {
	s.Results = v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeListenerHealthOutput) SetStatus(v string) *DescribeListenerHealthOutput {
	s.Status = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeListenerHealthOutput) SetTotalCount(v int64) *DescribeListenerHealthOutput {
	s.TotalCount = &v
	return s
}

// SetUnHealthyCount sets the UnHealthyCount field's value.
func (s *DescribeListenerHealthOutput) SetUnHealthyCount(v int64) *DescribeListenerHealthOutput {
	s.UnHealthyCount = &v
	return s
}

type DescribeListenersInput struct {
	_ struct{} `type:"structure"`

	ListenerIds []*string `type:"list"`

	ListenerName *string `type:"string"`

	LoadBalancerId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeListenersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenersInput) GoString() string {
	return s.String()
}

// SetListenerIds sets the ListenerIds field's value.
func (s *DescribeListenersInput) SetListenerIds(v []*string) *DescribeListenersInput {
	s.ListenerIds = v
	return s
}

// SetListenerName sets the ListenerName field's value.
func (s *DescribeListenersInput) SetListenerName(v string) *DescribeListenersInput {
	s.ListenerName = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DescribeListenersInput) SetLoadBalancerId(v string) *DescribeListenersInput {
	s.LoadBalancerId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeListenersInput) SetPageNumber(v int64) *DescribeListenersInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeListenersInput) SetPageSize(v int64) *DescribeListenersInput {
	s.PageSize = &v
	return s
}

type DescribeListenersOutput struct {
	_ struct{} `type:"structure"`

	Listeners []*ListenerForDescribeListenersOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeListenersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeListenersOutput) GoString() string {
	return s.String()
}

// SetListeners sets the Listeners field's value.
func (s *DescribeListenersOutput) SetListeners(v []*ListenerForDescribeListenersOutput) *DescribeListenersOutput {
	s.Listeners = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeListenersOutput) SetPageNumber(v int64) *DescribeListenersOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeListenersOutput) SetPageSize(v int64) *DescribeListenersOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeListenersOutput) SetRequestId(v string) *DescribeListenersOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeListenersOutput) SetTotalCount(v int64) *DescribeListenersOutput {
	s.TotalCount = &v
	return s
}

type DescribeLoadBalancerAttributesInput struct {
	_ struct{} `type:"structure"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeLoadBalancerAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeLoadBalancerAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeLoadBalancerAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeLoadBalancerAttributesInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DescribeLoadBalancerAttributesInput) SetLoadBalancerId(v string) *DescribeLoadBalancerAttributesInput {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerAttributesOutput struct {
	_ struct{} `type:"structure"`

	AccessLog *AccessLogForDescribeLoadBalancerAttributesOutput `type:"structure"`

	CreateTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	Eip *EipForDescribeLoadBalancerAttributesOutput `type:"structure"`

	EipAddress *string `type:"string"`

	EipID *string `type:"string"`

	EniAddress *string `type:"string"`

	EniID *string `type:"string"`

	Listeners []*ListenerForDescribeLoadBalancerAttributesOutput `type:"list"`

	LoadBalancerBillingType *int64 `type:"integer"`

	LoadBalancerId *string `type:"string"`

	LoadBalancerName *string `type:"string"`

	LoadBalancerSpec *string `type:"string"`

	LockReason *string `type:"string"`

	ModificationProtectionReason *string `type:"string"`

	ModificationProtectionStatus *string `type:"string"`

	OverdueTime *string `type:"string"`

	RequestId *string `type:"string"`

	ServerGroups []*ServerGroupForDescribeLoadBalancerAttributesOutput `type:"list"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`

	Type *string `type:"string"`

	UpdateTime *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s DescribeLoadBalancerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeLoadBalancerAttributesOutput) GoString() string {
	return s.String()
}

// SetAccessLog sets the AccessLog field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetAccessLog(v *AccessLogForDescribeLoadBalancerAttributesOutput) *DescribeLoadBalancerAttributesOutput {
	s.AccessLog = v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetCreateTime(v string) *DescribeLoadBalancerAttributesOutput {
	s.CreateTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetDeletedTime(v string) *DescribeLoadBalancerAttributesOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetDescription(v string) *DescribeLoadBalancerAttributesOutput {
	s.Description = &v
	return s
}

// SetEip sets the Eip field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetEip(v *EipForDescribeLoadBalancerAttributesOutput) *DescribeLoadBalancerAttributesOutput {
	s.Eip = v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetEipAddress(v string) *DescribeLoadBalancerAttributesOutput {
	s.EipAddress = &v
	return s
}

// SetEipID sets the EipID field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetEipID(v string) *DescribeLoadBalancerAttributesOutput {
	s.EipID = &v
	return s
}

// SetEniAddress sets the EniAddress field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetEniAddress(v string) *DescribeLoadBalancerAttributesOutput {
	s.EniAddress = &v
	return s
}

// SetEniID sets the EniID field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetEniID(v string) *DescribeLoadBalancerAttributesOutput {
	s.EniID = &v
	return s
}

// SetListeners sets the Listeners field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetListeners(v []*ListenerForDescribeLoadBalancerAttributesOutput) *DescribeLoadBalancerAttributesOutput {
	s.Listeners = v
	return s
}

// SetLoadBalancerBillingType sets the LoadBalancerBillingType field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetLoadBalancerBillingType(v int64) *DescribeLoadBalancerAttributesOutput {
	s.LoadBalancerBillingType = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetLoadBalancerId(v string) *DescribeLoadBalancerAttributesOutput {
	s.LoadBalancerId = &v
	return s
}

// SetLoadBalancerName sets the LoadBalancerName field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetLoadBalancerName(v string) *DescribeLoadBalancerAttributesOutput {
	s.LoadBalancerName = &v
	return s
}

// SetLoadBalancerSpec sets the LoadBalancerSpec field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetLoadBalancerSpec(v string) *DescribeLoadBalancerAttributesOutput {
	s.LoadBalancerSpec = &v
	return s
}

// SetLockReason sets the LockReason field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetLockReason(v string) *DescribeLoadBalancerAttributesOutput {
	s.LockReason = &v
	return s
}

// SetModificationProtectionReason sets the ModificationProtectionReason field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetModificationProtectionReason(v string) *DescribeLoadBalancerAttributesOutput {
	s.ModificationProtectionReason = &v
	return s
}

// SetModificationProtectionStatus sets the ModificationProtectionStatus field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetModificationProtectionStatus(v string) *DescribeLoadBalancerAttributesOutput {
	s.ModificationProtectionStatus = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetOverdueTime(v string) *DescribeLoadBalancerAttributesOutput {
	s.OverdueTime = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetRequestId(v string) *DescribeLoadBalancerAttributesOutput {
	s.RequestId = &v
	return s
}

// SetServerGroups sets the ServerGroups field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetServerGroups(v []*ServerGroupForDescribeLoadBalancerAttributesOutput) *DescribeLoadBalancerAttributesOutput {
	s.ServerGroups = v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetStatus(v string) *DescribeLoadBalancerAttributesOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetSubnetId(v string) *DescribeLoadBalancerAttributesOutput {
	s.SubnetId = &v
	return s
}

// SetType sets the Type field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetType(v string) *DescribeLoadBalancerAttributesOutput {
	s.Type = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetUpdateTime(v string) *DescribeLoadBalancerAttributesOutput {
	s.UpdateTime = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeLoadBalancerAttributesOutput) SetVpcId(v string) *DescribeLoadBalancerAttributesOutput {
	s.VpcId = &v
	return s
}

type DescribeLoadBalancersInput struct {
	_ struct{} `type:"structure"`

	EniAddress *string `type:"string"`

	LoadBalancerName *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s DescribeLoadBalancersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeLoadBalancersInput) GoString() string {
	return s.String()
}

// SetEniAddress sets the EniAddress field's value.
func (s *DescribeLoadBalancersInput) SetEniAddress(v string) *DescribeLoadBalancersInput {
	s.EniAddress = &v
	return s
}

// SetLoadBalancerName sets the LoadBalancerName field's value.
func (s *DescribeLoadBalancersInput) SetLoadBalancerName(v string) *DescribeLoadBalancersInput {
	s.LoadBalancerName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeLoadBalancersInput) SetPageNumber(v int64) *DescribeLoadBalancersInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeLoadBalancersInput) SetPageSize(v int64) *DescribeLoadBalancersInput {
	s.PageSize = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeLoadBalancersInput) SetVpcId(v string) *DescribeLoadBalancersInput {
	s.VpcId = &v
	return s
}

type DescribeLoadBalancersOutput struct {
	_ struct{} `type:"structure"`

	LoadBalancers []*LoadBalancerForDescribeLoadBalancersOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeLoadBalancersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeLoadBalancersOutput) GoString() string {
	return s.String()
}

// SetLoadBalancers sets the LoadBalancers field's value.
func (s *DescribeLoadBalancersOutput) SetLoadBalancers(v []*LoadBalancerForDescribeLoadBalancersOutput) *DescribeLoadBalancersOutput {
	s.LoadBalancers = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeLoadBalancersOutput) SetPageNumber(v int64) *DescribeLoadBalancersOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeLoadBalancersOutput) SetPageSize(v int64) *DescribeLoadBalancersOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeLoadBalancersOutput) SetRequestId(v string) *DescribeLoadBalancersOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeLoadBalancersOutput) SetTotalCount(v int64) *DescribeLoadBalancersOutput {
	s.TotalCount = &v
	return s
}

type DescribeRulesInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeRulesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRulesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeRulesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeRulesInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *DescribeRulesInput) SetListenerId(v string) *DescribeRulesInput {
	s.ListenerId = &v
	return s
}

type DescribeRulesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`

	Rules []*RuleForDescribeRulesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeRulesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeRulesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeRulesOutput) SetRequestId(v string) *DescribeRulesOutput {
	s.RequestId = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *DescribeRulesOutput) SetRules(v []*RuleForDescribeRulesOutput) *DescribeRulesOutput {
	s.Rules = v
	return s
}

type DescribeServerGroupAttributesInput struct {
	_ struct{} `type:"structure"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeServerGroupAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeServerGroupAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeServerGroupAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeServerGroupAttributesInput"}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *DescribeServerGroupAttributesInput) SetServerGroupId(v string) *DescribeServerGroupAttributesInput {
	s.ServerGroupId = &v
	return s
}

type DescribeServerGroupAttributesOutput struct {
	_ struct{} `type:"structure"`

	Listeners []*string `type:"list"`

	LoadBalancerId *string `type:"string"`

	RequestId *string `type:"string"`

	ServerGroupId *string `type:"string"`

	ServerGroupName *string `type:"string"`

	Servers []*ServerForDescribeServerGroupAttributesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeServerGroupAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeServerGroupAttributesOutput) GoString() string {
	return s.String()
}

// SetListeners sets the Listeners field's value.
func (s *DescribeServerGroupAttributesOutput) SetListeners(v []*string) *DescribeServerGroupAttributesOutput {
	s.Listeners = v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DescribeServerGroupAttributesOutput) SetLoadBalancerId(v string) *DescribeServerGroupAttributesOutput {
	s.LoadBalancerId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeServerGroupAttributesOutput) SetRequestId(v string) *DescribeServerGroupAttributesOutput {
	s.RequestId = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *DescribeServerGroupAttributesOutput) SetServerGroupId(v string) *DescribeServerGroupAttributesOutput {
	s.ServerGroupId = &v
	return s
}

// SetServerGroupName sets the ServerGroupName field's value.
func (s *DescribeServerGroupAttributesOutput) SetServerGroupName(v string) *DescribeServerGroupAttributesOutput {
	s.ServerGroupName = &v
	return s
}

// SetServers sets the Servers field's value.
func (s *DescribeServerGroupAttributesOutput) SetServers(v []*ServerForDescribeServerGroupAttributesOutput) *DescribeServerGroupAttributesOutput {
	s.Servers = v
	return s
}

type DescribeServerGroupsInput struct {
	_ struct{} `type:"structure"`

	LoadBalancerId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	ServerGroupIds []*string `type:"list"`

	ServerGroupName *string `type:"string"`
}

// String returns the string representation
func (s DescribeServerGroupsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeServerGroupsInput) GoString() string {
	return s.String()
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DescribeServerGroupsInput) SetLoadBalancerId(v string) *DescribeServerGroupsInput {
	s.LoadBalancerId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeServerGroupsInput) SetPageNumber(v int64) *DescribeServerGroupsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeServerGroupsInput) SetPageSize(v int64) *DescribeServerGroupsInput {
	s.PageSize = &v
	return s
}

// SetServerGroupIds sets the ServerGroupIds field's value.
func (s *DescribeServerGroupsInput) SetServerGroupIds(v []*string) *DescribeServerGroupsInput {
	s.ServerGroupIds = v
	return s
}

// SetServerGroupName sets the ServerGroupName field's value.
func (s *DescribeServerGroupsInput) SetServerGroupName(v string) *DescribeServerGroupsInput {
	s.ServerGroupName = &v
	return s
}

type DescribeServerGroupsOutput struct {
	_ struct{} `type:"structure"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	ServerGroups []*ServerGroupForDescribeServerGroupsOutput `type:"list"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeServerGroupsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeServerGroupsOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeServerGroupsOutput) SetPageNumber(v int64) *DescribeServerGroupsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeServerGroupsOutput) SetPageSize(v int64) *DescribeServerGroupsOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeServerGroupsOutput) SetRequestId(v string) *DescribeServerGroupsOutput {
	s.RequestId = &v
	return s
}

// SetServerGroups sets the ServerGroups field's value.
func (s *DescribeServerGroupsOutput) SetServerGroups(v []*ServerGroupForDescribeServerGroupsOutput) *DescribeServerGroupsOutput {
	s.ServerGroups = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeServerGroupsOutput) SetTotalCount(v int64) *DescribeServerGroupsOutput {
	s.TotalCount = &v
	return s
}

type DisableAccessLogInput struct {
	_ struct{} `type:"structure"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DisableAccessLogInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableAccessLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DisableAccessLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DisableAccessLogInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *DisableAccessLogInput) SetLoadBalancerId(v string) *DisableAccessLogInput {
	s.LoadBalancerId = &v
	return s
}

type DisableAccessLogOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DisableAccessLogOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DisableAccessLogOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DisableAccessLogOutput) SetRequestId(v string) *DisableAccessLogOutput {
	s.RequestId = &v
	return s
}

type EipBillingConfigForCreateLoadBalancerInput struct {
	_ struct{} `type:"structure"`

	Bandwidth *int64 `type:"integer"`

	EipBillingType *int64 `type:"integer"`

	ISP *string `type:"string"`
}

// String returns the string representation
func (s EipBillingConfigForCreateLoadBalancerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s EipBillingConfigForCreateLoadBalancerInput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *EipBillingConfigForCreateLoadBalancerInput) SetBandwidth(v int64) *EipBillingConfigForCreateLoadBalancerInput {
	s.Bandwidth = &v
	return s
}

// SetEipBillingType sets the EipBillingType field's value.
func (s *EipBillingConfigForCreateLoadBalancerInput) SetEipBillingType(v int64) *EipBillingConfigForCreateLoadBalancerInput {
	s.EipBillingType = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *EipBillingConfigForCreateLoadBalancerInput) SetISP(v string) *EipBillingConfigForCreateLoadBalancerInput {
	s.ISP = &v
	return s
}

type EipForDescribeLoadBalancerAttributesOutput struct {
	_ struct{} `type:"structure"`

	Bandwidth *int64 `type:"integer"`

	EipAddress *string `type:"string"`

	EipBillingType *int64 `type:"integer"`

	ISP *string `type:"string"`
}

// String returns the string representation
func (s EipForDescribeLoadBalancerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s EipForDescribeLoadBalancerAttributesOutput) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *EipForDescribeLoadBalancerAttributesOutput) SetBandwidth(v int64) *EipForDescribeLoadBalancerAttributesOutput {
	s.Bandwidth = &v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *EipForDescribeLoadBalancerAttributesOutput) SetEipAddress(v string) *EipForDescribeLoadBalancerAttributesOutput {
	s.EipAddress = &v
	return s
}

// SetEipBillingType sets the EipBillingType field's value.
func (s *EipForDescribeLoadBalancerAttributesOutput) SetEipBillingType(v int64) *EipForDescribeLoadBalancerAttributesOutput {
	s.EipBillingType = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *EipForDescribeLoadBalancerAttributesOutput) SetISP(v string) *EipForDescribeLoadBalancerAttributesOutput {
	s.ISP = &v
	return s
}

type EnableAccessLogInput struct {
	_ struct{} `type:"structure"`

	// BucketName is a required field
	BucketName *string `type:"string" required:"true"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s EnableAccessLogInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableAccessLogInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *EnableAccessLogInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "EnableAccessLogInput"}
	if s.BucketName == nil {
		invalidParams.Add(request.NewErrParamRequired("BucketName"))
	}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBucketName sets the BucketName field's value.
func (s *EnableAccessLogInput) SetBucketName(v string) *EnableAccessLogInput {
	s.BucketName = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *EnableAccessLogInput) SetLoadBalancerId(v string) *EnableAccessLogInput {
	s.LoadBalancerId = &v
	return s
}

type EnableAccessLogOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s EnableAccessLogOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s EnableAccessLogOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *EnableAccessLogOutput) SetRequestId(v string) *EnableAccessLogOutput {
	s.RequestId = &v
	return s
}

type HealthCheckForCreateListenerInput struct {
	_ struct{} `type:"structure"`

	Domain *string `type:"string"`

	Enabled *string `type:"string"`

	HealthyThreshold *int64 `type:"integer"`

	HttpCode *string `type:"string"`

	Interval *int64 `type:"integer"`

	Method *string `type:"string"`

	Timeout *int64 `type:"integer"`

	URI *string `type:"string"`
}

// String returns the string representation
func (s HealthCheckForCreateListenerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s HealthCheckForCreateListenerInput) GoString() string {
	return s.String()
}

// SetDomain sets the Domain field's value.
func (s *HealthCheckForCreateListenerInput) SetDomain(v string) *HealthCheckForCreateListenerInput {
	s.Domain = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *HealthCheckForCreateListenerInput) SetEnabled(v string) *HealthCheckForCreateListenerInput {
	s.Enabled = &v
	return s
}

// SetHealthyThreshold sets the HealthyThreshold field's value.
func (s *HealthCheckForCreateListenerInput) SetHealthyThreshold(v int64) *HealthCheckForCreateListenerInput {
	s.HealthyThreshold = &v
	return s
}

// SetHttpCode sets the HttpCode field's value.
func (s *HealthCheckForCreateListenerInput) SetHttpCode(v string) *HealthCheckForCreateListenerInput {
	s.HttpCode = &v
	return s
}

// SetInterval sets the Interval field's value.
func (s *HealthCheckForCreateListenerInput) SetInterval(v int64) *HealthCheckForCreateListenerInput {
	s.Interval = &v
	return s
}

// SetMethod sets the Method field's value.
func (s *HealthCheckForCreateListenerInput) SetMethod(v string) *HealthCheckForCreateListenerInput {
	s.Method = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *HealthCheckForCreateListenerInput) SetTimeout(v int64) *HealthCheckForCreateListenerInput {
	s.Timeout = &v
	return s
}

// SetURI sets the URI field's value.
func (s *HealthCheckForCreateListenerInput) SetURI(v string) *HealthCheckForCreateListenerInput {
	s.URI = &v
	return s
}

type HealthCheckForDescribeListenerAttributesOutput struct {
	_ struct{} `type:"structure"`

	Domain *string `type:"string"`

	Enabled *string `type:"string"`

	HealthyThreshold *int64 `type:"integer"`

	HttpCode *string `type:"string"`

	Interval *int64 `type:"integer"`

	Method *string `type:"string"`

	Timeout *int64 `type:"integer"`

	UnHealthyThreshold *int64 `type:"integer"`

	Uri *string `type:"string"`
}

// String returns the string representation
func (s HealthCheckForDescribeListenerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s HealthCheckForDescribeListenerAttributesOutput) GoString() string {
	return s.String()
}

// SetDomain sets the Domain field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetDomain(v string) *HealthCheckForDescribeListenerAttributesOutput {
	s.Domain = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetEnabled(v string) *HealthCheckForDescribeListenerAttributesOutput {
	s.Enabled = &v
	return s
}

// SetHealthyThreshold sets the HealthyThreshold field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetHealthyThreshold(v int64) *HealthCheckForDescribeListenerAttributesOutput {
	s.HealthyThreshold = &v
	return s
}

// SetHttpCode sets the HttpCode field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetHttpCode(v string) *HealthCheckForDescribeListenerAttributesOutput {
	s.HttpCode = &v
	return s
}

// SetInterval sets the Interval field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetInterval(v int64) *HealthCheckForDescribeListenerAttributesOutput {
	s.Interval = &v
	return s
}

// SetMethod sets the Method field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetMethod(v string) *HealthCheckForDescribeListenerAttributesOutput {
	s.Method = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetTimeout(v int64) *HealthCheckForDescribeListenerAttributesOutput {
	s.Timeout = &v
	return s
}

// SetUnHealthyThreshold sets the UnHealthyThreshold field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetUnHealthyThreshold(v int64) *HealthCheckForDescribeListenerAttributesOutput {
	s.UnHealthyThreshold = &v
	return s
}

// SetUri sets the Uri field's value.
func (s *HealthCheckForDescribeListenerAttributesOutput) SetUri(v string) *HealthCheckForDescribeListenerAttributesOutput {
	s.Uri = &v
	return s
}

type HealthCheckForModifyListenerAttributesInput struct {
	_ struct{} `type:"structure"`

	Domain *string `type:"string"`

	Enabled *string `type:"string"`

	HealthyThreshold *int64 `type:"integer"`

	HttpCode *string `type:"string"`

	Interval *int64 `type:"integer"`

	Method *string `type:"string"`

	Timeout *int64 `type:"integer"`

	URI *string `type:"string"`
}

// String returns the string representation
func (s HealthCheckForModifyListenerAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s HealthCheckForModifyListenerAttributesInput) GoString() string {
	return s.String()
}

// SetDomain sets the Domain field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetDomain(v string) *HealthCheckForModifyListenerAttributesInput {
	s.Domain = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetEnabled(v string) *HealthCheckForModifyListenerAttributesInput {
	s.Enabled = &v
	return s
}

// SetHealthyThreshold sets the HealthyThreshold field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetHealthyThreshold(v int64) *HealthCheckForModifyListenerAttributesInput {
	s.HealthyThreshold = &v
	return s
}

// SetHttpCode sets the HttpCode field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetHttpCode(v string) *HealthCheckForModifyListenerAttributesInput {
	s.HttpCode = &v
	return s
}

// SetInterval sets the Interval field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetInterval(v int64) *HealthCheckForModifyListenerAttributesInput {
	s.Interval = &v
	return s
}

// SetMethod sets the Method field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetMethod(v string) *HealthCheckForModifyListenerAttributesInput {
	s.Method = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetTimeout(v int64) *HealthCheckForModifyListenerAttributesInput {
	s.Timeout = &v
	return s
}

// SetURI sets the URI field's value.
func (s *HealthCheckForModifyListenerAttributesInput) SetURI(v string) *HealthCheckForModifyListenerAttributesInput {
	s.URI = &v
	return s
}

type ListenerForDescribeAclAttributesOutput struct {
	_ struct{} `type:"structure"`

	AclType *string `type:"string"`

	ListenerId *string `type:"string"`

	ListenerName *string `type:"string"`

	Port *int64 `type:"integer"`

	Protocol *string `type:"string"`
}

// String returns the string representation
func (s ListenerForDescribeAclAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListenerForDescribeAclAttributesOutput) GoString() string {
	return s.String()
}

// SetAclType sets the AclType field's value.
func (s *ListenerForDescribeAclAttributesOutput) SetAclType(v string) *ListenerForDescribeAclAttributesOutput {
	s.AclType = &v
	return s
}

// SetListenerId sets the ListenerId field's value.
func (s *ListenerForDescribeAclAttributesOutput) SetListenerId(v string) *ListenerForDescribeAclAttributesOutput {
	s.ListenerId = &v
	return s
}

// SetListenerName sets the ListenerName field's value.
func (s *ListenerForDescribeAclAttributesOutput) SetListenerName(v string) *ListenerForDescribeAclAttributesOutput {
	s.ListenerName = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ListenerForDescribeAclAttributesOutput) SetPort(v int64) *ListenerForDescribeAclAttributesOutput {
	s.Port = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *ListenerForDescribeAclAttributesOutput) SetProtocol(v string) *ListenerForDescribeAclAttributesOutput {
	s.Protocol = &v
	return s
}

type ListenerForDescribeListenersOutput struct {
	_ struct{} `type:"structure"`

	AclIds []*string `type:"list"`

	AclStatus *string `type:"string"`

	AclType *string `type:"string"`

	CertificateId *string `type:"string"`

	CreateTime *string `type:"string"`

	Enabled *string `type:"string"`

	HealthCheck *ListenersHealthCheckForDescribeListenersOutput `type:"structure"`

	ListenerId *string `type:"string"`

	ListenerName *string `type:"string"`

	Port *int64 `type:"integer"`

	Protocol *string `type:"string"`

	ServerGroupId *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s ListenerForDescribeListenersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListenerForDescribeListenersOutput) GoString() string {
	return s.String()
}

// SetAclIds sets the AclIds field's value.
func (s *ListenerForDescribeListenersOutput) SetAclIds(v []*string) *ListenerForDescribeListenersOutput {
	s.AclIds = v
	return s
}

// SetAclStatus sets the AclStatus field's value.
func (s *ListenerForDescribeListenersOutput) SetAclStatus(v string) *ListenerForDescribeListenersOutput {
	s.AclStatus = &v
	return s
}

// SetAclType sets the AclType field's value.
func (s *ListenerForDescribeListenersOutput) SetAclType(v string) *ListenerForDescribeListenersOutput {
	s.AclType = &v
	return s
}

// SetCertificateId sets the CertificateId field's value.
func (s *ListenerForDescribeListenersOutput) SetCertificateId(v string) *ListenerForDescribeListenersOutput {
	s.CertificateId = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *ListenerForDescribeListenersOutput) SetCreateTime(v string) *ListenerForDescribeListenersOutput {
	s.CreateTime = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *ListenerForDescribeListenersOutput) SetEnabled(v string) *ListenerForDescribeListenersOutput {
	s.Enabled = &v
	return s
}

// SetHealthCheck sets the HealthCheck field's value.
func (s *ListenerForDescribeListenersOutput) SetHealthCheck(v *ListenersHealthCheckForDescribeListenersOutput) *ListenerForDescribeListenersOutput {
	s.HealthCheck = v
	return s
}

// SetListenerId sets the ListenerId field's value.
func (s *ListenerForDescribeListenersOutput) SetListenerId(v string) *ListenerForDescribeListenersOutput {
	s.ListenerId = &v
	return s
}

// SetListenerName sets the ListenerName field's value.
func (s *ListenerForDescribeListenersOutput) SetListenerName(v string) *ListenerForDescribeListenersOutput {
	s.ListenerName = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ListenerForDescribeListenersOutput) SetPort(v int64) *ListenerForDescribeListenersOutput {
	s.Port = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *ListenerForDescribeListenersOutput) SetProtocol(v string) *ListenerForDescribeListenersOutput {
	s.Protocol = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *ListenerForDescribeListenersOutput) SetServerGroupId(v string) *ListenerForDescribeListenersOutput {
	s.ServerGroupId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ListenerForDescribeListenersOutput) SetStatus(v string) *ListenerForDescribeListenersOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ListenerForDescribeListenersOutput) SetUpdateTime(v string) *ListenerForDescribeListenersOutput {
	s.UpdateTime = &v
	return s
}

type ListenerForDescribeLoadBalancerAttributesOutput struct {
	_ struct{} `type:"structure"`

	ListenerId *string `type:"string"`

	ListenerName *string `type:"string"`
}

// String returns the string representation
func (s ListenerForDescribeLoadBalancerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListenerForDescribeLoadBalancerAttributesOutput) GoString() string {
	return s.String()
}

// SetListenerId sets the ListenerId field's value.
func (s *ListenerForDescribeLoadBalancerAttributesOutput) SetListenerId(v string) *ListenerForDescribeLoadBalancerAttributesOutput {
	s.ListenerId = &v
	return s
}

// SetListenerName sets the ListenerName field's value.
func (s *ListenerForDescribeLoadBalancerAttributesOutput) SetListenerName(v string) *ListenerForDescribeLoadBalancerAttributesOutput {
	s.ListenerName = &v
	return s
}

type ListenersHealthCheckForDescribeListenersOutput struct {
	_ struct{} `type:"structure"`

	Domain *string `type:"string"`

	Enabled *string `type:"string"`

	HealthyThreshold *int64 `type:"integer"`

	HttpCode *string `type:"string"`

	Interval *int64 `type:"integer"`

	Method *string `type:"string"`

	Timeout *int64 `type:"integer"`

	UnHealthyThreshold *int64 `type:"integer"`

	Uri *string `type:"string"`
}

// String returns the string representation
func (s ListenersHealthCheckForDescribeListenersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListenersHealthCheckForDescribeListenersOutput) GoString() string {
	return s.String()
}

// SetDomain sets the Domain field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetDomain(v string) *ListenersHealthCheckForDescribeListenersOutput {
	s.Domain = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetEnabled(v string) *ListenersHealthCheckForDescribeListenersOutput {
	s.Enabled = &v
	return s
}

// SetHealthyThreshold sets the HealthyThreshold field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetHealthyThreshold(v int64) *ListenersHealthCheckForDescribeListenersOutput {
	s.HealthyThreshold = &v
	return s
}

// SetHttpCode sets the HttpCode field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetHttpCode(v string) *ListenersHealthCheckForDescribeListenersOutput {
	s.HttpCode = &v
	return s
}

// SetInterval sets the Interval field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetInterval(v int64) *ListenersHealthCheckForDescribeListenersOutput {
	s.Interval = &v
	return s
}

// SetMethod sets the Method field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetMethod(v string) *ListenersHealthCheckForDescribeListenersOutput {
	s.Method = &v
	return s
}

// SetTimeout sets the Timeout field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetTimeout(v int64) *ListenersHealthCheckForDescribeListenersOutput {
	s.Timeout = &v
	return s
}

// SetUnHealthyThreshold sets the UnHealthyThreshold field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetUnHealthyThreshold(v int64) *ListenersHealthCheckForDescribeListenersOutput {
	s.UnHealthyThreshold = &v
	return s
}

// SetUri sets the Uri field's value.
func (s *ListenersHealthCheckForDescribeListenersOutput) SetUri(v string) *ListenersHealthCheckForDescribeListenersOutput {
	s.Uri = &v
	return s
}

type LoadBalancerForDescribeLoadBalancersOutput struct {
	_ struct{} `type:"structure"`

	BusinessStatus *string `type:"string"`

	CreateTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	EipAddress *string `type:"string"`

	EipID *string `type:"string"`

	EniAddress *string `type:"string"`

	EniID *string `type:"string"`

	LoadBalancerBillingType *int64 `type:"integer"`

	LoadBalancerId *string `type:"string"`

	LoadBalancerName *string `type:"string"`

	LoadBalancerSpec *string `type:"string"`

	LockReason *string `type:"string"`

	ModificationProtectionReason *string `type:"string"`

	ModificationProtectionStatus *string `type:"string"`

	OverdueTime *string `type:"string"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`

	Type *string `type:"string"`

	UpdateTime *string `type:"string"`

	VpcId *string `type:"string"`
}

// String returns the string representation
func (s LoadBalancerForDescribeLoadBalancersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s LoadBalancerForDescribeLoadBalancersOutput) GoString() string {
	return s.String()
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetBusinessStatus(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.BusinessStatus = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetCreateTime(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.CreateTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetDeletedTime(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetDescription(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.Description = &v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetEipAddress(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.EipAddress = &v
	return s
}

// SetEipID sets the EipID field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetEipID(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.EipID = &v
	return s
}

// SetEniAddress sets the EniAddress field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetEniAddress(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.EniAddress = &v
	return s
}

// SetEniID sets the EniID field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetEniID(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.EniID = &v
	return s
}

// SetLoadBalancerBillingType sets the LoadBalancerBillingType field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetLoadBalancerBillingType(v int64) *LoadBalancerForDescribeLoadBalancersOutput {
	s.LoadBalancerBillingType = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetLoadBalancerId(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.LoadBalancerId = &v
	return s
}

// SetLoadBalancerName sets the LoadBalancerName field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetLoadBalancerName(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.LoadBalancerName = &v
	return s
}

// SetLoadBalancerSpec sets the LoadBalancerSpec field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetLoadBalancerSpec(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.LoadBalancerSpec = &v
	return s
}

// SetLockReason sets the LockReason field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetLockReason(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.LockReason = &v
	return s
}

// SetModificationProtectionReason sets the ModificationProtectionReason field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetModificationProtectionReason(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.ModificationProtectionReason = &v
	return s
}

// SetModificationProtectionStatus sets the ModificationProtectionStatus field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetModificationProtectionStatus(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.ModificationProtectionStatus = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetOverdueTime(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.OverdueTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetStatus(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetSubnetId(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.SubnetId = &v
	return s
}

// SetType sets the Type field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetType(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.Type = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetUpdateTime(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.UpdateTime = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *LoadBalancerForDescribeLoadBalancersOutput) SetVpcId(v string) *LoadBalancerForDescribeLoadBalancersOutput {
	s.VpcId = &v
	return s
}

type ModifyAclAttributesInput struct {
	_ struct{} `type:"structure"`

	// AclId is a required field
	AclId *string `type:"string" required:"true"`

	AclName *string `type:"string"`

	Description *string `type:"string"`
}

// String returns the string representation
func (s ModifyAclAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyAclAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyAclAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyAclAttributesInput"}
	if s.AclId == nil {
		invalidParams.Add(request.NewErrParamRequired("AclId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAclId sets the AclId field's value.
func (s *ModifyAclAttributesInput) SetAclId(v string) *ModifyAclAttributesInput {
	s.AclId = &v
	return s
}

// SetAclName sets the AclName field's value.
func (s *ModifyAclAttributesInput) SetAclName(v string) *ModifyAclAttributesInput {
	s.AclName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyAclAttributesInput) SetDescription(v string) *ModifyAclAttributesInput {
	s.Description = &v
	return s
}

type ModifyAclAttributesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyAclAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyAclAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyAclAttributesOutput) SetRequestId(v string) *ModifyAclAttributesOutput {
	s.RequestId = &v
	return s
}

type ModifyListenerAttributesInput struct {
	_ struct{} `type:"structure"`

	AclIds []*string `type:"list"`

	AclStatus *string `type:"string"`

	AclType *string `type:"string"`

	CertificateId *string `type:"string"`

	Description *string `type:"string"`

	Enabled *string `type:"string"`

	EstablishedTimeout *int64 `type:"integer"`

	HealthCheck *HealthCheckForModifyListenerAttributesInput `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`

	ListenerName *string `type:"string"`

	Scheduler *string `type:"string"`

	ServerGroupId *string `type:"string"`
}

// String returns the string representation
func (s ModifyListenerAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyListenerAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyListenerAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyListenerAttributesInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAclIds sets the AclIds field's value.
func (s *ModifyListenerAttributesInput) SetAclIds(v []*string) *ModifyListenerAttributesInput {
	s.AclIds = v
	return s
}

// SetAclStatus sets the AclStatus field's value.
func (s *ModifyListenerAttributesInput) SetAclStatus(v string) *ModifyListenerAttributesInput {
	s.AclStatus = &v
	return s
}

// SetAclType sets the AclType field's value.
func (s *ModifyListenerAttributesInput) SetAclType(v string) *ModifyListenerAttributesInput {
	s.AclType = &v
	return s
}

// SetCertificateId sets the CertificateId field's value.
func (s *ModifyListenerAttributesInput) SetCertificateId(v string) *ModifyListenerAttributesInput {
	s.CertificateId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyListenerAttributesInput) SetDescription(v string) *ModifyListenerAttributesInput {
	s.Description = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *ModifyListenerAttributesInput) SetEnabled(v string) *ModifyListenerAttributesInput {
	s.Enabled = &v
	return s
}

// SetEstablishedTimeout sets the EstablishedTimeout field's value.
func (s *ModifyListenerAttributesInput) SetEstablishedTimeout(v int64) *ModifyListenerAttributesInput {
	s.EstablishedTimeout = &v
	return s
}

// SetHealthCheck sets the HealthCheck field's value.
func (s *ModifyListenerAttributesInput) SetHealthCheck(v *HealthCheckForModifyListenerAttributesInput) *ModifyListenerAttributesInput {
	s.HealthCheck = v
	return s
}

// SetListenerId sets the ListenerId field's value.
func (s *ModifyListenerAttributesInput) SetListenerId(v string) *ModifyListenerAttributesInput {
	s.ListenerId = &v
	return s
}

// SetListenerName sets the ListenerName field's value.
func (s *ModifyListenerAttributesInput) SetListenerName(v string) *ModifyListenerAttributesInput {
	s.ListenerName = &v
	return s
}

// SetScheduler sets the Scheduler field's value.
func (s *ModifyListenerAttributesInput) SetScheduler(v string) *ModifyListenerAttributesInput {
	s.Scheduler = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *ModifyListenerAttributesInput) SetServerGroupId(v string) *ModifyListenerAttributesInput {
	s.ServerGroupId = &v
	return s
}

type ModifyListenerAttributesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyListenerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyListenerAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyListenerAttributesOutput) SetRequestId(v string) *ModifyListenerAttributesOutput {
	s.RequestId = &v
	return s
}

type ModifyLoadBalancerAttributesInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`

	LoadBalancerName *string `type:"string"`

	LoadBalancerSpec *string `type:"string"`

	ModificationProtectionReason *string `type:"string"`

	ModificationProtectionStatus *string `type:"string"`
}

// String returns the string representation
func (s ModifyLoadBalancerAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyLoadBalancerAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyLoadBalancerAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyLoadBalancerAttributesInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ModifyLoadBalancerAttributesInput) SetDescription(v string) *ModifyLoadBalancerAttributesInput {
	s.Description = &v
	return s
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *ModifyLoadBalancerAttributesInput) SetLoadBalancerId(v string) *ModifyLoadBalancerAttributesInput {
	s.LoadBalancerId = &v
	return s
}

// SetLoadBalancerName sets the LoadBalancerName field's value.
func (s *ModifyLoadBalancerAttributesInput) SetLoadBalancerName(v string) *ModifyLoadBalancerAttributesInput {
	s.LoadBalancerName = &v
	return s
}

// SetLoadBalancerSpec sets the LoadBalancerSpec field's value.
func (s *ModifyLoadBalancerAttributesInput) SetLoadBalancerSpec(v string) *ModifyLoadBalancerAttributesInput {
	s.LoadBalancerSpec = &v
	return s
}

// SetModificationProtectionReason sets the ModificationProtectionReason field's value.
func (s *ModifyLoadBalancerAttributesInput) SetModificationProtectionReason(v string) *ModifyLoadBalancerAttributesInput {
	s.ModificationProtectionReason = &v
	return s
}

// SetModificationProtectionStatus sets the ModificationProtectionStatus field's value.
func (s *ModifyLoadBalancerAttributesInput) SetModificationProtectionStatus(v string) *ModifyLoadBalancerAttributesInput {
	s.ModificationProtectionStatus = &v
	return s
}

type ModifyLoadBalancerAttributesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyLoadBalancerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyLoadBalancerAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyLoadBalancerAttributesOutput) SetRequestId(v string) *ModifyLoadBalancerAttributesOutput {
	s.RequestId = &v
	return s
}

type ModifyRulesInput struct {
	_ struct{} `type:"structure"`

	// ListenerId is a required field
	ListenerId *string `type:"string" required:"true"`

	// Rules is a required field
	Rules []*RuleForModifyRulesInput `type:"list" required:"true"`
}

// String returns the string representation
func (s ModifyRulesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyRulesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyRulesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyRulesInput"}
	if s.ListenerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ListenerId"))
	}
	if s.Rules == nil {
		invalidParams.Add(request.NewErrParamRequired("Rules"))
	}
	if s.Rules != nil {
		for i, v := range s.Rules {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Rules", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetListenerId sets the ListenerId field's value.
func (s *ModifyRulesInput) SetListenerId(v string) *ModifyRulesInput {
	s.ListenerId = &v
	return s
}

// SetRules sets the Rules field's value.
func (s *ModifyRulesInput) SetRules(v []*RuleForModifyRulesInput) *ModifyRulesInput {
	s.Rules = v
	return s
}

type ModifyRulesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyRulesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyRulesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyRulesOutput) SetRequestId(v string) *ModifyRulesOutput {
	s.RequestId = &v
	return s
}

type ModifyServerGroupAttributesInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`

	ServerGroupName *string `type:"string"`

	// Servers is a required field
	Servers []*ServerForModifyServerGroupAttributesInput `type:"list" required:"true"`
}

// String returns the string representation
func (s ModifyServerGroupAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyServerGroupAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyServerGroupAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyServerGroupAttributesInput"}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}
	if s.Servers == nil {
		invalidParams.Add(request.NewErrParamRequired("Servers"))
	}
	if s.Servers != nil {
		for i, v := range s.Servers {
			if v == nil {
				continue
			}
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Servers", i), err.(request.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ModifyServerGroupAttributesInput) SetDescription(v string) *ModifyServerGroupAttributesInput {
	s.Description = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *ModifyServerGroupAttributesInput) SetServerGroupId(v string) *ModifyServerGroupAttributesInput {
	s.ServerGroupId = &v
	return s
}

// SetServerGroupName sets the ServerGroupName field's value.
func (s *ModifyServerGroupAttributesInput) SetServerGroupName(v string) *ModifyServerGroupAttributesInput {
	s.ServerGroupName = &v
	return s
}

// SetServers sets the Servers field's value.
func (s *ModifyServerGroupAttributesInput) SetServers(v []*ServerForModifyServerGroupAttributesInput) *ModifyServerGroupAttributesInput {
	s.Servers = v
	return s
}

type ModifyServerGroupAttributesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyServerGroupAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyServerGroupAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyServerGroupAttributesOutput) SetRequestId(v string) *ModifyServerGroupAttributesOutput {
	s.RequestId = &v
	return s
}

type RemoveAclEntriesInput struct {
	_ struct{} `type:"structure"`

	// AclId is a required field
	AclId *string `type:"string" required:"true"`

	// Entries is a required field
	Entries []*string `type:"list" required:"true"`
}

// String returns the string representation
func (s RemoveAclEntriesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveAclEntriesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RemoveAclEntriesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RemoveAclEntriesInput"}
	if s.AclId == nil {
		invalidParams.Add(request.NewErrParamRequired("AclId"))
	}
	if s.Entries == nil {
		invalidParams.Add(request.NewErrParamRequired("Entries"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAclId sets the AclId field's value.
func (s *RemoveAclEntriesInput) SetAclId(v string) *RemoveAclEntriesInput {
	s.AclId = &v
	return s
}

// SetEntries sets the Entries field's value.
func (s *RemoveAclEntriesInput) SetEntries(v []*string) *RemoveAclEntriesInput {
	s.Entries = v
	return s
}

type RemoveAclEntriesOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s RemoveAclEntriesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveAclEntriesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *RemoveAclEntriesOutput) SetRequestId(v string) *RemoveAclEntriesOutput {
	s.RequestId = &v
	return s
}

type RemoveServerGroupBackendServersInput struct {
	_ struct{} `type:"structure"`

	ServerGroupId *string `type:"string"`
}

// String returns the string representation
func (s RemoveServerGroupBackendServersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveServerGroupBackendServersInput) GoString() string {
	return s.String()
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *RemoveServerGroupBackendServersInput) SetServerGroupId(v string) *RemoveServerGroupBackendServersInput {
	s.ServerGroupId = &v
	return s
}

type RemoveServerGroupBackendServersOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s RemoveServerGroupBackendServersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveServerGroupBackendServersOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *RemoveServerGroupBackendServersOutput) SetRequestId(v string) *RemoveServerGroupBackendServersOutput {
	s.RequestId = &v
	return s
}

type ResultForDescribeListenerHealthOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	Ip *string `type:"string"`

	Port *int64 `type:"integer"`

	RuleNumber *int64 `type:"integer"`

	ServerGroupId *string `type:"string"`

	ServerId *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s ResultForDescribeListenerHealthOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResultForDescribeListenerHealthOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResultForDescribeListenerHealthOutput) SetInstanceId(v string) *ResultForDescribeListenerHealthOutput {
	s.InstanceId = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *ResultForDescribeListenerHealthOutput) SetIp(v string) *ResultForDescribeListenerHealthOutput {
	s.Ip = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ResultForDescribeListenerHealthOutput) SetPort(v int64) *ResultForDescribeListenerHealthOutput {
	s.Port = &v
	return s
}

// SetRuleNumber sets the RuleNumber field's value.
func (s *ResultForDescribeListenerHealthOutput) SetRuleNumber(v int64) *ResultForDescribeListenerHealthOutput {
	s.RuleNumber = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *ResultForDescribeListenerHealthOutput) SetServerGroupId(v string) *ResultForDescribeListenerHealthOutput {
	s.ServerGroupId = &v
	return s
}

// SetServerId sets the ServerId field's value.
func (s *ResultForDescribeListenerHealthOutput) SetServerId(v string) *ResultForDescribeListenerHealthOutput {
	s.ServerId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *ResultForDescribeListenerHealthOutput) SetStatus(v string) *ResultForDescribeListenerHealthOutput {
	s.Status = &v
	return s
}

type RuleForCreateRulesInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	Domain *string `type:"string"`

	// ServerGroupId is a required field
	ServerGroupId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RuleForCreateRulesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RuleForCreateRulesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RuleForCreateRulesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RuleForCreateRulesInput"}
	if s.ServerGroupId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerGroupId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *RuleForCreateRulesInput) SetDescription(v string) *RuleForCreateRulesInput {
	s.Description = &v
	return s
}

// SetDomain sets the Domain field's value.
func (s *RuleForCreateRulesInput) SetDomain(v string) *RuleForCreateRulesInput {
	s.Domain = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *RuleForCreateRulesInput) SetServerGroupId(v string) *RuleForCreateRulesInput {
	s.ServerGroupId = &v
	return s
}

type RuleForDescribeRulesOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	Domain *string `type:"string"`

	RuleId *string `type:"string"`

	ServerGroupId *string `type:"string"`

	Url *string `type:"string"`
}

// String returns the string representation
func (s RuleForDescribeRulesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RuleForDescribeRulesOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *RuleForDescribeRulesOutput) SetDescription(v string) *RuleForDescribeRulesOutput {
	s.Description = &v
	return s
}

// SetDomain sets the Domain field's value.
func (s *RuleForDescribeRulesOutput) SetDomain(v string) *RuleForDescribeRulesOutput {
	s.Domain = &v
	return s
}

// SetRuleId sets the RuleId field's value.
func (s *RuleForDescribeRulesOutput) SetRuleId(v string) *RuleForDescribeRulesOutput {
	s.RuleId = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *RuleForDescribeRulesOutput) SetServerGroupId(v string) *RuleForDescribeRulesOutput {
	s.ServerGroupId = &v
	return s
}

// SetUrl sets the Url field's value.
func (s *RuleForDescribeRulesOutput) SetUrl(v string) *RuleForDescribeRulesOutput {
	s.Url = &v
	return s
}

type RuleForModifyRulesInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	// RuleId is a required field
	RuleId *string `type:"string" required:"true"`

	ServerGroupId *string `type:"string"`
}

// String returns the string representation
func (s RuleForModifyRulesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RuleForModifyRulesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RuleForModifyRulesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RuleForModifyRulesInput"}
	if s.RuleId == nil {
		invalidParams.Add(request.NewErrParamRequired("RuleId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *RuleForModifyRulesInput) SetDescription(v string) *RuleForModifyRulesInput {
	s.Description = &v
	return s
}

// SetRuleId sets the RuleId field's value.
func (s *RuleForModifyRulesInput) SetRuleId(v string) *RuleForModifyRulesInput {
	s.RuleId = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *RuleForModifyRulesInput) SetServerGroupId(v string) *RuleForModifyRulesInput {
	s.ServerGroupId = &v
	return s
}

type ServerForAddServerGroupBackendServersInput struct {
	_ struct{} `type:"structure"`

	// Description is a required field
	Description *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// Ip is a required field
	Ip *string `type:"string" required:"true"`

	// Port is a required field
	Port *int64 `type:"integer" required:"true"`

	// Type is a required field
	Type *string `type:"string" required:"true"`

	// Weight is a required field
	Weight *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s ServerForAddServerGroupBackendServersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerForAddServerGroupBackendServersInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ServerForAddServerGroupBackendServersInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ServerForAddServerGroupBackendServersInput"}
	if s.Description == nil {
		invalidParams.Add(request.NewErrParamRequired("Description"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Ip == nil {
		invalidParams.Add(request.NewErrParamRequired("Ip"))
	}
	if s.Port == nil {
		invalidParams.Add(request.NewErrParamRequired("Port"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}
	if s.Weight == nil {
		invalidParams.Add(request.NewErrParamRequired("Weight"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetDescription(v string) *ServerForAddServerGroupBackendServersInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetInstanceId(v string) *ServerForAddServerGroupBackendServersInput {
	s.InstanceId = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetIp(v string) *ServerForAddServerGroupBackendServersInput {
	s.Ip = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetPort(v int64) *ServerForAddServerGroupBackendServersInput {
	s.Port = &v
	return s
}

// SetType sets the Type field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetType(v string) *ServerForAddServerGroupBackendServersInput {
	s.Type = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ServerForAddServerGroupBackendServersInput) SetWeight(v int64) *ServerForAddServerGroupBackendServersInput {
	s.Weight = &v
	return s
}

type ServerForCreateServerGroupInput struct {
	_ struct{} `type:"structure"`

	// Description is a required field
	Description *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// Ip is a required field
	Ip *string `type:"string" required:"true"`

	// Port is a required field
	Port *int64 `type:"integer" required:"true"`

	// Type is a required field
	Type *string `type:"string" required:"true"`

	Weight *int64 `type:"integer"`
}

// String returns the string representation
func (s ServerForCreateServerGroupInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerForCreateServerGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ServerForCreateServerGroupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ServerForCreateServerGroupInput"}
	if s.Description == nil {
		invalidParams.Add(request.NewErrParamRequired("Description"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.Ip == nil {
		invalidParams.Add(request.NewErrParamRequired("Ip"))
	}
	if s.Port == nil {
		invalidParams.Add(request.NewErrParamRequired("Port"))
	}
	if s.Type == nil {
		invalidParams.Add(request.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ServerForCreateServerGroupInput) SetDescription(v string) *ServerForCreateServerGroupInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ServerForCreateServerGroupInput) SetInstanceId(v string) *ServerForCreateServerGroupInput {
	s.InstanceId = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *ServerForCreateServerGroupInput) SetIp(v string) *ServerForCreateServerGroupInput {
	s.Ip = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ServerForCreateServerGroupInput) SetPort(v int64) *ServerForCreateServerGroupInput {
	s.Port = &v
	return s
}

// SetType sets the Type field's value.
func (s *ServerForCreateServerGroupInput) SetType(v string) *ServerForCreateServerGroupInput {
	s.Type = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ServerForCreateServerGroupInput) SetWeight(v int64) *ServerForCreateServerGroupInput {
	s.Weight = &v
	return s
}

type ServerForDescribeServerGroupAttributesOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	InstanceId *string `type:"string"`

	Ip *string `type:"string"`

	Port *int64 `type:"integer"`

	ServerId *string `type:"string"`

	Type *string `type:"string"`

	Weight *int64 `type:"integer"`
}

// String returns the string representation
func (s ServerForDescribeServerGroupAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerForDescribeServerGroupAttributesOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *ServerForDescribeServerGroupAttributesOutput) SetDescription(v string) *ServerForDescribeServerGroupAttributesOutput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ServerForDescribeServerGroupAttributesOutput) SetInstanceId(v string) *ServerForDescribeServerGroupAttributesOutput {
	s.InstanceId = &v
	return s
}

// SetIp sets the Ip field's value.
func (s *ServerForDescribeServerGroupAttributesOutput) SetIp(v string) *ServerForDescribeServerGroupAttributesOutput {
	s.Ip = &v
	return s
}

// SetPort sets the Port field's value.
func (s *ServerForDescribeServerGroupAttributesOutput) SetPort(v int64) *ServerForDescribeServerGroupAttributesOutput {
	s.Port = &v
	return s
}

// SetServerId sets the ServerId field's value.
func (s *ServerForDescribeServerGroupAttributesOutput) SetServerId(v string) *ServerForDescribeServerGroupAttributesOutput {
	s.ServerId = &v
	return s
}

// SetType sets the Type field's value.
func (s *ServerForDescribeServerGroupAttributesOutput) SetType(v string) *ServerForDescribeServerGroupAttributesOutput {
	s.Type = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ServerForDescribeServerGroupAttributesOutput) SetWeight(v int64) *ServerForDescribeServerGroupAttributesOutput {
	s.Weight = &v
	return s
}

type ServerForModifyServerGroupAttributesInput struct {
	_ struct{} `type:"structure"`

	// Port is a required field
	Port *int64 `type:"integer" required:"true"`

	// ServerId is a required field
	ServerId *string `type:"string" required:"true"`

	Weight *int64 `type:"integer"`
}

// String returns the string representation
func (s ServerForModifyServerGroupAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerForModifyServerGroupAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ServerForModifyServerGroupAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ServerForModifyServerGroupAttributesInput"}
	if s.Port == nil {
		invalidParams.Add(request.NewErrParamRequired("Port"))
	}
	if s.ServerId == nil {
		invalidParams.Add(request.NewErrParamRequired("ServerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPort sets the Port field's value.
func (s *ServerForModifyServerGroupAttributesInput) SetPort(v int64) *ServerForModifyServerGroupAttributesInput {
	s.Port = &v
	return s
}

// SetServerId sets the ServerId field's value.
func (s *ServerForModifyServerGroupAttributesInput) SetServerId(v string) *ServerForModifyServerGroupAttributesInput {
	s.ServerId = &v
	return s
}

// SetWeight sets the Weight field's value.
func (s *ServerForModifyServerGroupAttributesInput) SetWeight(v int64) *ServerForModifyServerGroupAttributesInput {
	s.Weight = &v
	return s
}

type ServerGroupForDescribeLoadBalancerAttributesOutput struct {
	_ struct{} `type:"structure"`

	ServerGroupId *string `type:"string"`

	ServerGroupName *string `type:"string"`
}

// String returns the string representation
func (s ServerGroupForDescribeLoadBalancerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerGroupForDescribeLoadBalancerAttributesOutput) GoString() string {
	return s.String()
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *ServerGroupForDescribeLoadBalancerAttributesOutput) SetServerGroupId(v string) *ServerGroupForDescribeLoadBalancerAttributesOutput {
	s.ServerGroupId = &v
	return s
}

// SetServerGroupName sets the ServerGroupName field's value.
func (s *ServerGroupForDescribeLoadBalancerAttributesOutput) SetServerGroupName(v string) *ServerGroupForDescribeLoadBalancerAttributesOutput {
	s.ServerGroupName = &v
	return s
}

type ServerGroupForDescribeServerGroupsOutput struct {
	_ struct{} `type:"structure"`

	CreateTime *string `type:"string"`

	Description *string `type:"string"`

	ServerGroupId *string `type:"string"`

	ServerGroupName *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s ServerGroupForDescribeServerGroupsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerGroupForDescribeServerGroupsOutput) GoString() string {
	return s.String()
}

// SetCreateTime sets the CreateTime field's value.
func (s *ServerGroupForDescribeServerGroupsOutput) SetCreateTime(v string) *ServerGroupForDescribeServerGroupsOutput {
	s.CreateTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ServerGroupForDescribeServerGroupsOutput) SetDescription(v string) *ServerGroupForDescribeServerGroupsOutput {
	s.Description = &v
	return s
}

// SetServerGroupId sets the ServerGroupId field's value.
func (s *ServerGroupForDescribeServerGroupsOutput) SetServerGroupId(v string) *ServerGroupForDescribeServerGroupsOutput {
	s.ServerGroupId = &v
	return s
}

// SetServerGroupName sets the ServerGroupName field's value.
func (s *ServerGroupForDescribeServerGroupsOutput) SetServerGroupName(v string) *ServerGroupForDescribeServerGroupsOutput {
	s.ServerGroupName = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *ServerGroupForDescribeServerGroupsOutput) SetUpdateTime(v string) *ServerGroupForDescribeServerGroupsOutput {
	s.UpdateTime = &v
	return s
}

type UploadCertificateInput struct {
	_ struct{} `type:"structure"`

	CertificateName *string `type:"string"`

	Description *string `type:"string"`

	// PrivateKey is a required field
	PrivateKey *string `type:"string" required:"true"`

	// PublicKey is a required field
	PublicKey *string `type:"string" required:"true"`
}

// String returns the string representation
func (s UploadCertificateInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadCertificateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UploadCertificateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "UploadCertificateInput"}
	if s.PrivateKey == nil {
		invalidParams.Add(request.NewErrParamRequired("PrivateKey"))
	}
	if s.PublicKey == nil {
		invalidParams.Add(request.NewErrParamRequired("PublicKey"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetCertificateName sets the CertificateName field's value.
func (s *UploadCertificateInput) SetCertificateName(v string) *UploadCertificateInput {
	s.CertificateName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *UploadCertificateInput) SetDescription(v string) *UploadCertificateInput {
	s.Description = &v
	return s
}

// SetPrivateKey sets the PrivateKey field's value.
func (s *UploadCertificateInput) SetPrivateKey(v string) *UploadCertificateInput {
	s.PrivateKey = &v
	return s
}

// SetPublicKey sets the PublicKey field's value.
func (s *UploadCertificateInput) SetPublicKey(v string) *UploadCertificateInput {
	s.PublicKey = &v
	return s
}

type UploadCertificateOutput struct {
	_ struct{} `type:"structure"`

	CertificateId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s UploadCertificateOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s UploadCertificateOutput) GoString() string {
	return s.String()
}

// SetCertificateId sets the CertificateId field's value.
func (s *UploadCertificateOutput) SetCertificateId(v string) *UploadCertificateOutput {
	s.CertificateId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *UploadCertificateOutput) SetRequestId(v string) *UploadCertificateOutput {
	s.RequestId = &v
	return s
}

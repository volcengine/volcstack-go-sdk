// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opConfirmDirectConnectConnectionCommon = "ConfirmDirectConnectConnection"

// ConfirmDirectConnectConnectionCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ConfirmDirectConnectConnectionCommon operation. The "output" return
// value will be populated with the ConfirmDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ConfirmDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ConfirmDirectConnectConnectionCommon Send returns without error.
//
// See ConfirmDirectConnectConnectionCommon for more information on using the ConfirmDirectConnectConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the ConfirmDirectConnectConnectionCommonRequest method.
//    req, resp := client.ConfirmDirectConnectConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ConfirmDirectConnectConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opConfirmDirectConnectConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ConfirmDirectConnectConnectionCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ConfirmDirectConnectConnectionCommon for usage and error information.
func (c *DIRECTCONNECT) ConfirmDirectConnectConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ConfirmDirectConnectConnectionCommonRequest(input)
	return out, req.Send()
}

// ConfirmDirectConnectConnectionCommonWithContext is the same as ConfirmDirectConnectConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ConfirmDirectConnectConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ConfirmDirectConnectConnectionCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ConfirmDirectConnectConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opConfirmDirectConnectConnection = "ConfirmDirectConnectConnection"

// ConfirmDirectConnectConnectionRequest generates a "volcstack/request.Request" representing the
// client's request for the ConfirmDirectConnectConnection operation. The "output" return
// value will be populated with the ConfirmDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ConfirmDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after ConfirmDirectConnectConnectionCommon Send returns without error.
//
// See ConfirmDirectConnectConnection for more information on using the ConfirmDirectConnectConnection
// API call, and error handling.
//
//    // Example sending a request using the ConfirmDirectConnectConnectionRequest method.
//    req, resp := client.ConfirmDirectConnectConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ConfirmDirectConnectConnectionRequest(input *ConfirmDirectConnectConnectionInput) (req *request.Request, output *ConfirmDirectConnectConnectionOutput) {
	op := &request.Operation{
		Name:       opConfirmDirectConnectConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ConfirmDirectConnectConnectionInput{}
	}

	output = &ConfirmDirectConnectConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ConfirmDirectConnectConnection API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ConfirmDirectConnectConnection for usage and error information.
func (c *DIRECTCONNECT) ConfirmDirectConnectConnection(input *ConfirmDirectConnectConnectionInput) (*ConfirmDirectConnectConnectionOutput, error) {
	req, out := c.ConfirmDirectConnectConnectionRequest(input)
	return out, req.Send()
}

// ConfirmDirectConnectConnectionWithContext is the same as ConfirmDirectConnectConnection with the addition of
// the ability to pass a context and additional request options.
//
// See ConfirmDirectConnectConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ConfirmDirectConnectConnectionWithContext(ctx volcstack.Context, input *ConfirmDirectConnectConnectionInput, opts ...request.Option) (*ConfirmDirectConnectConnectionOutput, error) {
	req, out := c.ConfirmDirectConnectConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBgpPeerCommon = "CreateBgpPeer"

// CreateBgpPeerCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateBgpPeerCommon operation. The "output" return
// value will be populated with the CreateBgpPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBgpPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBgpPeerCommon Send returns without error.
//
// See CreateBgpPeerCommon for more information on using the CreateBgpPeerCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateBgpPeerCommonRequest method.
//    req, resp := client.CreateBgpPeerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateBgpPeerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateBgpPeerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateBgpPeerCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateBgpPeerCommon for usage and error information.
func (c *DIRECTCONNECT) CreateBgpPeerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateBgpPeerCommonRequest(input)
	return out, req.Send()
}

// CreateBgpPeerCommonWithContext is the same as CreateBgpPeerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBgpPeerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateBgpPeerCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateBgpPeerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBgpPeer = "CreateBgpPeer"

// CreateBgpPeerRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateBgpPeer operation. The "output" return
// value will be populated with the CreateBgpPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBgpPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBgpPeerCommon Send returns without error.
//
// See CreateBgpPeer for more information on using the CreateBgpPeer
// API call, and error handling.
//
//    // Example sending a request using the CreateBgpPeerRequest method.
//    req, resp := client.CreateBgpPeerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateBgpPeerRequest(input *CreateBgpPeerInput) (req *request.Request, output *CreateBgpPeerOutput) {
	op := &request.Operation{
		Name:       opCreateBgpPeer,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateBgpPeerInput{}
	}

	output = &CreateBgpPeerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateBgpPeer API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateBgpPeer for usage and error information.
func (c *DIRECTCONNECT) CreateBgpPeer(input *CreateBgpPeerInput) (*CreateBgpPeerOutput, error) {
	req, out := c.CreateBgpPeerRequest(input)
	return out, req.Send()
}

// CreateBgpPeerWithContext is the same as CreateBgpPeer with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBgpPeer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateBgpPeerWithContext(ctx volcstack.Context, input *CreateBgpPeerInput, opts ...request.Option) (*CreateBgpPeerOutput, error) {
	req, out := c.CreateBgpPeerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDirectConnectGatewayCommon = "CreateDirectConnectGateway"

// CreateDirectConnectGatewayCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDirectConnectGatewayCommon operation. The "output" return
// value will be populated with the CreateDirectConnectGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDirectConnectGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDirectConnectGatewayCommon Send returns without error.
//
// See CreateDirectConnectGatewayCommon for more information on using the CreateDirectConnectGatewayCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDirectConnectGatewayCommonRequest method.
//    req, resp := client.CreateDirectConnectGatewayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateDirectConnectGatewayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDirectConnectGatewayCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDirectConnectGatewayCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateDirectConnectGatewayCommon for usage and error information.
func (c *DIRECTCONNECT) CreateDirectConnectGatewayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDirectConnectGatewayCommonRequest(input)
	return out, req.Send()
}

// CreateDirectConnectGatewayCommonWithContext is the same as CreateDirectConnectGatewayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDirectConnectGatewayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateDirectConnectGatewayCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDirectConnectGatewayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDirectConnectGateway = "CreateDirectConnectGateway"

// CreateDirectConnectGatewayRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDirectConnectGateway operation. The "output" return
// value will be populated with the CreateDirectConnectGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDirectConnectGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDirectConnectGatewayCommon Send returns without error.
//
// See CreateDirectConnectGateway for more information on using the CreateDirectConnectGateway
// API call, and error handling.
//
//    // Example sending a request using the CreateDirectConnectGatewayRequest method.
//    req, resp := client.CreateDirectConnectGatewayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateDirectConnectGatewayRequest(input *CreateDirectConnectGatewayInput) (req *request.Request, output *CreateDirectConnectGatewayOutput) {
	op := &request.Operation{
		Name:       opCreateDirectConnectGateway,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDirectConnectGatewayInput{}
	}

	output = &CreateDirectConnectGatewayOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDirectConnectGateway API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateDirectConnectGateway for usage and error information.
func (c *DIRECTCONNECT) CreateDirectConnectGateway(input *CreateDirectConnectGatewayInput) (*CreateDirectConnectGatewayOutput, error) {
	req, out := c.CreateDirectConnectGatewayRequest(input)
	return out, req.Send()
}

// CreateDirectConnectGatewayWithContext is the same as CreateDirectConnectGateway with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDirectConnectGateway for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateDirectConnectGatewayWithContext(ctx volcstack.Context, input *CreateDirectConnectGatewayInput, opts ...request.Option) (*CreateDirectConnectGatewayOutput, error) {
	req, out := c.CreateDirectConnectGatewayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDirectConnectGatewayRouteCommon = "CreateDirectConnectGatewayRoute"

// CreateDirectConnectGatewayRouteCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDirectConnectGatewayRouteCommon operation. The "output" return
// value will be populated with the CreateDirectConnectGatewayRouteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDirectConnectGatewayRouteCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDirectConnectGatewayRouteCommon Send returns without error.
//
// See CreateDirectConnectGatewayRouteCommon for more information on using the CreateDirectConnectGatewayRouteCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDirectConnectGatewayRouteCommonRequest method.
//    req, resp := client.CreateDirectConnectGatewayRouteCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateDirectConnectGatewayRouteCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDirectConnectGatewayRouteCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDirectConnectGatewayRouteCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateDirectConnectGatewayRouteCommon for usage and error information.
func (c *DIRECTCONNECT) CreateDirectConnectGatewayRouteCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDirectConnectGatewayRouteCommonRequest(input)
	return out, req.Send()
}

// CreateDirectConnectGatewayRouteCommonWithContext is the same as CreateDirectConnectGatewayRouteCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDirectConnectGatewayRouteCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateDirectConnectGatewayRouteCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDirectConnectGatewayRouteCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDirectConnectGatewayRoute = "CreateDirectConnectGatewayRoute"

// CreateDirectConnectGatewayRouteRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDirectConnectGatewayRoute operation. The "output" return
// value will be populated with the CreateDirectConnectGatewayRouteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDirectConnectGatewayRouteCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDirectConnectGatewayRouteCommon Send returns without error.
//
// See CreateDirectConnectGatewayRoute for more information on using the CreateDirectConnectGatewayRoute
// API call, and error handling.
//
//    // Example sending a request using the CreateDirectConnectGatewayRouteRequest method.
//    req, resp := client.CreateDirectConnectGatewayRouteRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateDirectConnectGatewayRouteRequest(input *CreateDirectConnectGatewayRouteInput) (req *request.Request, output *CreateDirectConnectGatewayRouteOutput) {
	op := &request.Operation{
		Name:       opCreateDirectConnectGatewayRoute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDirectConnectGatewayRouteInput{}
	}

	output = &CreateDirectConnectGatewayRouteOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDirectConnectGatewayRoute API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateDirectConnectGatewayRoute for usage and error information.
func (c *DIRECTCONNECT) CreateDirectConnectGatewayRoute(input *CreateDirectConnectGatewayRouteInput) (*CreateDirectConnectGatewayRouteOutput, error) {
	req, out := c.CreateDirectConnectGatewayRouteRequest(input)
	return out, req.Send()
}

// CreateDirectConnectGatewayRouteWithContext is the same as CreateDirectConnectGatewayRoute with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDirectConnectGatewayRoute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateDirectConnectGatewayRouteWithContext(ctx volcstack.Context, input *CreateDirectConnectGatewayRouteInput, opts ...request.Option) (*CreateDirectConnectGatewayRouteOutput, error) {
	req, out := c.CreateDirectConnectGatewayRouteRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDirectConnectVirtualInterfaceCommon = "CreateDirectConnectVirtualInterface"

// CreateDirectConnectVirtualInterfaceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDirectConnectVirtualInterfaceCommon operation. The "output" return
// value will be populated with the CreateDirectConnectVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDirectConnectVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDirectConnectVirtualInterfaceCommon Send returns without error.
//
// See CreateDirectConnectVirtualInterfaceCommon for more information on using the CreateDirectConnectVirtualInterfaceCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDirectConnectVirtualInterfaceCommonRequest method.
//    req, resp := client.CreateDirectConnectVirtualInterfaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateDirectConnectVirtualInterfaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDirectConnectVirtualInterfaceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDirectConnectVirtualInterfaceCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateDirectConnectVirtualInterfaceCommon for usage and error information.
func (c *DIRECTCONNECT) CreateDirectConnectVirtualInterfaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDirectConnectVirtualInterfaceCommonRequest(input)
	return out, req.Send()
}

// CreateDirectConnectVirtualInterfaceCommonWithContext is the same as CreateDirectConnectVirtualInterfaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDirectConnectVirtualInterfaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateDirectConnectVirtualInterfaceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDirectConnectVirtualInterfaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDirectConnectVirtualInterface = "CreateDirectConnectVirtualInterface"

// CreateDirectConnectVirtualInterfaceRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDirectConnectVirtualInterface operation. The "output" return
// value will be populated with the CreateDirectConnectVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDirectConnectVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDirectConnectVirtualInterfaceCommon Send returns without error.
//
// See CreateDirectConnectVirtualInterface for more information on using the CreateDirectConnectVirtualInterface
// API call, and error handling.
//
//    // Example sending a request using the CreateDirectConnectVirtualInterfaceRequest method.
//    req, resp := client.CreateDirectConnectVirtualInterfaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateDirectConnectVirtualInterfaceRequest(input *CreateDirectConnectVirtualInterfaceInput) (req *request.Request, output *CreateDirectConnectVirtualInterfaceOutput) {
	op := &request.Operation{
		Name:       opCreateDirectConnectVirtualInterface,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDirectConnectVirtualInterfaceInput{}
	}

	output = &CreateDirectConnectVirtualInterfaceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDirectConnectVirtualInterface API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateDirectConnectVirtualInterface for usage and error information.
func (c *DIRECTCONNECT) CreateDirectConnectVirtualInterface(input *CreateDirectConnectVirtualInterfaceInput) (*CreateDirectConnectVirtualInterfaceOutput, error) {
	req, out := c.CreateDirectConnectVirtualInterfaceRequest(input)
	return out, req.Send()
}

// CreateDirectConnectVirtualInterfaceWithContext is the same as CreateDirectConnectVirtualInterface with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDirectConnectVirtualInterface for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateDirectConnectVirtualInterfaceWithContext(ctx volcstack.Context, input *CreateDirectConnectVirtualInterfaceInput, opts ...request.Option) (*CreateDirectConnectVirtualInterfaceOutput, error) {
	req, out := c.CreateDirectConnectVirtualInterfaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSharedDirectConnectConnectionCommon = "CreateSharedDirectConnectConnection"

// CreateSharedDirectConnectConnectionCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateSharedDirectConnectConnectionCommon operation. The "output" return
// value will be populated with the CreateSharedDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSharedDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSharedDirectConnectConnectionCommon Send returns without error.
//
// See CreateSharedDirectConnectConnectionCommon for more information on using the CreateSharedDirectConnectConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSharedDirectConnectConnectionCommonRequest method.
//    req, resp := client.CreateSharedDirectConnectConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSharedDirectConnectConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSharedDirectConnectConnectionCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateSharedDirectConnectConnectionCommon for usage and error information.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSharedDirectConnectConnectionCommonRequest(input)
	return out, req.Send()
}

// CreateSharedDirectConnectConnectionCommonWithContext is the same as CreateSharedDirectConnectConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSharedDirectConnectConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSharedDirectConnectConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSharedDirectConnectConnection = "CreateSharedDirectConnectConnection"

// CreateSharedDirectConnectConnectionRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateSharedDirectConnectConnection operation. The "output" return
// value will be populated with the CreateSharedDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSharedDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSharedDirectConnectConnectionCommon Send returns without error.
//
// See CreateSharedDirectConnectConnection for more information on using the CreateSharedDirectConnectConnection
// API call, and error handling.
//
//    // Example sending a request using the CreateSharedDirectConnectConnectionRequest method.
//    req, resp := client.CreateSharedDirectConnectConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionRequest(input *CreateSharedDirectConnectConnectionInput) (req *request.Request, output *CreateSharedDirectConnectConnectionOutput) {
	op := &request.Operation{
		Name:       opCreateSharedDirectConnectConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSharedDirectConnectConnectionInput{}
	}

	output = &CreateSharedDirectConnectConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSharedDirectConnectConnection API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateSharedDirectConnectConnection for usage and error information.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnection(input *CreateSharedDirectConnectConnectionInput) (*CreateSharedDirectConnectConnectionOutput, error) {
	req, out := c.CreateSharedDirectConnectConnectionRequest(input)
	return out, req.Send()
}

// CreateSharedDirectConnectConnectionWithContext is the same as CreateSharedDirectConnectConnection with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSharedDirectConnectConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionWithContext(ctx volcstack.Context, input *CreateSharedDirectConnectConnectionInput, opts ...request.Option) (*CreateSharedDirectConnectConnectionOutput, error) {
	req, out := c.CreateSharedDirectConnectConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteBgpPeerCommon = "DeleteBgpPeer"

// DeleteBgpPeerCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteBgpPeerCommon operation. The "output" return
// value will be populated with the DeleteBgpPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteBgpPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteBgpPeerCommon Send returns without error.
//
// See DeleteBgpPeerCommon for more information on using the DeleteBgpPeerCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteBgpPeerCommonRequest method.
//    req, resp := client.DeleteBgpPeerCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteBgpPeerCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteBgpPeerCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteBgpPeerCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteBgpPeerCommon for usage and error information.
func (c *DIRECTCONNECT) DeleteBgpPeerCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteBgpPeerCommonRequest(input)
	return out, req.Send()
}

// DeleteBgpPeerCommonWithContext is the same as DeleteBgpPeerCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteBgpPeerCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteBgpPeerCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteBgpPeerCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteBgpPeer = "DeleteBgpPeer"

// DeleteBgpPeerRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteBgpPeer operation. The "output" return
// value will be populated with the DeleteBgpPeerCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteBgpPeerCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteBgpPeerCommon Send returns without error.
//
// See DeleteBgpPeer for more information on using the DeleteBgpPeer
// API call, and error handling.
//
//    // Example sending a request using the DeleteBgpPeerRequest method.
//    req, resp := client.DeleteBgpPeerRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteBgpPeerRequest(input *DeleteBgpPeerInput) (req *request.Request, output *DeleteBgpPeerOutput) {
	op := &request.Operation{
		Name:       opDeleteBgpPeer,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteBgpPeerInput{}
	}

	output = &DeleteBgpPeerOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteBgpPeer API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteBgpPeer for usage and error information.
func (c *DIRECTCONNECT) DeleteBgpPeer(input *DeleteBgpPeerInput) (*DeleteBgpPeerOutput, error) {
	req, out := c.DeleteBgpPeerRequest(input)
	return out, req.Send()
}

// DeleteBgpPeerWithContext is the same as DeleteBgpPeer with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteBgpPeer for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteBgpPeerWithContext(ctx volcstack.Context, input *DeleteBgpPeerInput, opts ...request.Option) (*DeleteBgpPeerOutput, error) {
	req, out := c.DeleteBgpPeerRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectConnectionCommon = "DeleteDirectConnectConnection"

// DeleteDirectConnectConnectionCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectConnectionCommon operation. The "output" return
// value will be populated with the DeleteDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectConnectionCommon Send returns without error.
//
// See DeleteDirectConnectConnectionCommon for more information on using the DeleteDirectConnectConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectConnectionCommonRequest method.
//    req, resp := client.DeleteDirectConnectConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectConnectionCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectConnectionCommon for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectConnectionCommonRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectConnectionCommonWithContext is the same as DeleteDirectConnectConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectConnection = "DeleteDirectConnectConnection"

// DeleteDirectConnectConnectionRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectConnection operation. The "output" return
// value will be populated with the DeleteDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectConnectionCommon Send returns without error.
//
// See DeleteDirectConnectConnection for more information on using the DeleteDirectConnectConnection
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectConnectionRequest method.
//    req, resp := client.DeleteDirectConnectConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionRequest(input *DeleteDirectConnectConnectionInput) (req *request.Request, output *DeleteDirectConnectConnectionOutput) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDirectConnectConnectionInput{}
	}

	output = &DeleteDirectConnectConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectConnection API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectConnection for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectConnection(input *DeleteDirectConnectConnectionInput) (*DeleteDirectConnectConnectionOutput, error) {
	req, out := c.DeleteDirectConnectConnectionRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectConnectionWithContext is the same as DeleteDirectConnectConnection with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionWithContext(ctx volcstack.Context, input *DeleteDirectConnectConnectionInput, opts ...request.Option) (*DeleteDirectConnectConnectionOutput, error) {
	req, out := c.DeleteDirectConnectConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectGatewayCommon = "DeleteDirectConnectGateway"

// DeleteDirectConnectGatewayCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectGatewayCommon operation. The "output" return
// value will be populated with the DeleteDirectConnectGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectGatewayCommon Send returns without error.
//
// See DeleteDirectConnectGatewayCommon for more information on using the DeleteDirectConnectGatewayCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectGatewayCommonRequest method.
//    req, resp := client.DeleteDirectConnectGatewayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectGatewayCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectGatewayCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectGatewayCommon for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectGatewayCommonRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectGatewayCommonWithContext is the same as DeleteDirectConnectGatewayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectGatewayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectGatewayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectGateway = "DeleteDirectConnectGateway"

// DeleteDirectConnectGatewayRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectGateway operation. The "output" return
// value will be populated with the DeleteDirectConnectGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectGatewayCommon Send returns without error.
//
// See DeleteDirectConnectGateway for more information on using the DeleteDirectConnectGateway
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectGatewayRequest method.
//    req, resp := client.DeleteDirectConnectGatewayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayRequest(input *DeleteDirectConnectGatewayInput) (req *request.Request, output *DeleteDirectConnectGatewayOutput) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectGateway,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDirectConnectGatewayInput{}
	}

	output = &DeleteDirectConnectGatewayOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectGateway API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectGateway for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectGateway(input *DeleteDirectConnectGatewayInput) (*DeleteDirectConnectGatewayOutput, error) {
	req, out := c.DeleteDirectConnectGatewayRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectGatewayWithContext is the same as DeleteDirectConnectGateway with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectGateway for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayWithContext(ctx volcstack.Context, input *DeleteDirectConnectGatewayInput, opts ...request.Option) (*DeleteDirectConnectGatewayOutput, error) {
	req, out := c.DeleteDirectConnectGatewayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectGatewayRouteCommon = "DeleteDirectConnectGatewayRoute"

// DeleteDirectConnectGatewayRouteCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectGatewayRouteCommon operation. The "output" return
// value will be populated with the DeleteDirectConnectGatewayRouteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectGatewayRouteCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectGatewayRouteCommon Send returns without error.
//
// See DeleteDirectConnectGatewayRouteCommon for more information on using the DeleteDirectConnectGatewayRouteCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectGatewayRouteCommonRequest method.
//    req, resp := client.DeleteDirectConnectGatewayRouteCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayRouteCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectGatewayRouteCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectGatewayRouteCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectGatewayRouteCommon for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayRouteCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectGatewayRouteCommonRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectGatewayRouteCommonWithContext is the same as DeleteDirectConnectGatewayRouteCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectGatewayRouteCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayRouteCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectGatewayRouteCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectGatewayRoute = "DeleteDirectConnectGatewayRoute"

// DeleteDirectConnectGatewayRouteRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectGatewayRoute operation. The "output" return
// value will be populated with the DeleteDirectConnectGatewayRouteCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectGatewayRouteCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectGatewayRouteCommon Send returns without error.
//
// See DeleteDirectConnectGatewayRoute for more information on using the DeleteDirectConnectGatewayRoute
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectGatewayRouteRequest method.
//    req, resp := client.DeleteDirectConnectGatewayRouteRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayRouteRequest(input *DeleteDirectConnectGatewayRouteInput) (req *request.Request, output *DeleteDirectConnectGatewayRouteOutput) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectGatewayRoute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDirectConnectGatewayRouteInput{}
	}

	output = &DeleteDirectConnectGatewayRouteOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectGatewayRoute API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectGatewayRoute for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayRoute(input *DeleteDirectConnectGatewayRouteInput) (*DeleteDirectConnectGatewayRouteOutput, error) {
	req, out := c.DeleteDirectConnectGatewayRouteRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectGatewayRouteWithContext is the same as DeleteDirectConnectGatewayRoute with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectGatewayRoute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectGatewayRouteWithContext(ctx volcstack.Context, input *DeleteDirectConnectGatewayRouteInput, opts ...request.Option) (*DeleteDirectConnectGatewayRouteOutput, error) {
	req, out := c.DeleteDirectConnectGatewayRouteRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectVirtualInterfaceCommon = "DeleteDirectConnectVirtualInterface"

// DeleteDirectConnectVirtualInterfaceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectVirtualInterfaceCommon operation. The "output" return
// value will be populated with the DeleteDirectConnectVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectVirtualInterfaceCommon Send returns without error.
//
// See DeleteDirectConnectVirtualInterfaceCommon for more information on using the DeleteDirectConnectVirtualInterfaceCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectVirtualInterfaceCommonRequest method.
//    req, resp := client.DeleteDirectConnectVirtualInterfaceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectVirtualInterfaceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectVirtualInterfaceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectVirtualInterfaceCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectVirtualInterfaceCommon for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectVirtualInterfaceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectVirtualInterfaceCommonRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectVirtualInterfaceCommonWithContext is the same as DeleteDirectConnectVirtualInterfaceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectVirtualInterfaceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectVirtualInterfaceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectVirtualInterfaceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectVirtualInterface = "DeleteDirectConnectVirtualInterface"

// DeleteDirectConnectVirtualInterfaceRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectVirtualInterface operation. The "output" return
// value will be populated with the DeleteDirectConnectVirtualInterfaceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectVirtualInterfaceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectVirtualInterfaceCommon Send returns without error.
//
// See DeleteDirectConnectVirtualInterface for more information on using the DeleteDirectConnectVirtualInterface
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectVirtualInterfaceRequest method.
//    req, resp := client.DeleteDirectConnectVirtualInterfaceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectVirtualInterfaceRequest(input *DeleteDirectConnectVirtualInterfaceInput) (req *request.Request, output *DeleteDirectConnectVirtualInterfaceOutput) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectVirtualInterface,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDirectConnectVirtualInterfaceInput{}
	}

	output = &DeleteDirectConnectVirtualInterfaceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectVirtualInterface API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectVirtualInterface for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectVirtualInterface(input *DeleteDirectConnectVirtualInterfaceInput) (*DeleteDirectConnectVirtualInterfaceOutput, error) {
	req, out := c.DeleteDirectConnectVirtualInterfaceRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectVirtualInterfaceWithContext is the same as DeleteDirectConnectVirtualInterface with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectVirtualInterface for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectVirtualInterfaceWithContext(ctx volcstack.Context, input *DeleteDirectConnectVirtualInterfaceInput, opts ...request.Option) (*DeleteDirectConnectVirtualInterfaceOutput, error) {
	req, out := c.DeleteDirectConnectVirtualInterfaceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBgpPeerAttributesCommon = "DescribeBgpPeerAttributes"

// DescribeBgpPeerAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBgpPeerAttributesCommon operation. The "output" return
// value will be populated with the DescribeBgpPeerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBgpPeerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBgpPeerAttributesCommon Send returns without error.
//
// See DescribeBgpPeerAttributesCommon for more information on using the DescribeBgpPeerAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBgpPeerAttributesCommonRequest method.
//    req, resp := client.DescribeBgpPeerAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeBgpPeerAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBgpPeerAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeBgpPeerAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeBgpPeerAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeBgpPeerAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBgpPeerAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeBgpPeerAttributesCommonWithContext is the same as DescribeBgpPeerAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBgpPeerAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeBgpPeerAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBgpPeerAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBgpPeerAttributes = "DescribeBgpPeerAttributes"

// DescribeBgpPeerAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBgpPeerAttributes operation. The "output" return
// value will be populated with the DescribeBgpPeerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBgpPeerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBgpPeerAttributesCommon Send returns without error.
//
// See DescribeBgpPeerAttributes for more information on using the DescribeBgpPeerAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeBgpPeerAttributesRequest method.
//    req, resp := client.DescribeBgpPeerAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeBgpPeerAttributesRequest(input *DescribeBgpPeerAttributesInput) (req *request.Request, output *DescribeBgpPeerAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeBgpPeerAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBgpPeerAttributesInput{}
	}

	output = &DescribeBgpPeerAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeBgpPeerAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeBgpPeerAttributes for usage and error information.
func (c *DIRECTCONNECT) DescribeBgpPeerAttributes(input *DescribeBgpPeerAttributesInput) (*DescribeBgpPeerAttributesOutput, error) {
	req, out := c.DescribeBgpPeerAttributesRequest(input)
	return out, req.Send()
}

// DescribeBgpPeerAttributesWithContext is the same as DescribeBgpPeerAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBgpPeerAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeBgpPeerAttributesWithContext(ctx volcstack.Context, input *DescribeBgpPeerAttributesInput, opts ...request.Option) (*DescribeBgpPeerAttributesOutput, error) {
	req, out := c.DescribeBgpPeerAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBgpPeersCommon = "DescribeBgpPeers"

// DescribeBgpPeersCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBgpPeersCommon operation. The "output" return
// value will be populated with the DescribeBgpPeersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBgpPeersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBgpPeersCommon Send returns without error.
//
// See DescribeBgpPeersCommon for more information on using the DescribeBgpPeersCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBgpPeersCommonRequest method.
//    req, resp := client.DescribeBgpPeersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeBgpPeersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBgpPeersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeBgpPeersCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeBgpPeersCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeBgpPeersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBgpPeersCommonRequest(input)
	return out, req.Send()
}

// DescribeBgpPeersCommonWithContext is the same as DescribeBgpPeersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBgpPeersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeBgpPeersCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBgpPeersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBgpPeers = "DescribeBgpPeers"

// DescribeBgpPeersRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeBgpPeers operation. The "output" return
// value will be populated with the DescribeBgpPeersCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBgpPeersCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBgpPeersCommon Send returns without error.
//
// See DescribeBgpPeers for more information on using the DescribeBgpPeers
// API call, and error handling.
//
//    // Example sending a request using the DescribeBgpPeersRequest method.
//    req, resp := client.DescribeBgpPeersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeBgpPeersRequest(input *DescribeBgpPeersInput) (req *request.Request, output *DescribeBgpPeersOutput) {
	op := &request.Operation{
		Name:       opDescribeBgpPeers,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBgpPeersInput{}
	}

	output = &DescribeBgpPeersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeBgpPeers API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeBgpPeers for usage and error information.
func (c *DIRECTCONNECT) DescribeBgpPeers(input *DescribeBgpPeersInput) (*DescribeBgpPeersOutput, error) {
	req, out := c.DescribeBgpPeersRequest(input)
	return out, req.Send()
}

// DescribeBgpPeersWithContext is the same as DescribeBgpPeers with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBgpPeers for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeBgpPeersWithContext(ctx volcstack.Context, input *DescribeBgpPeersInput, opts ...request.Option) (*DescribeBgpPeersOutput, error) {
	req, out := c.DescribeBgpPeersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectConnectionAttributesCommon = "DescribeDirectConnectConnectionAttributes"

// DescribeDirectConnectConnectionAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectConnectionAttributesCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectConnectionAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectConnectionAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectConnectionAttributesCommon Send returns without error.
//
// See DescribeDirectConnectConnectionAttributesCommon for more information on using the DescribeDirectConnectConnectionAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectConnectionAttributesCommonRequest method.
//    req, resp := client.DescribeDirectConnectConnectionAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectConnectionAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectConnectionAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectConnectionAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectConnectionAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectConnectionAttributesCommonWithContext is the same as DescribeDirectConnectConnectionAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectConnectionAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectConnectionAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectConnectionAttributes = "DescribeDirectConnectConnectionAttributes"

// DescribeDirectConnectConnectionAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectConnectionAttributes operation. The "output" return
// value will be populated with the DescribeDirectConnectConnectionAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectConnectionAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectConnectionAttributesCommon Send returns without error.
//
// See DescribeDirectConnectConnectionAttributes for more information on using the DescribeDirectConnectConnectionAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectConnectionAttributesRequest method.
//    req, resp := client.DescribeDirectConnectConnectionAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionAttributesRequest(input *DescribeDirectConnectConnectionAttributesInput) (req *request.Request, output *DescribeDirectConnectConnectionAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectConnectionAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectConnectionAttributesInput{}
	}

	output = &DescribeDirectConnectConnectionAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectConnectionAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectConnectionAttributes for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionAttributes(input *DescribeDirectConnectConnectionAttributesInput) (*DescribeDirectConnectConnectionAttributesOutput, error) {
	req, out := c.DescribeDirectConnectConnectionAttributesRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectConnectionAttributesWithContext is the same as DescribeDirectConnectConnectionAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectConnectionAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionAttributesWithContext(ctx volcstack.Context, input *DescribeDirectConnectConnectionAttributesInput, opts ...request.Option) (*DescribeDirectConnectConnectionAttributesOutput, error) {
	req, out := c.DescribeDirectConnectConnectionAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectConnectionsCommon = "DescribeDirectConnectConnections"

// DescribeDirectConnectConnectionsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectConnectionsCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectConnectionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectConnectionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectConnectionsCommon Send returns without error.
//
// See DescribeDirectConnectConnectionsCommon for more information on using the DescribeDirectConnectConnectionsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectConnectionsCommonRequest method.
//    req, resp := client.DescribeDirectConnectConnectionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectConnectionsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectConnectionsCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectConnectionsCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectConnectionsCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectConnectionsCommonWithContext is the same as DescribeDirectConnectConnectionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectConnectionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectConnectionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectConnections = "DescribeDirectConnectConnections"

// DescribeDirectConnectConnectionsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectConnections operation. The "output" return
// value will be populated with the DescribeDirectConnectConnectionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectConnectionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectConnectionsCommon Send returns without error.
//
// See DescribeDirectConnectConnections for more information on using the DescribeDirectConnectConnections
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectConnectionsRequest method.
//    req, resp := client.DescribeDirectConnectConnectionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionsRequest(input *DescribeDirectConnectConnectionsInput) (req *request.Request, output *DescribeDirectConnectConnectionsOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectConnections,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectConnectionsInput{}
	}

	output = &DescribeDirectConnectConnectionsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectConnections API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectConnections for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectConnections(input *DescribeDirectConnectConnectionsInput) (*DescribeDirectConnectConnectionsOutput, error) {
	req, out := c.DescribeDirectConnectConnectionsRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectConnectionsWithContext is the same as DescribeDirectConnectConnections with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectConnections for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectConnectionsWithContext(ctx volcstack.Context, input *DescribeDirectConnectConnectionsInput, opts ...request.Option) (*DescribeDirectConnectConnectionsOutput, error) {
	req, out := c.DescribeDirectConnectConnectionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGatewayAttributesCommon = "DescribeDirectConnectGatewayAttributes"

// DescribeDirectConnectGatewayAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGatewayAttributesCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewayAttributesCommon Send returns without error.
//
// See DescribeDirectConnectGatewayAttributesCommon for more information on using the DescribeDirectConnectGatewayAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewayAttributesCommonRequest method.
//    req, resp := client.DescribeDirectConnectGatewayAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGatewayAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGatewayAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGatewayAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewayAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewayAttributesCommonWithContext is the same as DescribeDirectConnectGatewayAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGatewayAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewayAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGatewayAttributes = "DescribeDirectConnectGatewayAttributes"

// DescribeDirectConnectGatewayAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGatewayAttributes operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewayAttributesCommon Send returns without error.
//
// See DescribeDirectConnectGatewayAttributes for more information on using the DescribeDirectConnectGatewayAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewayAttributesRequest method.
//    req, resp := client.DescribeDirectConnectGatewayAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayAttributesRequest(input *DescribeDirectConnectGatewayAttributesInput) (req *request.Request, output *DescribeDirectConnectGatewayAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGatewayAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectGatewayAttributesInput{}
	}

	output = &DescribeDirectConnectGatewayAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGatewayAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGatewayAttributes for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayAttributes(input *DescribeDirectConnectGatewayAttributesInput) (*DescribeDirectConnectGatewayAttributesOutput, error) {
	req, out := c.DescribeDirectConnectGatewayAttributesRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewayAttributesWithContext is the same as DescribeDirectConnectGatewayAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGatewayAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayAttributesWithContext(ctx volcstack.Context, input *DescribeDirectConnectGatewayAttributesInput, opts ...request.Option) (*DescribeDirectConnectGatewayAttributesOutput, error) {
	req, out := c.DescribeDirectConnectGatewayAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGatewayRouteAttributesCommon = "DescribeDirectConnectGatewayRouteAttributes"

// DescribeDirectConnectGatewayRouteAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGatewayRouteAttributesCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewayRouteAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewayRouteAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewayRouteAttributesCommon Send returns without error.
//
// See DescribeDirectConnectGatewayRouteAttributesCommon for more information on using the DescribeDirectConnectGatewayRouteAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewayRouteAttributesCommonRequest method.
//    req, resp := client.DescribeDirectConnectGatewayRouteAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRouteAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGatewayRouteAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGatewayRouteAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGatewayRouteAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRouteAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewayRouteAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewayRouteAttributesCommonWithContext is the same as DescribeDirectConnectGatewayRouteAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGatewayRouteAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRouteAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewayRouteAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGatewayRouteAttributes = "DescribeDirectConnectGatewayRouteAttributes"

// DescribeDirectConnectGatewayRouteAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGatewayRouteAttributes operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewayRouteAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewayRouteAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewayRouteAttributesCommon Send returns without error.
//
// See DescribeDirectConnectGatewayRouteAttributes for more information on using the DescribeDirectConnectGatewayRouteAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewayRouteAttributesRequest method.
//    req, resp := client.DescribeDirectConnectGatewayRouteAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRouteAttributesRequest(input *DescribeDirectConnectGatewayRouteAttributesInput) (req *request.Request, output *DescribeDirectConnectGatewayRouteAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGatewayRouteAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectGatewayRouteAttributesInput{}
	}

	output = &DescribeDirectConnectGatewayRouteAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGatewayRouteAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGatewayRouteAttributes for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRouteAttributes(input *DescribeDirectConnectGatewayRouteAttributesInput) (*DescribeDirectConnectGatewayRouteAttributesOutput, error) {
	req, out := c.DescribeDirectConnectGatewayRouteAttributesRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewayRouteAttributesWithContext is the same as DescribeDirectConnectGatewayRouteAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGatewayRouteAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRouteAttributesWithContext(ctx volcstack.Context, input *DescribeDirectConnectGatewayRouteAttributesInput, opts ...request.Option) (*DescribeDirectConnectGatewayRouteAttributesOutput, error) {
	req, out := c.DescribeDirectConnectGatewayRouteAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGatewayRoutesCommon = "DescribeDirectConnectGatewayRoutes"

// DescribeDirectConnectGatewayRoutesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGatewayRoutesCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewayRoutesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewayRoutesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewayRoutesCommon Send returns without error.
//
// See DescribeDirectConnectGatewayRoutesCommon for more information on using the DescribeDirectConnectGatewayRoutesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewayRoutesCommonRequest method.
//    req, resp := client.DescribeDirectConnectGatewayRoutesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRoutesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGatewayRoutesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGatewayRoutesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGatewayRoutesCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRoutesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewayRoutesCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewayRoutesCommonWithContext is the same as DescribeDirectConnectGatewayRoutesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGatewayRoutesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRoutesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewayRoutesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGatewayRoutes = "DescribeDirectConnectGatewayRoutes"

// DescribeDirectConnectGatewayRoutesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGatewayRoutes operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewayRoutesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewayRoutesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewayRoutesCommon Send returns without error.
//
// See DescribeDirectConnectGatewayRoutes for more information on using the DescribeDirectConnectGatewayRoutes
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewayRoutesRequest method.
//    req, resp := client.DescribeDirectConnectGatewayRoutesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRoutesRequest(input *DescribeDirectConnectGatewayRoutesInput) (req *request.Request, output *DescribeDirectConnectGatewayRoutesOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGatewayRoutes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectGatewayRoutesInput{}
	}

	output = &DescribeDirectConnectGatewayRoutesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGatewayRoutes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGatewayRoutes for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRoutes(input *DescribeDirectConnectGatewayRoutesInput) (*DescribeDirectConnectGatewayRoutesOutput, error) {
	req, out := c.DescribeDirectConnectGatewayRoutesRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewayRoutesWithContext is the same as DescribeDirectConnectGatewayRoutes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGatewayRoutes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewayRoutesWithContext(ctx volcstack.Context, input *DescribeDirectConnectGatewayRoutesInput, opts ...request.Option) (*DescribeDirectConnectGatewayRoutesOutput, error) {
	req, out := c.DescribeDirectConnectGatewayRoutesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGatewaysCommon = "DescribeDirectConnectGateways"

// DescribeDirectConnectGatewaysCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGatewaysCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewaysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewaysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewaysCommon Send returns without error.
//
// See DescribeDirectConnectGatewaysCommon for more information on using the DescribeDirectConnectGatewaysCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewaysCommonRequest method.
//    req, resp := client.DescribeDirectConnectGatewaysCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewaysCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGatewaysCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGatewaysCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGatewaysCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewaysCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewaysCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewaysCommonWithContext is the same as DescribeDirectConnectGatewaysCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGatewaysCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewaysCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectGatewaysCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectGateways = "DescribeDirectConnectGateways"

// DescribeDirectConnectGatewaysRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectGateways operation. The "output" return
// value will be populated with the DescribeDirectConnectGatewaysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectGatewaysCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectGatewaysCommon Send returns without error.
//
// See DescribeDirectConnectGateways for more information on using the DescribeDirectConnectGateways
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectGatewaysRequest method.
//    req, resp := client.DescribeDirectConnectGatewaysRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectGatewaysRequest(input *DescribeDirectConnectGatewaysInput) (req *request.Request, output *DescribeDirectConnectGatewaysOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectGateways,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectGatewaysInput{}
	}

	output = &DescribeDirectConnectGatewaysOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectGateways API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectGateways for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectGateways(input *DescribeDirectConnectGatewaysInput) (*DescribeDirectConnectGatewaysOutput, error) {
	req, out := c.DescribeDirectConnectGatewaysRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectGatewaysWithContext is the same as DescribeDirectConnectGateways with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectGateways for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectGatewaysWithContext(ctx volcstack.Context, input *DescribeDirectConnectGatewaysInput, opts ...request.Option) (*DescribeDirectConnectGatewaysOutput, error) {
	req, out := c.DescribeDirectConnectGatewaysRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectVirtualInterfaceAttributesCommon = "DescribeDirectConnectVirtualInterfaceAttributes"

// DescribeDirectConnectVirtualInterfaceAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectVirtualInterfaceAttributesCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectVirtualInterfaceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectVirtualInterfaceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectVirtualInterfaceAttributesCommon Send returns without error.
//
// See DescribeDirectConnectVirtualInterfaceAttributesCommon for more information on using the DescribeDirectConnectVirtualInterfaceAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectVirtualInterfaceAttributesCommonRequest method.
//    req, resp := client.DescribeDirectConnectVirtualInterfaceAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfaceAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectVirtualInterfaceAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectVirtualInterfaceAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectVirtualInterfaceAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfaceAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectVirtualInterfaceAttributesCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectVirtualInterfaceAttributesCommonWithContext is the same as DescribeDirectConnectVirtualInterfaceAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectVirtualInterfaceAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfaceAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectVirtualInterfaceAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectVirtualInterfaceAttributes = "DescribeDirectConnectVirtualInterfaceAttributes"

// DescribeDirectConnectVirtualInterfaceAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectVirtualInterfaceAttributes operation. The "output" return
// value will be populated with the DescribeDirectConnectVirtualInterfaceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectVirtualInterfaceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectVirtualInterfaceAttributesCommon Send returns without error.
//
// See DescribeDirectConnectVirtualInterfaceAttributes for more information on using the DescribeDirectConnectVirtualInterfaceAttributes
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectVirtualInterfaceAttributesRequest method.
//    req, resp := client.DescribeDirectConnectVirtualInterfaceAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfaceAttributesRequest(input *DescribeDirectConnectVirtualInterfaceAttributesInput) (req *request.Request, output *DescribeDirectConnectVirtualInterfaceAttributesOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectVirtualInterfaceAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectVirtualInterfaceAttributesInput{}
	}

	output = &DescribeDirectConnectVirtualInterfaceAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectVirtualInterfaceAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectVirtualInterfaceAttributes for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfaceAttributes(input *DescribeDirectConnectVirtualInterfaceAttributesInput) (*DescribeDirectConnectVirtualInterfaceAttributesOutput, error) {
	req, out := c.DescribeDirectConnectVirtualInterfaceAttributesRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectVirtualInterfaceAttributesWithContext is the same as DescribeDirectConnectVirtualInterfaceAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectVirtualInterfaceAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfaceAttributesWithContext(ctx volcstack.Context, input *DescribeDirectConnectVirtualInterfaceAttributesInput, opts ...request.Option) (*DescribeDirectConnectVirtualInterfaceAttributesOutput, error) {
	req, out := c.DescribeDirectConnectVirtualInterfaceAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectVirtualInterfacesCommon = "DescribeDirectConnectVirtualInterfaces"

// DescribeDirectConnectVirtualInterfacesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectVirtualInterfacesCommon operation. The "output" return
// value will be populated with the DescribeDirectConnectVirtualInterfacesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectVirtualInterfacesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectVirtualInterfacesCommon Send returns without error.
//
// See DescribeDirectConnectVirtualInterfacesCommon for more information on using the DescribeDirectConnectVirtualInterfacesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectVirtualInterfacesCommonRequest method.
//    req, resp := client.DescribeDirectConnectVirtualInterfacesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfacesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectVirtualInterfacesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectVirtualInterfacesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectVirtualInterfacesCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfacesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectVirtualInterfacesCommonRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectVirtualInterfacesCommonWithContext is the same as DescribeDirectConnectVirtualInterfacesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectVirtualInterfacesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfacesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDirectConnectVirtualInterfacesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDirectConnectVirtualInterfaces = "DescribeDirectConnectVirtualInterfaces"

// DescribeDirectConnectVirtualInterfacesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDirectConnectVirtualInterfaces operation. The "output" return
// value will be populated with the DescribeDirectConnectVirtualInterfacesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeDirectConnectVirtualInterfacesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeDirectConnectVirtualInterfacesCommon Send returns without error.
//
// See DescribeDirectConnectVirtualInterfaces for more information on using the DescribeDirectConnectVirtualInterfaces
// API call, and error handling.
//
//    // Example sending a request using the DescribeDirectConnectVirtualInterfacesRequest method.
//    req, resp := client.DescribeDirectConnectVirtualInterfacesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfacesRequest(input *DescribeDirectConnectVirtualInterfacesInput) (req *request.Request, output *DescribeDirectConnectVirtualInterfacesOutput) {
	op := &request.Operation{
		Name:       opDescribeDirectConnectVirtualInterfaces,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDirectConnectVirtualInterfacesInput{}
	}

	output = &DescribeDirectConnectVirtualInterfacesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDirectConnectVirtualInterfaces API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeDirectConnectVirtualInterfaces for usage and error information.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfaces(input *DescribeDirectConnectVirtualInterfacesInput) (*DescribeDirectConnectVirtualInterfacesOutput, error) {
	req, out := c.DescribeDirectConnectVirtualInterfacesRequest(input)
	return out, req.Send()
}

// DescribeDirectConnectVirtualInterfacesWithContext is the same as DescribeDirectConnectVirtualInterfaces with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDirectConnectVirtualInterfaces for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeDirectConnectVirtualInterfacesWithContext(ctx volcstack.Context, input *DescribeDirectConnectVirtualInterfacesInput, opts ...request.Option) (*DescribeDirectConnectVirtualInterfacesOutput, error) {
	req, out := c.DescribeDirectConnectVirtualInterfacesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSharedDirectConnectConnectionsCommon = "DescribeSharedDirectConnectConnections"

// DescribeSharedDirectConnectConnectionsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSharedDirectConnectConnectionsCommon operation. The "output" return
// value will be populated with the DescribeSharedDirectConnectConnectionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSharedDirectConnectConnectionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSharedDirectConnectConnectionsCommon Send returns without error.
//
// See DescribeSharedDirectConnectConnectionsCommon for more information on using the DescribeSharedDirectConnectConnectionsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeSharedDirectConnectConnectionsCommonRequest method.
//    req, resp := client.DescribeSharedDirectConnectConnectionsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeSharedDirectConnectConnectionsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeSharedDirectConnectConnectionsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSharedDirectConnectConnectionsCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeSharedDirectConnectConnectionsCommon for usage and error information.
func (c *DIRECTCONNECT) DescribeSharedDirectConnectConnectionsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeSharedDirectConnectConnectionsCommonRequest(input)
	return out, req.Send()
}

// DescribeSharedDirectConnectConnectionsCommonWithContext is the same as DescribeSharedDirectConnectConnectionsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSharedDirectConnectConnectionsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeSharedDirectConnectConnectionsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeSharedDirectConnectConnectionsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeSharedDirectConnectConnections = "DescribeSharedDirectConnectConnections"

// DescribeSharedDirectConnectConnectionsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeSharedDirectConnectConnections operation. The "output" return
// value will be populated with the DescribeSharedDirectConnectConnectionsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeSharedDirectConnectConnectionsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeSharedDirectConnectConnectionsCommon Send returns without error.
//
// See DescribeSharedDirectConnectConnections for more information on using the DescribeSharedDirectConnectConnections
// API call, and error handling.
//
//    // Example sending a request using the DescribeSharedDirectConnectConnectionsRequest method.
//    req, resp := client.DescribeSharedDirectConnectConnectionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DescribeSharedDirectConnectConnectionsRequest(input *DescribeSharedDirectConnectConnectionsInput) (req *request.Request, output *DescribeSharedDirectConnectConnectionsOutput) {
	op := &request.Operation{
		Name:       opDescribeSharedDirectConnectConnections,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeSharedDirectConnectConnectionsInput{}
	}

	output = &DescribeSharedDirectConnectConnectionsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeSharedDirectConnectConnections API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DescribeSharedDirectConnectConnections for usage and error information.
func (c *DIRECTCONNECT) DescribeSharedDirectConnectConnections(input *DescribeSharedDirectConnectConnectionsInput) (*DescribeSharedDirectConnectConnectionsOutput, error) {
	req, out := c.DescribeSharedDirectConnectConnectionsRequest(input)
	return out, req.Send()
}

// DescribeSharedDirectConnectConnectionsWithContext is the same as DescribeSharedDirectConnectConnections with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeSharedDirectConnectConnections for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DescribeSharedDirectConnectConnectionsWithContext(ctx volcstack.Context, input *DescribeSharedDirectConnectConnectionsInput, opts ...request.Option) (*DescribeSharedDirectConnectConnectionsOutput, error) {
	req, out := c.DescribeSharedDirectConnectConnectionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyBgpPeerAttributesCommon = "ModifyBgpPeerAttributes"

// ModifyBgpPeerAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyBgpPeerAttributesCommon operation. The "output" return
// value will be populated with the ModifyBgpPeerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBgpPeerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBgpPeerAttributesCommon Send returns without error.
//
// See ModifyBgpPeerAttributesCommon for more information on using the ModifyBgpPeerAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyBgpPeerAttributesCommonRequest method.
//    req, resp := client.ModifyBgpPeerAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyBgpPeerAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyBgpPeerAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyBgpPeerAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyBgpPeerAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) ModifyBgpPeerAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyBgpPeerAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyBgpPeerAttributesCommonWithContext is the same as ModifyBgpPeerAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBgpPeerAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyBgpPeerAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyBgpPeerAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyBgpPeerAttributes = "ModifyBgpPeerAttributes"

// ModifyBgpPeerAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyBgpPeerAttributes operation. The "output" return
// value will be populated with the ModifyBgpPeerAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyBgpPeerAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyBgpPeerAttributesCommon Send returns without error.
//
// See ModifyBgpPeerAttributes for more information on using the ModifyBgpPeerAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyBgpPeerAttributesRequest method.
//    req, resp := client.ModifyBgpPeerAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyBgpPeerAttributesRequest(input *ModifyBgpPeerAttributesInput) (req *request.Request, output *ModifyBgpPeerAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyBgpPeerAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyBgpPeerAttributesInput{}
	}

	output = &ModifyBgpPeerAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyBgpPeerAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyBgpPeerAttributes for usage and error information.
func (c *DIRECTCONNECT) ModifyBgpPeerAttributes(input *ModifyBgpPeerAttributesInput) (*ModifyBgpPeerAttributesOutput, error) {
	req, out := c.ModifyBgpPeerAttributesRequest(input)
	return out, req.Send()
}

// ModifyBgpPeerAttributesWithContext is the same as ModifyBgpPeerAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyBgpPeerAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyBgpPeerAttributesWithContext(ctx volcstack.Context, input *ModifyBgpPeerAttributesInput, opts ...request.Option) (*ModifyBgpPeerAttributesOutput, error) {
	req, out := c.ModifyBgpPeerAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDirectConnectConnectionAttributesCommon = "ModifyDirectConnectConnectionAttributes"

// ModifyDirectConnectConnectionAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDirectConnectConnectionAttributesCommon operation. The "output" return
// value will be populated with the ModifyDirectConnectConnectionAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDirectConnectConnectionAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDirectConnectConnectionAttributesCommon Send returns without error.
//
// See ModifyDirectConnectConnectionAttributesCommon for more information on using the ModifyDirectConnectConnectionAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDirectConnectConnectionAttributesCommonRequest method.
//    req, resp := client.ModifyDirectConnectConnectionAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyDirectConnectConnectionAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDirectConnectConnectionAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyDirectConnectConnectionAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyDirectConnectConnectionAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) ModifyDirectConnectConnectionAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDirectConnectConnectionAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyDirectConnectConnectionAttributesCommonWithContext is the same as ModifyDirectConnectConnectionAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDirectConnectConnectionAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyDirectConnectConnectionAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDirectConnectConnectionAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDirectConnectConnectionAttributes = "ModifyDirectConnectConnectionAttributes"

// ModifyDirectConnectConnectionAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDirectConnectConnectionAttributes operation. The "output" return
// value will be populated with the ModifyDirectConnectConnectionAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDirectConnectConnectionAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDirectConnectConnectionAttributesCommon Send returns without error.
//
// See ModifyDirectConnectConnectionAttributes for more information on using the ModifyDirectConnectConnectionAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyDirectConnectConnectionAttributesRequest method.
//    req, resp := client.ModifyDirectConnectConnectionAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyDirectConnectConnectionAttributesRequest(input *ModifyDirectConnectConnectionAttributesInput) (req *request.Request, output *ModifyDirectConnectConnectionAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyDirectConnectConnectionAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDirectConnectConnectionAttributesInput{}
	}

	output = &ModifyDirectConnectConnectionAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyDirectConnectConnectionAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyDirectConnectConnectionAttributes for usage and error information.
func (c *DIRECTCONNECT) ModifyDirectConnectConnectionAttributes(input *ModifyDirectConnectConnectionAttributesInput) (*ModifyDirectConnectConnectionAttributesOutput, error) {
	req, out := c.ModifyDirectConnectConnectionAttributesRequest(input)
	return out, req.Send()
}

// ModifyDirectConnectConnectionAttributesWithContext is the same as ModifyDirectConnectConnectionAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDirectConnectConnectionAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyDirectConnectConnectionAttributesWithContext(ctx volcstack.Context, input *ModifyDirectConnectConnectionAttributesInput, opts ...request.Option) (*ModifyDirectConnectConnectionAttributesOutput, error) {
	req, out := c.ModifyDirectConnectConnectionAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDirectConnectGatewayAttributesCommon = "ModifyDirectConnectGatewayAttributes"

// ModifyDirectConnectGatewayAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDirectConnectGatewayAttributesCommon operation. The "output" return
// value will be populated with the ModifyDirectConnectGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDirectConnectGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDirectConnectGatewayAttributesCommon Send returns without error.
//
// See ModifyDirectConnectGatewayAttributesCommon for more information on using the ModifyDirectConnectGatewayAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDirectConnectGatewayAttributesCommonRequest method.
//    req, resp := client.ModifyDirectConnectGatewayAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyDirectConnectGatewayAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDirectConnectGatewayAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyDirectConnectGatewayAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyDirectConnectGatewayAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) ModifyDirectConnectGatewayAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDirectConnectGatewayAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyDirectConnectGatewayAttributesCommonWithContext is the same as ModifyDirectConnectGatewayAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDirectConnectGatewayAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyDirectConnectGatewayAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDirectConnectGatewayAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDirectConnectGatewayAttributes = "ModifyDirectConnectGatewayAttributes"

// ModifyDirectConnectGatewayAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDirectConnectGatewayAttributes operation. The "output" return
// value will be populated with the ModifyDirectConnectGatewayAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDirectConnectGatewayAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDirectConnectGatewayAttributesCommon Send returns without error.
//
// See ModifyDirectConnectGatewayAttributes for more information on using the ModifyDirectConnectGatewayAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyDirectConnectGatewayAttributesRequest method.
//    req, resp := client.ModifyDirectConnectGatewayAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyDirectConnectGatewayAttributesRequest(input *ModifyDirectConnectGatewayAttributesInput) (req *request.Request, output *ModifyDirectConnectGatewayAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyDirectConnectGatewayAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDirectConnectGatewayAttributesInput{}
	}

	output = &ModifyDirectConnectGatewayAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyDirectConnectGatewayAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyDirectConnectGatewayAttributes for usage and error information.
func (c *DIRECTCONNECT) ModifyDirectConnectGatewayAttributes(input *ModifyDirectConnectGatewayAttributesInput) (*ModifyDirectConnectGatewayAttributesOutput, error) {
	req, out := c.ModifyDirectConnectGatewayAttributesRequest(input)
	return out, req.Send()
}

// ModifyDirectConnectGatewayAttributesWithContext is the same as ModifyDirectConnectGatewayAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDirectConnectGatewayAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyDirectConnectGatewayAttributesWithContext(ctx volcstack.Context, input *ModifyDirectConnectGatewayAttributesInput, opts ...request.Option) (*ModifyDirectConnectGatewayAttributesOutput, error) {
	req, out := c.ModifyDirectConnectGatewayAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDirectConnectVirtualInterfaceAttributesCommon = "ModifyDirectConnectVirtualInterfaceAttributes"

// ModifyDirectConnectVirtualInterfaceAttributesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDirectConnectVirtualInterfaceAttributesCommon operation. The "output" return
// value will be populated with the ModifyDirectConnectVirtualInterfaceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDirectConnectVirtualInterfaceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDirectConnectVirtualInterfaceAttributesCommon Send returns without error.
//
// See ModifyDirectConnectVirtualInterfaceAttributesCommon for more information on using the ModifyDirectConnectVirtualInterfaceAttributesCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDirectConnectVirtualInterfaceAttributesCommonRequest method.
//    req, resp := client.ModifyDirectConnectVirtualInterfaceAttributesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyDirectConnectVirtualInterfaceAttributesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDirectConnectVirtualInterfaceAttributesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyDirectConnectVirtualInterfaceAttributesCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyDirectConnectVirtualInterfaceAttributesCommon for usage and error information.
func (c *DIRECTCONNECT) ModifyDirectConnectVirtualInterfaceAttributesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDirectConnectVirtualInterfaceAttributesCommonRequest(input)
	return out, req.Send()
}

// ModifyDirectConnectVirtualInterfaceAttributesCommonWithContext is the same as ModifyDirectConnectVirtualInterfaceAttributesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDirectConnectVirtualInterfaceAttributesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyDirectConnectVirtualInterfaceAttributesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDirectConnectVirtualInterfaceAttributesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDirectConnectVirtualInterfaceAttributes = "ModifyDirectConnectVirtualInterfaceAttributes"

// ModifyDirectConnectVirtualInterfaceAttributesRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDirectConnectVirtualInterfaceAttributes operation. The "output" return
// value will be populated with the ModifyDirectConnectVirtualInterfaceAttributesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDirectConnectVirtualInterfaceAttributesCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDirectConnectVirtualInterfaceAttributesCommon Send returns without error.
//
// See ModifyDirectConnectVirtualInterfaceAttributes for more information on using the ModifyDirectConnectVirtualInterfaceAttributes
// API call, and error handling.
//
//    // Example sending a request using the ModifyDirectConnectVirtualInterfaceAttributesRequest method.
//    req, resp := client.ModifyDirectConnectVirtualInterfaceAttributesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) ModifyDirectConnectVirtualInterfaceAttributesRequest(input *ModifyDirectConnectVirtualInterfaceAttributesInput) (req *request.Request, output *ModifyDirectConnectVirtualInterfaceAttributesOutput) {
	op := &request.Operation{
		Name:       opModifyDirectConnectVirtualInterfaceAttributes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDirectConnectVirtualInterfaceAttributesInput{}
	}

	output = &ModifyDirectConnectVirtualInterfaceAttributesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyDirectConnectVirtualInterfaceAttributes API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation ModifyDirectConnectVirtualInterfaceAttributes for usage and error information.
func (c *DIRECTCONNECT) ModifyDirectConnectVirtualInterfaceAttributes(input *ModifyDirectConnectVirtualInterfaceAttributesInput) (*ModifyDirectConnectVirtualInterfaceAttributesOutput, error) {
	req, out := c.ModifyDirectConnectVirtualInterfaceAttributesRequest(input)
	return out, req.Send()
}

// ModifyDirectConnectVirtualInterfaceAttributesWithContext is the same as ModifyDirectConnectVirtualInterfaceAttributes with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDirectConnectVirtualInterfaceAttributes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) ModifyDirectConnectVirtualInterfaceAttributesWithContext(ctx volcstack.Context, input *ModifyDirectConnectVirtualInterfaceAttributesInput, opts ...request.Option) (*ModifyDirectConnectVirtualInterfaceAttributesOutput, error) {
	req, out := c.ModifyDirectConnectVirtualInterfaceAttributesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AssociateCenForDescribeDirectConnectGatewayAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	CenId *string `type:"string"`

	CenOwnerId *string `type:"string"`

	CenStatus *string `type:"string"`
}

// String returns the string representation
func (s AssociateCenForDescribeDirectConnectGatewayAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateCenForDescribeDirectConnectGatewayAttributesOutput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *AssociateCenForDescribeDirectConnectGatewayAttributesOutput) SetCenId(v string) *AssociateCenForDescribeDirectConnectGatewayAttributesOutput {
	s.CenId = &v
	return s
}

// SetCenOwnerId sets the CenOwnerId field's value.
func (s *AssociateCenForDescribeDirectConnectGatewayAttributesOutput) SetCenOwnerId(v string) *AssociateCenForDescribeDirectConnectGatewayAttributesOutput {
	s.CenOwnerId = &v
	return s
}

// SetCenStatus sets the CenStatus field's value.
func (s *AssociateCenForDescribeDirectConnectGatewayAttributesOutput) SetCenStatus(v string) *AssociateCenForDescribeDirectConnectGatewayAttributesOutput {
	s.CenStatus = &v
	return s
}

type AssociateCenForDescribeDirectConnectGatewaysOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	CenId *string `type:"string"`

	CenOwnerId *string `type:"string"`

	CenStatus *string `type:"string"`
}

// String returns the string representation
func (s AssociateCenForDescribeDirectConnectGatewaysOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AssociateCenForDescribeDirectConnectGatewaysOutput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *AssociateCenForDescribeDirectConnectGatewaysOutput) SetCenId(v string) *AssociateCenForDescribeDirectConnectGatewaysOutput {
	s.CenId = &v
	return s
}

// SetCenOwnerId sets the CenOwnerId field's value.
func (s *AssociateCenForDescribeDirectConnectGatewaysOutput) SetCenOwnerId(v string) *AssociateCenForDescribeDirectConnectGatewaysOutput {
	s.CenOwnerId = &v
	return s
}

// SetCenStatus sets the CenStatus field's value.
func (s *AssociateCenForDescribeDirectConnectGatewaysOutput) SetCenStatus(v string) *AssociateCenForDescribeDirectConnectGatewaysOutput {
	s.CenStatus = &v
	return s
}

type BgpPeerForDescribeBgpPeersOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	AuthKey *string `type:"string"`

	BgpPeerId *string `type:"string"`

	BgpPeerName *string `type:"string"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	RemoteAsn *int64 `type:"integer"`

	SessionStatus *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	VirtualInterfaceId *string `type:"string"`
}

// String returns the string representation
func (s BgpPeerForDescribeBgpPeersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BgpPeerForDescribeBgpPeersOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetAccountId(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.AccountId = &v
	return s
}

// SetAuthKey sets the AuthKey field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetAuthKey(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.AuthKey = &v
	return s
}

// SetBgpPeerId sets the BgpPeerId field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetBgpPeerId(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.BgpPeerId = &v
	return s
}

// SetBgpPeerName sets the BgpPeerName field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetBgpPeerName(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.BgpPeerName = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetCreationTime(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetDescription(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.Description = &v
	return s
}

// SetRemoteAsn sets the RemoteAsn field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetRemoteAsn(v int64) *BgpPeerForDescribeBgpPeersOutput {
	s.RemoteAsn = &v
	return s
}

// SetSessionStatus sets the SessionStatus field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetSessionStatus(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.SessionStatus = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetStatus(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetUpdateTime(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.UpdateTime = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *BgpPeerForDescribeBgpPeersOutput) SetVirtualInterfaceId(v string) *BgpPeerForDescribeBgpPeersOutput {
	s.VirtualInterfaceId = &v
	return s
}

type ConfirmDirectConnectConnectionInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ConfirmDirectConnectConnectionInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfirmDirectConnectConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ConfirmDirectConnectConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ConfirmDirectConnectConnectionInput"}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *ConfirmDirectConnectConnectionInput) SetDirectConnectConnectionId(v string) *ConfirmDirectConnectConnectionInput {
	s.DirectConnectConnectionId = &v
	return s
}

type ConfirmDirectConnectConnectionOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ConfirmDirectConnectConnectionOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ConfirmDirectConnectConnectionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ConfirmDirectConnectConnectionOutput) SetRequestId(v string) *ConfirmDirectConnectConnectionOutput {
	s.RequestId = &v
	return s
}

type CreateBgpPeerInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// AuthKey is a required field
	AuthKey *string `type:"string" required:"true"`

	BgpPeerName *string `min:"1" max:"128" type:"string"`

	Description *string `min:"1" max:"255" type:"string"`

	// RemoteAsn is a required field
	RemoteAsn *int64 `type:"integer" required:"true"`

	// VirtualInterfaceId is a required field
	VirtualInterfaceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateBgpPeerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBgpPeerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateBgpPeerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateBgpPeerInput"}
	if s.AuthKey == nil {
		invalidParams.Add(request.NewErrParamRequired("AuthKey"))
	}
	if s.BgpPeerName != nil && len(*s.BgpPeerName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("BgpPeerName", 1))
	}
	if s.BgpPeerName != nil && len(*s.BgpPeerName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("BgpPeerName", 128, *s.BgpPeerName))
	}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.RemoteAsn == nil {
		invalidParams.Add(request.NewErrParamRequired("RemoteAsn"))
	}
	if s.VirtualInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VirtualInterfaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAuthKey sets the AuthKey field's value.
func (s *CreateBgpPeerInput) SetAuthKey(v string) *CreateBgpPeerInput {
	s.AuthKey = &v
	return s
}

// SetBgpPeerName sets the BgpPeerName field's value.
func (s *CreateBgpPeerInput) SetBgpPeerName(v string) *CreateBgpPeerInput {
	s.BgpPeerName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateBgpPeerInput) SetDescription(v string) *CreateBgpPeerInput {
	s.Description = &v
	return s
}

// SetRemoteAsn sets the RemoteAsn field's value.
func (s *CreateBgpPeerInput) SetRemoteAsn(v int64) *CreateBgpPeerInput {
	s.RemoteAsn = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *CreateBgpPeerInput) SetVirtualInterfaceId(v string) *CreateBgpPeerInput {
	s.VirtualInterfaceId = &v
	return s
}

type CreateBgpPeerOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	BgpPeerId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateBgpPeerOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBgpPeerOutput) GoString() string {
	return s.String()
}

// SetBgpPeerId sets the BgpPeerId field's value.
func (s *CreateBgpPeerOutput) SetBgpPeerId(v string) *CreateBgpPeerOutput {
	s.BgpPeerId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateBgpPeerOutput) SetRequestId(v string) *CreateBgpPeerOutput {
	s.RequestId = &v
	return s
}

type CreateDirectConnectGatewayInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	Description *string `type:"string"`

	// DirectConnectGatewayName is a required field
	DirectConnectGatewayName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateDirectConnectGatewayInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDirectConnectGatewayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDirectConnectGatewayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDirectConnectGatewayInput"}
	if s.DirectConnectGatewayName == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateDirectConnectGatewayInput) SetDescription(v string) *CreateDirectConnectGatewayInput {
	s.Description = &v
	return s
}

// SetDirectConnectGatewayName sets the DirectConnectGatewayName field's value.
func (s *CreateDirectConnectGatewayInput) SetDirectConnectGatewayName(v string) *CreateDirectConnectGatewayInput {
	s.DirectConnectGatewayName = &v
	return s
}

type CreateDirectConnectGatewayOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	DirectConnectGatewayId *string `type:"string"`

	PreOrderNumber *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateDirectConnectGatewayOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDirectConnectGatewayOutput) GoString() string {
	return s.String()
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *CreateDirectConnectGatewayOutput) SetDirectConnectGatewayId(v string) *CreateDirectConnectGatewayOutput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetPreOrderNumber sets the PreOrderNumber field's value.
func (s *CreateDirectConnectGatewayOutput) SetPreOrderNumber(v string) *CreateDirectConnectGatewayOutput {
	s.PreOrderNumber = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateDirectConnectGatewayOutput) SetRequestId(v string) *CreateDirectConnectGatewayOutput {
	s.RequestId = &v
	return s
}

type CreateDirectConnectGatewayRouteInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DestinationCidrBlock is a required field
	DestinationCidrBlock *string `type:"string" required:"true"`

	// DirectConnectGatewayId is a required field
	DirectConnectGatewayId *string `type:"string" required:"true"`

	// NextHopId is a required field
	NextHopId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateDirectConnectGatewayRouteInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDirectConnectGatewayRouteInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDirectConnectGatewayRouteInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDirectConnectGatewayRouteInput"}
	if s.DestinationCidrBlock == nil {
		invalidParams.Add(request.NewErrParamRequired("DestinationCidrBlock"))
	}
	if s.DirectConnectGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayId"))
	}
	if s.NextHopId == nil {
		invalidParams.Add(request.NewErrParamRequired("NextHopId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *CreateDirectConnectGatewayRouteInput) SetDestinationCidrBlock(v string) *CreateDirectConnectGatewayRouteInput {
	s.DestinationCidrBlock = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *CreateDirectConnectGatewayRouteInput) SetDirectConnectGatewayId(v string) *CreateDirectConnectGatewayRouteInput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetNextHopId sets the NextHopId field's value.
func (s *CreateDirectConnectGatewayRouteInput) SetNextHopId(v string) *CreateDirectConnectGatewayRouteInput {
	s.NextHopId = &v
	return s
}

type CreateDirectConnectGatewayRouteOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	DirectConnectGatewayRouteId *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s CreateDirectConnectGatewayRouteOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDirectConnectGatewayRouteOutput) GoString() string {
	return s.String()
}

// SetDirectConnectGatewayRouteId sets the DirectConnectGatewayRouteId field's value.
func (s *CreateDirectConnectGatewayRouteOutput) SetDirectConnectGatewayRouteId(v string) *CreateDirectConnectGatewayRouteOutput {
	s.DirectConnectGatewayRouteId = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateDirectConnectGatewayRouteOutput) SetRequestId(v string) *CreateDirectConnectGatewayRouteOutput {
	s.RequestId = &v
	return s
}

type CreateDirectConnectVirtualInterfaceInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	Description *string `min:"1" max:"255" type:"string"`

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`

	// DirectConnectGatewayId is a required field
	DirectConnectGatewayId *string `type:"string" required:"true"`

	// LocalIp is a required field
	LocalIp *string `type:"string" required:"true"`

	// PeerIp is a required field
	PeerIp *string `type:"string" required:"true"`

	RouteType *string `type:"string" enum:"RouteTypeForCreateDirectConnectVirtualInterfaceInput"`

	VirtualInterfaceName *string `min:"1" max:"128" type:"string"`

	// VlanId is a required field
	VlanId *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s CreateDirectConnectVirtualInterfaceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDirectConnectVirtualInterfaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDirectConnectVirtualInterfaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDirectConnectVirtualInterfaceInput"}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}
	if s.DirectConnectGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayId"))
	}
	if s.LocalIp == nil {
		invalidParams.Add(request.NewErrParamRequired("LocalIp"))
	}
	if s.PeerIp == nil {
		invalidParams.Add(request.NewErrParamRequired("PeerIp"))
	}
	if s.VirtualInterfaceName != nil && len(*s.VirtualInterfaceName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("VirtualInterfaceName", 1))
	}
	if s.VirtualInterfaceName != nil && len(*s.VirtualInterfaceName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("VirtualInterfaceName", 128, *s.VirtualInterfaceName))
	}
	if s.VlanId == nil {
		invalidParams.Add(request.NewErrParamRequired("VlanId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetDescription(v string) *CreateDirectConnectVirtualInterfaceInput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetDirectConnectConnectionId(v string) *CreateDirectConnectVirtualInterfaceInput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetDirectConnectGatewayId(v string) *CreateDirectConnectVirtualInterfaceInput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetLocalIp sets the LocalIp field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetLocalIp(v string) *CreateDirectConnectVirtualInterfaceInput {
	s.LocalIp = &v
	return s
}

// SetPeerIp sets the PeerIp field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetPeerIp(v string) *CreateDirectConnectVirtualInterfaceInput {
	s.PeerIp = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetRouteType(v string) *CreateDirectConnectVirtualInterfaceInput {
	s.RouteType = &v
	return s
}

// SetVirtualInterfaceName sets the VirtualInterfaceName field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetVirtualInterfaceName(v string) *CreateDirectConnectVirtualInterfaceInput {
	s.VirtualInterfaceName = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *CreateDirectConnectVirtualInterfaceInput) SetVlanId(v int64) *CreateDirectConnectVirtualInterfaceInput {
	s.VlanId = &v
	return s
}

type CreateDirectConnectVirtualInterfaceOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	VirtualInterfaceId *string `type:"string"`
}

// String returns the string representation
func (s CreateDirectConnectVirtualInterfaceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDirectConnectVirtualInterfaceOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateDirectConnectVirtualInterfaceOutput) SetRequestId(v string) *CreateDirectConnectVirtualInterfaceOutput {
	s.RequestId = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *CreateDirectConnectVirtualInterfaceOutput) SetVirtualInterfaceId(v string) *CreateDirectConnectVirtualInterfaceOutput {
	s.VirtualInterfaceId = &v
	return s
}

type CreateSharedDirectConnectConnectionInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// Bandwidth is a required field
	Bandwidth *int64 `min:"50" max:"1000" type:"integer" required:"true"`

	Description *string `type:"string"`

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`

	SharedDirectConnectConnectionName *string `type:"string"`

	// UserAccountId is a required field
	UserAccountId *string `type:"string" required:"true"`

	// VlanId is a required field
	VlanId *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s CreateSharedDirectConnectConnectionInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSharedDirectConnectConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSharedDirectConnectConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSharedDirectConnectConnectionInput"}
	if s.Bandwidth == nil {
		invalidParams.Add(request.NewErrParamRequired("Bandwidth"))
	}
	if s.Bandwidth != nil && *s.Bandwidth < 50 {
		invalidParams.Add(request.NewErrParamMinValue("Bandwidth", 50))
	}
	if s.Bandwidth != nil && *s.Bandwidth > 1000 {
		invalidParams.Add(request.NewErrParamMaxValue("Bandwidth", 1000))
	}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}
	if s.UserAccountId == nil {
		invalidParams.Add(request.NewErrParamRequired("UserAccountId"))
	}
	if s.VlanId == nil {
		invalidParams.Add(request.NewErrParamRequired("VlanId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetBandwidth(v int64) *CreateSharedDirectConnectConnectionInput {
	s.Bandwidth = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetDescription(v string) *CreateSharedDirectConnectConnectionInput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetDirectConnectConnectionId(v string) *CreateSharedDirectConnectConnectionInput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetSharedDirectConnectConnectionName sets the SharedDirectConnectConnectionName field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetSharedDirectConnectConnectionName(v string) *CreateSharedDirectConnectConnectionInput {
	s.SharedDirectConnectConnectionName = &v
	return s
}

// SetUserAccountId sets the UserAccountId field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetUserAccountId(v string) *CreateSharedDirectConnectConnectionInput {
	s.UserAccountId = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetVlanId(v int64) *CreateSharedDirectConnectConnectionInput {
	s.VlanId = &v
	return s
}

type CreateSharedDirectConnectConnectionOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	SharedDirectConnectConnectionId *string `type:"string"`
}

// String returns the string representation
func (s CreateSharedDirectConnectConnectionOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSharedDirectConnectConnectionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateSharedDirectConnectConnectionOutput) SetRequestId(v string) *CreateSharedDirectConnectConnectionOutput {
	s.RequestId = &v
	return s
}

// SetSharedDirectConnectConnectionId sets the SharedDirectConnectConnectionId field's value.
func (s *CreateSharedDirectConnectConnectionOutput) SetSharedDirectConnectConnectionId(v string) *CreateSharedDirectConnectConnectionOutput {
	s.SharedDirectConnectConnectionId = &v
	return s
}

type DeleteBgpPeerInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// BgpPeerId is a required field
	BgpPeerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteBgpPeerInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteBgpPeerInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteBgpPeerInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteBgpPeerInput"}
	if s.BgpPeerId == nil {
		invalidParams.Add(request.NewErrParamRequired("BgpPeerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBgpPeerId sets the BgpPeerId field's value.
func (s *DeleteBgpPeerInput) SetBgpPeerId(v string) *DeleteBgpPeerInput {
	s.BgpPeerId = &v
	return s
}

type DeleteBgpPeerOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteBgpPeerOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteBgpPeerOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteBgpPeerOutput) SetRequestId(v string) *DeleteBgpPeerOutput {
	s.RequestId = &v
	return s
}

type DeleteDirectConnectConnectionInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteDirectConnectConnectionInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDirectConnectConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDirectConnectConnectionInput"}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *DeleteDirectConnectConnectionInput) SetDirectConnectConnectionId(v string) *DeleteDirectConnectConnectionInput {
	s.DirectConnectConnectionId = &v
	return s
}

type DeleteDirectConnectConnectionOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDirectConnectConnectionOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectConnectionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteDirectConnectConnectionOutput) SetRequestId(v string) *DeleteDirectConnectConnectionOutput {
	s.RequestId = &v
	return s
}

type DeleteDirectConnectGatewayInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DirectConnectGatewayId is a required field
	DirectConnectGatewayId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteDirectConnectGatewayInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectGatewayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDirectConnectGatewayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDirectConnectGatewayInput"}
	if s.DirectConnectGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DeleteDirectConnectGatewayInput) SetDirectConnectGatewayId(v string) *DeleteDirectConnectGatewayInput {
	s.DirectConnectGatewayId = &v
	return s
}

type DeleteDirectConnectGatewayOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	PreOrderNumber *string `type:"string"`

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDirectConnectGatewayOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectGatewayOutput) GoString() string {
	return s.String()
}

// SetPreOrderNumber sets the PreOrderNumber field's value.
func (s *DeleteDirectConnectGatewayOutput) SetPreOrderNumber(v string) *DeleteDirectConnectGatewayOutput {
	s.PreOrderNumber = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteDirectConnectGatewayOutput) SetRequestId(v string) *DeleteDirectConnectGatewayOutput {
	s.RequestId = &v
	return s
}

type DeleteDirectConnectGatewayRouteInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DirectConnectGatewayRouteId is a required field
	DirectConnectGatewayRouteId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteDirectConnectGatewayRouteInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectGatewayRouteInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDirectConnectGatewayRouteInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDirectConnectGatewayRouteInput"}
	if s.DirectConnectGatewayRouteId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayRouteId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectGatewayRouteId sets the DirectConnectGatewayRouteId field's value.
func (s *DeleteDirectConnectGatewayRouteInput) SetDirectConnectGatewayRouteId(v string) *DeleteDirectConnectGatewayRouteInput {
	s.DirectConnectGatewayRouteId = &v
	return s
}

type DeleteDirectConnectGatewayRouteOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDirectConnectGatewayRouteOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectGatewayRouteOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteDirectConnectGatewayRouteOutput) SetRequestId(v string) *DeleteDirectConnectGatewayRouteOutput {
	s.RequestId = &v
	return s
}

type DeleteDirectConnectVirtualInterfaceInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// VirtualInterfaceId is a required field
	VirtualInterfaceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteDirectConnectVirtualInterfaceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectVirtualInterfaceInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDirectConnectVirtualInterfaceInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDirectConnectVirtualInterfaceInput"}
	if s.VirtualInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VirtualInterfaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *DeleteDirectConnectVirtualInterfaceInput) SetVirtualInterfaceId(v string) *DeleteDirectConnectVirtualInterfaceInput {
	s.VirtualInterfaceId = &v
	return s
}

type DeleteDirectConnectVirtualInterfaceOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDirectConnectVirtualInterfaceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectVirtualInterfaceOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteDirectConnectVirtualInterfaceOutput) SetRequestId(v string) *DeleteDirectConnectVirtualInterfaceOutput {
	s.RequestId = &v
	return s
}

type DescribeBgpPeerAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// BgpPeerId is a required field
	BgpPeerId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeBgpPeerAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBgpPeerAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeBgpPeerAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeBgpPeerAttributesInput"}
	if s.BgpPeerId == nil {
		invalidParams.Add(request.NewErrParamRequired("BgpPeerId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBgpPeerId sets the BgpPeerId field's value.
func (s *DescribeBgpPeerAttributesInput) SetBgpPeerId(v string) *DescribeBgpPeerAttributesInput {
	s.BgpPeerId = &v
	return s
}

type DescribeBgpPeerAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	AuthKey *string `type:"string"`

	BgpPeerId *string `type:"string"`

	BgpPeerName *string `type:"string"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	RemoteAsn *int64 `type:"integer"`

	RequestId *string `type:"string"`

	SessionStatus *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	VirtualInterfaceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeBgpPeerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBgpPeerAttributesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeBgpPeerAttributesOutput) SetAccountId(v string) *DescribeBgpPeerAttributesOutput {
	s.AccountId = &v
	return s
}

// SetAuthKey sets the AuthKey field's value.
func (s *DescribeBgpPeerAttributesOutput) SetAuthKey(v string) *DescribeBgpPeerAttributesOutput {
	s.AuthKey = &v
	return s
}

// SetBgpPeerId sets the BgpPeerId field's value.
func (s *DescribeBgpPeerAttributesOutput) SetBgpPeerId(v string) *DescribeBgpPeerAttributesOutput {
	s.BgpPeerId = &v
	return s
}

// SetBgpPeerName sets the BgpPeerName field's value.
func (s *DescribeBgpPeerAttributesOutput) SetBgpPeerName(v string) *DescribeBgpPeerAttributesOutput {
	s.BgpPeerName = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeBgpPeerAttributesOutput) SetCreationTime(v string) *DescribeBgpPeerAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeBgpPeerAttributesOutput) SetDescription(v string) *DescribeBgpPeerAttributesOutput {
	s.Description = &v
	return s
}

// SetRemoteAsn sets the RemoteAsn field's value.
func (s *DescribeBgpPeerAttributesOutput) SetRemoteAsn(v int64) *DescribeBgpPeerAttributesOutput {
	s.RemoteAsn = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeBgpPeerAttributesOutput) SetRequestId(v string) *DescribeBgpPeerAttributesOutput {
	s.RequestId = &v
	return s
}

// SetSessionStatus sets the SessionStatus field's value.
func (s *DescribeBgpPeerAttributesOutput) SetSessionStatus(v string) *DescribeBgpPeerAttributesOutput {
	s.SessionStatus = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeBgpPeerAttributesOutput) SetStatus(v string) *DescribeBgpPeerAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeBgpPeerAttributesOutput) SetUpdateTime(v string) *DescribeBgpPeerAttributesOutput {
	s.UpdateTime = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *DescribeBgpPeerAttributesOutput) SetVirtualInterfaceId(v string) *DescribeBgpPeerAttributesOutput {
	s.VirtualInterfaceId = &v
	return s
}

type DescribeBgpPeersInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	BgpPeerIds []*string `type:"list"`

	BgpPeerName *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RemoteAsn *int64 `type:"integer"`

	VirtualInterfaceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeBgpPeersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBgpPeersInput) GoString() string {
	return s.String()
}

// SetBgpPeerIds sets the BgpPeerIds field's value.
func (s *DescribeBgpPeersInput) SetBgpPeerIds(v []*string) *DescribeBgpPeersInput {
	s.BgpPeerIds = v
	return s
}

// SetBgpPeerName sets the BgpPeerName field's value.
func (s *DescribeBgpPeersInput) SetBgpPeerName(v string) *DescribeBgpPeersInput {
	s.BgpPeerName = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DescribeBgpPeersInput) SetDirectConnectGatewayId(v string) *DescribeBgpPeersInput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeBgpPeersInput) SetPageNumber(v int64) *DescribeBgpPeersInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeBgpPeersInput) SetPageSize(v int64) *DescribeBgpPeersInput {
	s.PageSize = &v
	return s
}

// SetRemoteAsn sets the RemoteAsn field's value.
func (s *DescribeBgpPeersInput) SetRemoteAsn(v int64) *DescribeBgpPeersInput {
	s.RemoteAsn = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *DescribeBgpPeersInput) SetVirtualInterfaceId(v string) *DescribeBgpPeersInput {
	s.VirtualInterfaceId = &v
	return s
}

type DescribeBgpPeersOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	BgpPeers []*BgpPeerForDescribeBgpPeersOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeBgpPeersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBgpPeersOutput) GoString() string {
	return s.String()
}

// SetBgpPeers sets the BgpPeers field's value.
func (s *DescribeBgpPeersOutput) SetBgpPeers(v []*BgpPeerForDescribeBgpPeersOutput) *DescribeBgpPeersOutput {
	s.BgpPeers = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeBgpPeersOutput) SetPageNumber(v int64) *DescribeBgpPeersOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeBgpPeersOutput) SetPageSize(v int64) *DescribeBgpPeersOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeBgpPeersOutput) SetRequestId(v string) *DescribeBgpPeersOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeBgpPeersOutput) SetTotalCount(v int64) *DescribeBgpPeersOutput {
	s.TotalCount = &v
	return s
}

type DescribeDirectConnectConnectionAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeDirectConnectConnectionAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectConnectionAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDirectConnectConnectionAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDirectConnectConnectionAttributesInput"}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *DescribeDirectConnectConnectionAttributesInput) SetDirectConnectConnectionId(v string) *DescribeDirectConnectConnectionAttributesInput {
	s.DirectConnectConnectionId = &v
	return s
}

type DescribeDirectConnectConnectionAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccessPoint *string `type:"string"`

	AccountId *string `type:"string"`

	Bandwidth *int64 `type:"integer"`

	ConnectionType *string `type:"string"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	DirectConnectConnectionId *string `type:"string"`

	DirectConnectConnectionName *string `type:"string"`

	Operator *string `type:"string"`

	ParentConnectionAccountId *string `type:"string"`

	ParentConnectionId *string `type:"string"`

	PeerLocation *string `type:"string"`

	PortType *string `type:"string"`

	RequestId *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	VlanId *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDirectConnectConnectionAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectConnectionAttributesOutput) GoString() string {
	return s.String()
}

// SetAccessPoint sets the AccessPoint field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetAccessPoint(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.AccessPoint = &v
	return s
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetAccountId(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.AccountId = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetBandwidth(v int64) *DescribeDirectConnectConnectionAttributesOutput {
	s.Bandwidth = &v
	return s
}

// SetConnectionType sets the ConnectionType field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetConnectionType(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.ConnectionType = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetCreationTime(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetDescription(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetDirectConnectConnectionId(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetDirectConnectConnectionName sets the DirectConnectConnectionName field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetDirectConnectConnectionName(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.DirectConnectConnectionName = &v
	return s
}

// SetOperator sets the Operator field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetOperator(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.Operator = &v
	return s
}

// SetParentConnectionAccountId sets the ParentConnectionAccountId field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetParentConnectionAccountId(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.ParentConnectionAccountId = &v
	return s
}

// SetParentConnectionId sets the ParentConnectionId field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetParentConnectionId(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.ParentConnectionId = &v
	return s
}

// SetPeerLocation sets the PeerLocation field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetPeerLocation(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.PeerLocation = &v
	return s
}

// SetPortType sets the PortType field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetPortType(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.PortType = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetRequestId(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.RequestId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetStatus(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetUpdateTime(v string) *DescribeDirectConnectConnectionAttributesOutput {
	s.UpdateTime = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *DescribeDirectConnectConnectionAttributesOutput) SetVlanId(v int64) *DescribeDirectConnectConnectionAttributesOutput {
	s.VlanId = &v
	return s
}

type DescribeDirectConnectConnectionsInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccessPoint *string `type:"string"`

	DirectConnectConnectionIds []*string `type:"list"`

	DirectConnectConnectionName *string `type:"string"`

	Operator *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	PeerLocation *string `type:"string"`
}

// String returns the string representation
func (s DescribeDirectConnectConnectionsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectConnectionsInput) GoString() string {
	return s.String()
}

// SetAccessPoint sets the AccessPoint field's value.
func (s *DescribeDirectConnectConnectionsInput) SetAccessPoint(v string) *DescribeDirectConnectConnectionsInput {
	s.AccessPoint = &v
	return s
}

// SetDirectConnectConnectionIds sets the DirectConnectConnectionIds field's value.
func (s *DescribeDirectConnectConnectionsInput) SetDirectConnectConnectionIds(v []*string) *DescribeDirectConnectConnectionsInput {
	s.DirectConnectConnectionIds = v
	return s
}

// SetDirectConnectConnectionName sets the DirectConnectConnectionName field's value.
func (s *DescribeDirectConnectConnectionsInput) SetDirectConnectConnectionName(v string) *DescribeDirectConnectConnectionsInput {
	s.DirectConnectConnectionName = &v
	return s
}

// SetOperator sets the Operator field's value.
func (s *DescribeDirectConnectConnectionsInput) SetOperator(v string) *DescribeDirectConnectConnectionsInput {
	s.Operator = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectConnectionsInput) SetPageNumber(v int64) *DescribeDirectConnectConnectionsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectConnectionsInput) SetPageSize(v int64) *DescribeDirectConnectConnectionsInput {
	s.PageSize = &v
	return s
}

// SetPeerLocation sets the PeerLocation field's value.
func (s *DescribeDirectConnectConnectionsInput) SetPeerLocation(v string) *DescribeDirectConnectConnectionsInput {
	s.PeerLocation = &v
	return s
}

type DescribeDirectConnectConnectionsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	DirectConnectConnections []*DirectConnectConnectionForDescribeDirectConnectConnectionsOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDirectConnectConnectionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectConnectionsOutput) GoString() string {
	return s.String()
}

// SetDirectConnectConnections sets the DirectConnectConnections field's value.
func (s *DescribeDirectConnectConnectionsOutput) SetDirectConnectConnections(v []*DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) *DescribeDirectConnectConnectionsOutput {
	s.DirectConnectConnections = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectConnectionsOutput) SetPageNumber(v int64) *DescribeDirectConnectConnectionsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectConnectionsOutput) SetPageSize(v int64) *DescribeDirectConnectConnectionsOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectConnectionsOutput) SetRequestId(v string) *DescribeDirectConnectConnectionsOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeDirectConnectConnectionsOutput) SetTotalCount(v int64) *DescribeDirectConnectConnectionsOutput {
	s.TotalCount = &v
	return s
}

type DescribeDirectConnectGatewayAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DirectConnectGatewayId is a required field
	DirectConnectGatewayId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewayAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewayAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDirectConnectGatewayAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDirectConnectGatewayAttributesInput"}
	if s.DirectConnectGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DescribeDirectConnectGatewayAttributesInput) SetDirectConnectGatewayId(v string) *DescribeDirectConnectGatewayAttributesInput {
	s.DirectConnectGatewayId = &v
	return s
}

type DescribeDirectConnectGatewayAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	AssociateCens []*AssociateCenForDescribeDirectConnectGatewayAttributesOutput `type:"list"`

	BusinessStatus *string `type:"string"`

	CreationTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	DirectConnectGatewayName *string `type:"string"`

	LockReason *string `type:"string"`

	OverdueTime *string `type:"string"`

	RequestId *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewayAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewayAttributesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetAccountId(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.AccountId = &v
	return s
}

// SetAssociateCens sets the AssociateCens field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetAssociateCens(v []*AssociateCenForDescribeDirectConnectGatewayAttributesOutput) *DescribeDirectConnectGatewayAttributesOutput {
	s.AssociateCens = v
	return s
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetBusinessStatus(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.BusinessStatus = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetCreationTime(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetDeletedTime(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetDescription(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.Description = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetDirectConnectGatewayId(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetDirectConnectGatewayName sets the DirectConnectGatewayName field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetDirectConnectGatewayName(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.DirectConnectGatewayName = &v
	return s
}

// SetLockReason sets the LockReason field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetLockReason(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.LockReason = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetOverdueTime(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.OverdueTime = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetRequestId(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.RequestId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetStatus(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeDirectConnectGatewayAttributesOutput) SetUpdateTime(v string) *DescribeDirectConnectGatewayAttributesOutput {
	s.UpdateTime = &v
	return s
}

type DescribeDirectConnectGatewayRouteAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// DirectConnectGatewayRouteId is a required field
	DirectConnectGatewayRouteId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewayRouteAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewayRouteAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDirectConnectGatewayRouteAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDirectConnectGatewayRouteAttributesInput"}
	if s.DirectConnectGatewayRouteId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayRouteId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectGatewayRouteId sets the DirectConnectGatewayRouteId field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesInput) SetDirectConnectGatewayRouteId(v string) *DescribeDirectConnectGatewayRouteAttributesInput {
	s.DirectConnectGatewayRouteId = &v
	return s
}

type DescribeDirectConnectGatewayRouteAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	CreationTime *string `type:"string"`

	DestinationCidrBlock *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	DirectConnectGatewayRouteId *string `type:"string"`

	NextHopId *string `type:"string"`

	NextHopType *string `type:"string"`

	RequestId *string `type:"string"`

	RouteType *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewayRouteAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewayRouteAttributesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetAccountId(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.AccountId = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetCreationTime(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetDestinationCidrBlock(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.DestinationCidrBlock = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetDirectConnectGatewayId(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetDirectConnectGatewayRouteId sets the DirectConnectGatewayRouteId field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetDirectConnectGatewayRouteId(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.DirectConnectGatewayRouteId = &v
	return s
}

// SetNextHopId sets the NextHopId field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetNextHopId(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.NextHopId = &v
	return s
}

// SetNextHopType sets the NextHopType field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetNextHopType(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.NextHopType = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetRequestId(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.RequestId = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetRouteType(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.RouteType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeDirectConnectGatewayRouteAttributesOutput) SetStatus(v string) *DescribeDirectConnectGatewayRouteAttributesOutput {
	s.Status = &v
	return s
}

type DescribeDirectConnectGatewayRoutesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	DestinationCidrBlock *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	DirectConnectGatewayRouteIds []*string `type:"list"`

	NextHopId *string `type:"string"`

	NextHopType *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RouteType *string `type:"string"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewayRoutesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewayRoutesInput) GoString() string {
	return s.String()
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetDestinationCidrBlock(v string) *DescribeDirectConnectGatewayRoutesInput {
	s.DestinationCidrBlock = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetDirectConnectGatewayId(v string) *DescribeDirectConnectGatewayRoutesInput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetDirectConnectGatewayRouteIds sets the DirectConnectGatewayRouteIds field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetDirectConnectGatewayRouteIds(v []*string) *DescribeDirectConnectGatewayRoutesInput {
	s.DirectConnectGatewayRouteIds = v
	return s
}

// SetNextHopId sets the NextHopId field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetNextHopId(v string) *DescribeDirectConnectGatewayRoutesInput {
	s.NextHopId = &v
	return s
}

// SetNextHopType sets the NextHopType field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetNextHopType(v string) *DescribeDirectConnectGatewayRoutesInput {
	s.NextHopType = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetPageNumber(v int64) *DescribeDirectConnectGatewayRoutesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetPageSize(v int64) *DescribeDirectConnectGatewayRoutesInput {
	s.PageSize = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *DescribeDirectConnectGatewayRoutesInput) SetRouteType(v string) *DescribeDirectConnectGatewayRoutesInput {
	s.RouteType = &v
	return s
}

type DescribeDirectConnectGatewayRoutesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	DirectConnectGatewayRoutes []*DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewayRoutesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewayRoutesOutput) GoString() string {
	return s.String()
}

// SetDirectConnectGatewayRoutes sets the DirectConnectGatewayRoutes field's value.
func (s *DescribeDirectConnectGatewayRoutesOutput) SetDirectConnectGatewayRoutes(v []*DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) *DescribeDirectConnectGatewayRoutesOutput {
	s.DirectConnectGatewayRoutes = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectGatewayRoutesOutput) SetPageNumber(v int64) *DescribeDirectConnectGatewayRoutesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectGatewayRoutesOutput) SetPageSize(v int64) *DescribeDirectConnectGatewayRoutesOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectGatewayRoutesOutput) SetRequestId(v string) *DescribeDirectConnectGatewayRoutesOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeDirectConnectGatewayRoutesOutput) SetTotalCount(v int64) *DescribeDirectConnectGatewayRoutesOutput {
	s.TotalCount = &v
	return s
}

type DescribeDirectConnectGatewaysInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	CenId *string `type:"string"`

	DirectConnectGatewayIds []*string `type:"list"`

	DirectConnectGatewayName *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewaysInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewaysInput) GoString() string {
	return s.String()
}

// SetCenId sets the CenId field's value.
func (s *DescribeDirectConnectGatewaysInput) SetCenId(v string) *DescribeDirectConnectGatewaysInput {
	s.CenId = &v
	return s
}

// SetDirectConnectGatewayIds sets the DirectConnectGatewayIds field's value.
func (s *DescribeDirectConnectGatewaysInput) SetDirectConnectGatewayIds(v []*string) *DescribeDirectConnectGatewaysInput {
	s.DirectConnectGatewayIds = v
	return s
}

// SetDirectConnectGatewayName sets the DirectConnectGatewayName field's value.
func (s *DescribeDirectConnectGatewaysInput) SetDirectConnectGatewayName(v string) *DescribeDirectConnectGatewaysInput {
	s.DirectConnectGatewayName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectGatewaysInput) SetPageNumber(v int64) *DescribeDirectConnectGatewaysInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectGatewaysInput) SetPageSize(v int64) *DescribeDirectConnectGatewaysInput {
	s.PageSize = &v
	return s
}

type DescribeDirectConnectGatewaysOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	DirectConnectGateways []*DirectConnectGatewayForDescribeDirectConnectGatewaysOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDirectConnectGatewaysOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectGatewaysOutput) GoString() string {
	return s.String()
}

// SetDirectConnectGateways sets the DirectConnectGateways field's value.
func (s *DescribeDirectConnectGatewaysOutput) SetDirectConnectGateways(v []*DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) *DescribeDirectConnectGatewaysOutput {
	s.DirectConnectGateways = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectGatewaysOutput) SetPageNumber(v int64) *DescribeDirectConnectGatewaysOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectGatewaysOutput) SetPageSize(v int64) *DescribeDirectConnectGatewaysOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectGatewaysOutput) SetRequestId(v string) *DescribeDirectConnectGatewaysOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeDirectConnectGatewaysOutput) SetTotalCount(v int64) *DescribeDirectConnectGatewaysOutput {
	s.TotalCount = &v
	return s
}

type DescribeDirectConnectVirtualInterfaceAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// VirtualInterfaceId is a required field
	VirtualInterfaceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeDirectConnectVirtualInterfaceAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectVirtualInterfaceAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeDirectConnectVirtualInterfaceAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeDirectConnectVirtualInterfaceAttributesInput"}
	if s.VirtualInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VirtualInterfaceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesInput) SetVirtualInterfaceId(v string) *DescribeDirectConnectVirtualInterfaceAttributesInput {
	s.VirtualInterfaceId = &v
	return s
}

type DescribeDirectConnectVirtualInterfaceAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	Bandwidth *int64 `type:"integer"`

	BfdDetectInterval *int64 `type:"integer"`

	BfdDetectMultiplier *int64 `type:"integer"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	DirectConnectConnectionId *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	EnableBfd *bool `type:"boolean"`

	LocalIp *string `type:"string"`

	PeerIp *string `type:"string"`

	RequestId *string `type:"string"`

	RouteType *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	VirtualInterfaceId *string `type:"string"`

	VirtualInterfaceName *string `type:"string"`

	VlanId *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDirectConnectVirtualInterfaceAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectVirtualInterfaceAttributesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetAccountId(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.AccountId = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetBandwidth(v int64) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.Bandwidth = &v
	return s
}

// SetBfdDetectInterval sets the BfdDetectInterval field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetBfdDetectInterval(v int64) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.BfdDetectInterval = &v
	return s
}

// SetBfdDetectMultiplier sets the BfdDetectMultiplier field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetBfdDetectMultiplier(v int64) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.BfdDetectMultiplier = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetCreationTime(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetDescription(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetDirectConnectConnectionId(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetDirectConnectGatewayId(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetEnableBfd sets the EnableBfd field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetEnableBfd(v bool) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.EnableBfd = &v
	return s
}

// SetLocalIp sets the LocalIp field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetLocalIp(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.LocalIp = &v
	return s
}

// SetPeerIp sets the PeerIp field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetPeerIp(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.PeerIp = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetRequestId(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.RequestId = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetRouteType(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.RouteType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetStatus(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetUpdateTime(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.UpdateTime = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetVirtualInterfaceId(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.VirtualInterfaceId = &v
	return s
}

// SetVirtualInterfaceName sets the VirtualInterfaceName field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetVirtualInterfaceName(v string) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.VirtualInterfaceName = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *DescribeDirectConnectVirtualInterfaceAttributesOutput) SetVlanId(v int64) *DescribeDirectConnectVirtualInterfaceAttributesOutput {
	s.VlanId = &v
	return s
}

type DescribeDirectConnectVirtualInterfacesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	DirectConnectConnectionId *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	LocalIp *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	PeerIp *string `type:"string"`

	RouteType *string `type:"string"`

	Status *string `type:"string"`

	VirtualInterfaceIds []*string `type:"list"`

	VirtualInterfaceName *string `type:"string"`

	VlanId *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDirectConnectVirtualInterfacesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectVirtualInterfacesInput) GoString() string {
	return s.String()
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetDirectConnectConnectionId(v string) *DescribeDirectConnectVirtualInterfacesInput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetDirectConnectGatewayId(v string) *DescribeDirectConnectVirtualInterfacesInput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetLocalIp sets the LocalIp field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetLocalIp(v string) *DescribeDirectConnectVirtualInterfacesInput {
	s.LocalIp = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetPageNumber(v int64) *DescribeDirectConnectVirtualInterfacesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetPageSize(v int64) *DescribeDirectConnectVirtualInterfacesInput {
	s.PageSize = &v
	return s
}

// SetPeerIp sets the PeerIp field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetPeerIp(v string) *DescribeDirectConnectVirtualInterfacesInput {
	s.PeerIp = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetRouteType(v string) *DescribeDirectConnectVirtualInterfacesInput {
	s.RouteType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetStatus(v string) *DescribeDirectConnectVirtualInterfacesInput {
	s.Status = &v
	return s
}

// SetVirtualInterfaceIds sets the VirtualInterfaceIds field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetVirtualInterfaceIds(v []*string) *DescribeDirectConnectVirtualInterfacesInput {
	s.VirtualInterfaceIds = v
	return s
}

// SetVirtualInterfaceName sets the VirtualInterfaceName field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetVirtualInterfaceName(v string) *DescribeDirectConnectVirtualInterfacesInput {
	s.VirtualInterfaceName = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *DescribeDirectConnectVirtualInterfacesInput) SetVlanId(v int64) *DescribeDirectConnectVirtualInterfacesInput {
	s.VlanId = &v
	return s
}

type DescribeDirectConnectVirtualInterfacesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	TotalCount *int64 `type:"integer"`

	VirtualInterfaces []*VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeDirectConnectVirtualInterfacesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDirectConnectVirtualInterfacesOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDirectConnectVirtualInterfacesOutput) SetPageNumber(v int64) *DescribeDirectConnectVirtualInterfacesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDirectConnectVirtualInterfacesOutput) SetPageSize(v int64) *DescribeDirectConnectVirtualInterfacesOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeDirectConnectVirtualInterfacesOutput) SetRequestId(v string) *DescribeDirectConnectVirtualInterfacesOutput {
	s.RequestId = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeDirectConnectVirtualInterfacesOutput) SetTotalCount(v int64) *DescribeDirectConnectVirtualInterfacesOutput {
	s.TotalCount = &v
	return s
}

// SetVirtualInterfaces sets the VirtualInterfaces field's value.
func (s *DescribeDirectConnectVirtualInterfacesOutput) SetVirtualInterfaces(v []*VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) *DescribeDirectConnectVirtualInterfacesOutput {
	s.VirtualInterfaces = v
	return s
}

type DescribeSharedDirectConnectConnectionsInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	ParentConnectionId *string `type:"string"`

	SharedDirectConnectConnectionIds []*string `type:"list"`

	SharedDirectConnectConnectionName *string `type:"string"`

	Status *string `type:"string"`

	UserAccountId *string `type:"string"`

	VlanId *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeSharedDirectConnectConnectionsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSharedDirectConnectConnectionsInput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetPageNumber(v int64) *DescribeSharedDirectConnectConnectionsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetPageSize(v int64) *DescribeSharedDirectConnectConnectionsInput {
	s.PageSize = &v
	return s
}

// SetParentConnectionId sets the ParentConnectionId field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetParentConnectionId(v string) *DescribeSharedDirectConnectConnectionsInput {
	s.ParentConnectionId = &v
	return s
}

// SetSharedDirectConnectConnectionIds sets the SharedDirectConnectConnectionIds field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetSharedDirectConnectConnectionIds(v []*string) *DescribeSharedDirectConnectConnectionsInput {
	s.SharedDirectConnectConnectionIds = v
	return s
}

// SetSharedDirectConnectConnectionName sets the SharedDirectConnectConnectionName field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetSharedDirectConnectConnectionName(v string) *DescribeSharedDirectConnectConnectionsInput {
	s.SharedDirectConnectConnectionName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetStatus(v string) *DescribeSharedDirectConnectConnectionsInput {
	s.Status = &v
	return s
}

// SetUserAccountId sets the UserAccountId field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetUserAccountId(v string) *DescribeSharedDirectConnectConnectionsInput {
	s.UserAccountId = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *DescribeSharedDirectConnectConnectionsInput) SetVlanId(v int64) *DescribeSharedDirectConnectConnectionsInput {
	s.VlanId = &v
	return s
}

type DescribeSharedDirectConnectConnectionsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	RequestId *string `type:"string"`

	SharedDirectConnectConnections []*SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput `type:"list"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeSharedDirectConnectConnectionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeSharedDirectConnectConnectionsOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeSharedDirectConnectConnectionsOutput) SetPageNumber(v int64) *DescribeSharedDirectConnectConnectionsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeSharedDirectConnectConnectionsOutput) SetPageSize(v int64) *DescribeSharedDirectConnectConnectionsOutput {
	s.PageSize = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *DescribeSharedDirectConnectConnectionsOutput) SetRequestId(v string) *DescribeSharedDirectConnectConnectionsOutput {
	s.RequestId = &v
	return s
}

// SetSharedDirectConnectConnections sets the SharedDirectConnectConnections field's value.
func (s *DescribeSharedDirectConnectConnectionsOutput) SetSharedDirectConnectConnections(v []*SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) *DescribeSharedDirectConnectConnectionsOutput {
	s.SharedDirectConnectConnections = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeSharedDirectConnectConnectionsOutput) SetTotalCount(v int64) *DescribeSharedDirectConnectConnectionsOutput {
	s.TotalCount = &v
	return s
}

type DirectConnectConnectionForDescribeDirectConnectConnectionsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccessPoint *string `type:"string"`

	AccountId *string `type:"string"`

	Bandwidth *int64 `type:"integer"`

	ConnectionType *string `type:"string"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	DirectConnectConnectionId *string `type:"string"`

	DirectConnectConnectionName *string `type:"string"`

	Operator *string `type:"string"`

	ParentConnectionAccountId *string `type:"string"`

	ParentConnectionId *string `type:"string"`

	PeerLocation *string `type:"string"`

	PortType *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	VlanId *int64 `type:"integer"`
}

// String returns the string representation
func (s DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) GoString() string {
	return s.String()
}

// SetAccessPoint sets the AccessPoint field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetAccessPoint(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.AccessPoint = &v
	return s
}

// SetAccountId sets the AccountId field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetAccountId(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.AccountId = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetBandwidth(v int64) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.Bandwidth = &v
	return s
}

// SetConnectionType sets the ConnectionType field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetConnectionType(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.ConnectionType = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetCreationTime(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetDescription(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetDirectConnectConnectionId(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetDirectConnectConnectionName sets the DirectConnectConnectionName field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetDirectConnectConnectionName(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.DirectConnectConnectionName = &v
	return s
}

// SetOperator sets the Operator field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetOperator(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.Operator = &v
	return s
}

// SetParentConnectionAccountId sets the ParentConnectionAccountId field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetParentConnectionAccountId(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.ParentConnectionAccountId = &v
	return s
}

// SetParentConnectionId sets the ParentConnectionId field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetParentConnectionId(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.ParentConnectionId = &v
	return s
}

// SetPeerLocation sets the PeerLocation field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetPeerLocation(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.PeerLocation = &v
	return s
}

// SetPortType sets the PortType field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetPortType(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.PortType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetStatus(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetUpdateTime(v string) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.UpdateTime = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput) SetVlanId(v int64) *DirectConnectConnectionForDescribeDirectConnectConnectionsOutput {
	s.VlanId = &v
	return s
}

type DirectConnectGatewayForDescribeDirectConnectGatewaysOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	AssociateCens []*AssociateCenForDescribeDirectConnectGatewaysOutput `type:"list"`

	BusinessStatus *string `type:"string"`

	CreationTime *string `type:"string"`

	DeletedTime *string `type:"string"`

	Description *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	DirectConnectGatewayName *string `type:"string"`

	LockReason *string `type:"string"`

	OverdueTime *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`
}

// String returns the string representation
func (s DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetAccountId(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.AccountId = &v
	return s
}

// SetAssociateCens sets the AssociateCens field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetAssociateCens(v []*AssociateCenForDescribeDirectConnectGatewaysOutput) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.AssociateCens = v
	return s
}

// SetBusinessStatus sets the BusinessStatus field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetBusinessStatus(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.BusinessStatus = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetCreationTime(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.CreationTime = &v
	return s
}

// SetDeletedTime sets the DeletedTime field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetDeletedTime(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.DeletedTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetDescription(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.Description = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetDirectConnectGatewayId(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetDirectConnectGatewayName sets the DirectConnectGatewayName field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetDirectConnectGatewayName(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.DirectConnectGatewayName = &v
	return s
}

// SetLockReason sets the LockReason field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetLockReason(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.LockReason = &v
	return s
}

// SetOverdueTime sets the OverdueTime field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetOverdueTime(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.OverdueTime = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetStatus(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput) SetUpdateTime(v string) *DirectConnectGatewayForDescribeDirectConnectGatewaysOutput {
	s.UpdateTime = &v
	return s
}

type DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	CreationTime *string `type:"string"`

	DestinationCidrBlock *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	DirectConnectGatewayRouteId *string `type:"string"`

	NextHopId *string `type:"string"`

	NextHopType *string `type:"string"`

	RouteType *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetAccountId(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.AccountId = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetCreationTime(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.CreationTime = &v
	return s
}

// SetDestinationCidrBlock sets the DestinationCidrBlock field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetDestinationCidrBlock(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.DestinationCidrBlock = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetDirectConnectGatewayId(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetDirectConnectGatewayRouteId sets the DirectConnectGatewayRouteId field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetDirectConnectGatewayRouteId(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.DirectConnectGatewayRouteId = &v
	return s
}

// SetNextHopId sets the NextHopId field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetNextHopId(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.NextHopId = &v
	return s
}

// SetNextHopType sets the NextHopType field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetNextHopType(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.NextHopType = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetRouteType(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.RouteType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput) SetStatus(v string) *DirectConnectGatewayRouteForDescribeDirectConnectGatewayRoutesOutput {
	s.Status = &v
	return s
}

type ModifyBgpPeerAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	// BgpPeerId is a required field
	BgpPeerId *string `type:"string" required:"true"`

	BgpPeerName *string `min:"1" max:"128" type:"string"`

	Description *string `min:"1" max:"255" type:"string"`
}

// String returns the string representation
func (s ModifyBgpPeerAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBgpPeerAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyBgpPeerAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyBgpPeerAttributesInput"}
	if s.BgpPeerId == nil {
		invalidParams.Add(request.NewErrParamRequired("BgpPeerId"))
	}
	if s.BgpPeerName != nil && len(*s.BgpPeerName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("BgpPeerName", 1))
	}
	if s.BgpPeerName != nil && len(*s.BgpPeerName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("BgpPeerName", 128, *s.BgpPeerName))
	}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBgpPeerId sets the BgpPeerId field's value.
func (s *ModifyBgpPeerAttributesInput) SetBgpPeerId(v string) *ModifyBgpPeerAttributesInput {
	s.BgpPeerId = &v
	return s
}

// SetBgpPeerName sets the BgpPeerName field's value.
func (s *ModifyBgpPeerAttributesInput) SetBgpPeerName(v string) *ModifyBgpPeerAttributesInput {
	s.BgpPeerName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyBgpPeerAttributesInput) SetDescription(v string) *ModifyBgpPeerAttributesInput {
	s.Description = &v
	return s
}

type ModifyBgpPeerAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyBgpPeerAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyBgpPeerAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyBgpPeerAttributesOutput) SetRequestId(v string) *ModifyBgpPeerAttributesOutput {
	s.RequestId = &v
	return s
}

type ModifyDirectConnectConnectionAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	Description *string `type:"string"`

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`

	DirectConnectConnectionName *string `type:"string"`
}

// String returns the string representation
func (s ModifyDirectConnectConnectionAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDirectConnectConnectionAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDirectConnectConnectionAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDirectConnectConnectionAttributesInput"}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ModifyDirectConnectConnectionAttributesInput) SetDescription(v string) *ModifyDirectConnectConnectionAttributesInput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *ModifyDirectConnectConnectionAttributesInput) SetDirectConnectConnectionId(v string) *ModifyDirectConnectConnectionAttributesInput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetDirectConnectConnectionName sets the DirectConnectConnectionName field's value.
func (s *ModifyDirectConnectConnectionAttributesInput) SetDirectConnectConnectionName(v string) *ModifyDirectConnectConnectionAttributesInput {
	s.DirectConnectConnectionName = &v
	return s
}

type ModifyDirectConnectConnectionAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyDirectConnectConnectionAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDirectConnectConnectionAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyDirectConnectConnectionAttributesOutput) SetRequestId(v string) *ModifyDirectConnectConnectionAttributesOutput {
	s.RequestId = &v
	return s
}

type ModifyDirectConnectGatewayAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	Description *string `type:"string"`

	// DirectConnectGatewayId is a required field
	DirectConnectGatewayId *string `type:"string" required:"true"`

	DirectConnectGatewayName *string `type:"string"`
}

// String returns the string representation
func (s ModifyDirectConnectGatewayAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDirectConnectGatewayAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDirectConnectGatewayAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDirectConnectGatewayAttributesInput"}
	if s.DirectConnectGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectGatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ModifyDirectConnectGatewayAttributesInput) SetDescription(v string) *ModifyDirectConnectGatewayAttributesInput {
	s.Description = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *ModifyDirectConnectGatewayAttributesInput) SetDirectConnectGatewayId(v string) *ModifyDirectConnectGatewayAttributesInput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetDirectConnectGatewayName sets the DirectConnectGatewayName field's value.
func (s *ModifyDirectConnectGatewayAttributesInput) SetDirectConnectGatewayName(v string) *ModifyDirectConnectGatewayAttributesInput {
	s.DirectConnectGatewayName = &v
	return s
}

type ModifyDirectConnectGatewayAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyDirectConnectGatewayAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDirectConnectGatewayAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyDirectConnectGatewayAttributesOutput) SetRequestId(v string) *ModifyDirectConnectGatewayAttributesOutput {
	s.RequestId = &v
	return s
}

type ModifyDirectConnectVirtualInterfaceAttributesInput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	Description *string `min:"1" max:"255" type:"string"`

	// VirtualInterfaceId is a required field
	VirtualInterfaceId *string `type:"string" required:"true"`

	VirtualInterfaceName *string `min:"1" max:"128" type:"string"`
}

// String returns the string representation
func (s ModifyDirectConnectVirtualInterfaceAttributesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDirectConnectVirtualInterfaceAttributesInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDirectConnectVirtualInterfaceAttributesInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDirectConnectVirtualInterfaceAttributesInput"}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.VirtualInterfaceId == nil {
		invalidParams.Add(request.NewErrParamRequired("VirtualInterfaceId"))
	}
	if s.VirtualInterfaceName != nil && len(*s.VirtualInterfaceName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("VirtualInterfaceName", 1))
	}
	if s.VirtualInterfaceName != nil && len(*s.VirtualInterfaceName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("VirtualInterfaceName", 128, *s.VirtualInterfaceName))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDescription sets the Description field's value.
func (s *ModifyDirectConnectVirtualInterfaceAttributesInput) SetDescription(v string) *ModifyDirectConnectVirtualInterfaceAttributesInput {
	s.Description = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *ModifyDirectConnectVirtualInterfaceAttributesInput) SetVirtualInterfaceId(v string) *ModifyDirectConnectVirtualInterfaceAttributesInput {
	s.VirtualInterfaceId = &v
	return s
}

// SetVirtualInterfaceName sets the VirtualInterfaceName field's value.
func (s *ModifyDirectConnectVirtualInterfaceAttributesInput) SetVirtualInterfaceName(v string) *ModifyDirectConnectVirtualInterfaceAttributesInput {
	s.VirtualInterfaceName = &v
	return s
}

type ModifyDirectConnectVirtualInterfaceAttributesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s ModifyDirectConnectVirtualInterfaceAttributesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDirectConnectVirtualInterfaceAttributesOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *ModifyDirectConnectVirtualInterfaceAttributesOutput) SetRequestId(v string) *ModifyDirectConnectVirtualInterfaceAttributesOutput {
	s.RequestId = &v
	return s
}

type SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccessPoint *string `type:"string"`

	AccountId *string `type:"string"`

	Bandwidth *int64 `type:"integer"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	Operator *string `type:"string"`

	ParentConnectionId *string `type:"string"`

	PortType *string `type:"string"`

	SharedDirectConnectConnectionId *string `type:"string"`

	SharedDirectConnectConnectionName *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	UserAccountId *string `type:"string"`

	VlanId *int64 `type:"integer"`
}

// String returns the string representation
func (s SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) GoString() string {
	return s.String()
}

// SetAccessPoint sets the AccessPoint field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetAccessPoint(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.AccessPoint = &v
	return s
}

// SetAccountId sets the AccountId field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetAccountId(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.AccountId = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetBandwidth(v int64) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.Bandwidth = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetCreationTime(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetDescription(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.Description = &v
	return s
}

// SetOperator sets the Operator field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetOperator(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.Operator = &v
	return s
}

// SetParentConnectionId sets the ParentConnectionId field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetParentConnectionId(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.ParentConnectionId = &v
	return s
}

// SetPortType sets the PortType field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetPortType(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.PortType = &v
	return s
}

// SetSharedDirectConnectConnectionId sets the SharedDirectConnectConnectionId field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetSharedDirectConnectConnectionId(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.SharedDirectConnectConnectionId = &v
	return s
}

// SetSharedDirectConnectConnectionName sets the SharedDirectConnectConnectionName field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetSharedDirectConnectConnectionName(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.SharedDirectConnectConnectionName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetStatus(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetUpdateTime(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.UpdateTime = &v
	return s
}

// SetUserAccountId sets the UserAccountId field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetUserAccountId(v string) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.UserAccountId = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput) SetVlanId(v int64) *SharedDirectConnectConnectionForDescribeSharedDirectConnectConnectionsOutput {
	s.VlanId = &v
	return s
}

type VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput struct {
	_        struct{} `type:"structure"`
	Metadata *response.ResponseMetadata

	AccountId *string `type:"string"`

	Bandwidth *int64 `type:"integer"`

	BfdDetectInterval *int64 `type:"integer"`

	BfdDetectMultiplier *int64 `type:"integer"`

	CreationTime *string `type:"string"`

	Description *string `type:"string"`

	DirectConnectConnectionId *string `type:"string"`

	DirectConnectGatewayId *string `type:"string"`

	EnableBfd *bool `type:"boolean"`

	LocalIp *string `type:"string"`

	PeerIp *string `type:"string"`

	RouteType *string `type:"string"`

	Status *string `type:"string"`

	UpdateTime *string `type:"string"`

	VirtualInterfaceId *string `type:"string"`

	VirtualInterfaceName *string `type:"string"`

	VlanId *int64 `type:"integer"`
}

// String returns the string representation
func (s VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetAccountId(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.AccountId = &v
	return s
}

// SetBandwidth sets the Bandwidth field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetBandwidth(v int64) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.Bandwidth = &v
	return s
}

// SetBfdDetectInterval sets the BfdDetectInterval field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetBfdDetectInterval(v int64) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.BfdDetectInterval = &v
	return s
}

// SetBfdDetectMultiplier sets the BfdDetectMultiplier field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetBfdDetectMultiplier(v int64) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.BfdDetectMultiplier = &v
	return s
}

// SetCreationTime sets the CreationTime field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetCreationTime(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.CreationTime = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetDescription(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetDirectConnectConnectionId(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetDirectConnectGatewayId sets the DirectConnectGatewayId field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetDirectConnectGatewayId(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.DirectConnectGatewayId = &v
	return s
}

// SetEnableBfd sets the EnableBfd field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetEnableBfd(v bool) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.EnableBfd = &v
	return s
}

// SetLocalIp sets the LocalIp field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetLocalIp(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.LocalIp = &v
	return s
}

// SetPeerIp sets the PeerIp field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetPeerIp(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.PeerIp = &v
	return s
}

// SetRouteType sets the RouteType field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetRouteType(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.RouteType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetStatus(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.Status = &v
	return s
}

// SetUpdateTime sets the UpdateTime field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetUpdateTime(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.UpdateTime = &v
	return s
}

// SetVirtualInterfaceId sets the VirtualInterfaceId field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetVirtualInterfaceId(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.VirtualInterfaceId = &v
	return s
}

// SetVirtualInterfaceName sets the VirtualInterfaceName field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetVirtualInterfaceName(v string) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.VirtualInterfaceName = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput) SetVlanId(v int64) *VirtualInterfaceForDescribeDirectConnectVirtualInterfacesOutput {
	s.VlanId = &v
	return s
}

const (
	// RouteTypeForCreateDirectConnectVirtualInterfaceInputStatic is a RouteTypeForCreateDirectConnectVirtualInterfaceInput enum value
	RouteTypeForCreateDirectConnectVirtualInterfaceInputStatic = "STATIC"

	// RouteTypeForCreateDirectConnectVirtualInterfaceInputBgp is a RouteTypeForCreateDirectConnectVirtualInterfaceInput enum value
	RouteTypeForCreateDirectConnectVirtualInterfaceInputBgp = "BGP"
)

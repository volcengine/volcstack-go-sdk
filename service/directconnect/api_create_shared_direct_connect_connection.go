// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opCreateSharedDirectConnectConnectionCommon = "CreateSharedDirectConnectConnection"

// CreateSharedDirectConnectConnectionCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateSharedDirectConnectConnectionCommon operation. The "output" return
// value will be populated with the CreateSharedDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSharedDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSharedDirectConnectConnectionCommon Send returns without error.
//
// See CreateSharedDirectConnectConnectionCommon for more information on using the CreateSharedDirectConnectConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateSharedDirectConnectConnectionCommonRequest method.
//    req, resp := client.CreateSharedDirectConnectConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateSharedDirectConnectConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSharedDirectConnectConnectionCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateSharedDirectConnectConnectionCommon for usage and error information.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateSharedDirectConnectConnectionCommonRequest(input)
	return out, req.Send()
}

// CreateSharedDirectConnectConnectionCommonWithContext is the same as CreateSharedDirectConnectConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSharedDirectConnectConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateSharedDirectConnectConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateSharedDirectConnectConnection = "CreateSharedDirectConnectConnection"

// CreateSharedDirectConnectConnectionRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateSharedDirectConnectConnection operation. The "output" return
// value will be populated with the CreateSharedDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateSharedDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateSharedDirectConnectConnectionCommon Send returns without error.
//
// See CreateSharedDirectConnectConnection for more information on using the CreateSharedDirectConnectConnection
// API call, and error handling.
//
//    // Example sending a request using the CreateSharedDirectConnectConnectionRequest method.
//    req, resp := client.CreateSharedDirectConnectConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionRequest(input *CreateSharedDirectConnectConnectionInput) (req *request.Request, output *CreateSharedDirectConnectConnectionOutput) {
	op := &request.Operation{
		Name:       opCreateSharedDirectConnectConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateSharedDirectConnectConnectionInput{}
	}

	output = &CreateSharedDirectConnectConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateSharedDirectConnectConnection API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation CreateSharedDirectConnectConnection for usage and error information.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnection(input *CreateSharedDirectConnectConnectionInput) (*CreateSharedDirectConnectConnectionOutput, error) {
	req, out := c.CreateSharedDirectConnectConnectionRequest(input)
	return out, req.Send()
}

// CreateSharedDirectConnectConnectionWithContext is the same as CreateSharedDirectConnectConnection with the addition of
// the ability to pass a context and additional request options.
//
// See CreateSharedDirectConnectConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) CreateSharedDirectConnectConnectionWithContext(ctx volcstack.Context, input *CreateSharedDirectConnectConnectionInput, opts ...request.Option) (*CreateSharedDirectConnectConnectionOutput, error) {
	req, out := c.CreateSharedDirectConnectConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateSharedDirectConnectConnectionInput struct {
	_ struct{} `type:"structure"`

	// Bandwidth is a required field
	Bandwidth *int64 `min:"50" max:"1000" type:"integer" required:"true"`

	Description *string `type:"string"`

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`

	SharedDirectConnectConnectionName *string `type:"string"`

	// UserAccountId is a required field
	UserAccountId *string `type:"string" required:"true"`

	// VlanId is a required field
	VlanId *int64 `type:"integer" required:"true"`
}

// String returns the string representation
func (s CreateSharedDirectConnectConnectionInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSharedDirectConnectConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSharedDirectConnectConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateSharedDirectConnectConnectionInput"}
	if s.Bandwidth == nil {
		invalidParams.Add(request.NewErrParamRequired("Bandwidth"))
	}
	if s.Bandwidth != nil && *s.Bandwidth < 50 {
		invalidParams.Add(request.NewErrParamMinValue("Bandwidth", 50))
	}
	if s.Bandwidth != nil && *s.Bandwidth > 1000 {
		invalidParams.Add(request.NewErrParamMaxValue("Bandwidth", 1000))
	}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}
	if s.UserAccountId == nil {
		invalidParams.Add(request.NewErrParamRequired("UserAccountId"))
	}
	if s.VlanId == nil {
		invalidParams.Add(request.NewErrParamRequired("VlanId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetBandwidth(v int64) *CreateSharedDirectConnectConnectionInput {
	s.Bandwidth = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetDescription(v string) *CreateSharedDirectConnectConnectionInput {
	s.Description = &v
	return s
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetDirectConnectConnectionId(v string) *CreateSharedDirectConnectConnectionInput {
	s.DirectConnectConnectionId = &v
	return s
}

// SetSharedDirectConnectConnectionName sets the SharedDirectConnectConnectionName field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetSharedDirectConnectConnectionName(v string) *CreateSharedDirectConnectConnectionInput {
	s.SharedDirectConnectConnectionName = &v
	return s
}

// SetUserAccountId sets the UserAccountId field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetUserAccountId(v string) *CreateSharedDirectConnectConnectionInput {
	s.UserAccountId = &v
	return s
}

// SetVlanId sets the VlanId field's value.
func (s *CreateSharedDirectConnectConnectionInput) SetVlanId(v int64) *CreateSharedDirectConnectConnectionInput {
	s.VlanId = &v
	return s
}

type CreateSharedDirectConnectConnectionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`

	SharedDirectConnectConnectionId *string `type:"string"`
}

// String returns the string representation
func (s CreateSharedDirectConnectConnectionOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSharedDirectConnectConnectionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *CreateSharedDirectConnectConnectionOutput) SetRequestId(v string) *CreateSharedDirectConnectConnectionOutput {
	s.RequestId = &v
	return s
}

// SetSharedDirectConnectConnectionId sets the SharedDirectConnectConnectionId field's value.
func (s *CreateSharedDirectConnectConnectionOutput) SetSharedDirectConnectConnectionId(v string) *CreateSharedDirectConnectConnectionOutput {
	s.SharedDirectConnectConnectionId = &v
	return s
}

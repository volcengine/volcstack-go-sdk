// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package directconnect

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opDeleteDirectConnectConnectionCommon = "DeleteDirectConnectConnection"

// DeleteDirectConnectConnectionCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectConnectionCommon operation. The "output" return
// value will be populated with the DeleteDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectConnectionCommon Send returns without error.
//
// See DeleteDirectConnectConnectionCommon for more information on using the DeleteDirectConnectConnectionCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectConnectionCommonRequest method.
//    req, resp := client.DeleteDirectConnectConnectionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectConnectionCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectConnectionCommon API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectConnectionCommon for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectConnectionCommonRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectConnectionCommonWithContext is the same as DeleteDirectConnectConnectionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectConnectionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDirectConnectConnectionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDirectConnectConnection = "DeleteDirectConnectConnection"

// DeleteDirectConnectConnectionRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDirectConnectConnection operation. The "output" return
// value will be populated with the DeleteDirectConnectConnectionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDirectConnectConnectionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDirectConnectConnectionCommon Send returns without error.
//
// See DeleteDirectConnectConnection for more information on using the DeleteDirectConnectConnection
// API call, and error handling.
//
//    // Example sending a request using the DeleteDirectConnectConnectionRequest method.
//    req, resp := client.DeleteDirectConnectConnectionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionRequest(input *DeleteDirectConnectConnectionInput) (req *request.Request, output *DeleteDirectConnectConnectionOutput) {
	op := &request.Operation{
		Name:       opDeleteDirectConnectConnection,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDirectConnectConnectionInput{}
	}

	output = &DeleteDirectConnectConnectionOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDirectConnectConnection API operation for DIRECTCONNECT.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for DIRECTCONNECT's
// API operation DeleteDirectConnectConnection for usage and error information.
func (c *DIRECTCONNECT) DeleteDirectConnectConnection(input *DeleteDirectConnectConnectionInput) (*DeleteDirectConnectConnectionOutput, error) {
	req, out := c.DeleteDirectConnectConnectionRequest(input)
	return out, req.Send()
}

// DeleteDirectConnectConnectionWithContext is the same as DeleteDirectConnectConnection with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDirectConnectConnection for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DIRECTCONNECT) DeleteDirectConnectConnectionWithContext(ctx volcstack.Context, input *DeleteDirectConnectConnectionInput, opts ...request.Option) (*DeleteDirectConnectConnectionOutput, error) {
	req, out := c.DeleteDirectConnectConnectionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteDirectConnectConnectionInput struct {
	_ struct{} `type:"structure"`

	// DirectConnectConnectionId is a required field
	DirectConnectConnectionId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteDirectConnectConnectionInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectConnectionInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDirectConnectConnectionInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDirectConnectConnectionInput"}
	if s.DirectConnectConnectionId == nil {
		invalidParams.Add(request.NewErrParamRequired("DirectConnectConnectionId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDirectConnectConnectionId sets the DirectConnectConnectionId field's value.
func (s *DeleteDirectConnectConnectionInput) SetDirectConnectConnectionId(v string) *DeleteDirectConnectConnectionInput {
	s.DirectConnectConnectionId = &v
	return s
}

type DeleteDirectConnectConnectionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDirectConnectConnectionOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDirectConnectConnectionOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteDirectConnectConnectionOutput) SetRequestId(v string) *DeleteDirectConnectConnectionOutput {
	s.RequestId = &v
	return s
}

// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"code.byted.org/iaasng/volcstack-go-sdk/private/protocol"
	"code.byted.org/iaasng/volcstack-go-sdk/private/protocol/volcstackquery"
	"code.byted.org/iaasng/volcstack-go-sdk/volcstack"
	"code.byted.org/iaasng/volcstack-go-sdk/volcstack/request"
	"code.byted.org/iaasng/volcstack-go-sdk/volcstack/volcstackutil"
)

const opBindAssumeRoleCommon = "BindAssumeRole"

// BindAssumeRoleCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the BindAssumeRoleCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See BindAssumeRoleCommon for more information on using the BindAssumeRoleCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the BindAssumeRoleCommonRequest method.
//    req, resp := client.BindAssumeRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) BindAssumeRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindAssumeRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// BindAssumeRoleCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation BindAssumeRoleCommon for usage and error information.
func (c *ECS) BindAssumeRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindAssumeRoleCommonRequest(input)
	return out, req.Send()
}

// BindAssumeRoleCommonWithContext is the same as BindAssumeRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BindAssumeRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) BindAssumeRoleCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindAssumeRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindAssumeRole = "BindAssumeRole"

// BindAssumeRoleRequest generates a "volcstack/request.Request" representing the
// client's request for the BindAssumeRole operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See BindAssumeRole for more information on using the BindAssumeRole
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the BindAssumeRoleRequest method.
//    req, resp := client.BindAssumeRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) BindAssumeRoleRequest(input *BindAssumeRoleInput) (req *request.Request, output *BindAssumeRoleOutput) {
	op := &request.Operation{
		Name:       opBindAssumeRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BindAssumeRoleInput{}
	}

	output = &BindAssumeRoleOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// BindAssumeRole API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation BindAssumeRole for usage and error information.
func (c *ECS) BindAssumeRole(input *BindAssumeRoleInput) (*BindAssumeRoleOutput, error) {
	req, out := c.BindAssumeRoleRequest(input)
	return out, req.Send()
}

// BindAssumeRoleWithContext is the same as BindAssumeRole with the addition of
// the ability to pass a context and additional request options.
//
// See BindAssumeRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) BindAssumeRoleWithContext(ctx volcstack.Context, input *BindAssumeRoleInput, opts ...request.Option) (*BindAssumeRoleOutput, error) {
	req, out := c.BindAssumeRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInstancesCommon = "CreateInstances"

// CreateInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInstancesCommon for more information on using the CreateInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInstancesCommonRequest method.
//    req, resp := client.CreateInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateInstancesCommon for usage and error information.
func (c *ECS) CreateInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInstancesCommonRequest(input)
	return out, req.Send()
}

// CreateInstancesCommonWithContext is the same as CreateInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInstances = "CreateInstances"

// CreateInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInstances for more information on using the CreateInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInstancesRequest method.
//    req, resp := client.CreateInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateInstancesRequest(input *CreateInstancesInput) (req *request.Request, output *CreateInstancesOutput) {
	op := &request.Operation{
		Name:       opCreateInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateInstancesInput{}
	}

	output = &CreateInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateInstances for usage and error information.
func (c *ECS) CreateInstances(input *CreateInstancesInput) (*CreateInstancesOutput, error) {
	req, out := c.CreateInstancesRequest(input)
	return out, req.Send()
}

// CreateInstancesWithContext is the same as CreateInstances with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateInstancesWithContext(ctx volcstack.Context, input *CreateInstancesInput, opts ...request.Option) (*CreateInstancesOutput, error) {
	req, out := c.CreateInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstanceCommon = "DeleteInstance"

// DeleteInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstanceCommon for more information on using the DeleteInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstanceCommonRequest method.
//    req, resp := client.DeleteInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstanceCommon for usage and error information.
func (c *ECS) DeleteInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceCommonRequest(input)
	return out, req.Send()
}

// DeleteInstanceCommonWithContext is the same as DeleteInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstance = "DeleteInstance"

// DeleteInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstance for more information on using the DeleteInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstanceRequest method.
//    req, resp := client.DeleteInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstanceRequest(input *DeleteInstanceInput) (req *request.Request, output *DeleteInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteInstanceInput{}
	}

	output = &DeleteInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstance for usage and error information.
func (c *ECS) DeleteInstance(input *DeleteInstanceInput) (*DeleteInstanceOutput, error) {
	req, out := c.DeleteInstanceRequest(input)
	return out, req.Send()
}

// DeleteInstanceWithContext is the same as DeleteInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstanceWithContext(ctx volcstack.Context, input *DeleteInstanceInput, opts ...request.Option) (*DeleteInstanceOutput, error) {
	req, out := c.DeleteInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstancesCommon = "DeleteInstances"

// DeleteInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstancesCommon for more information on using the DeleteInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstancesCommonRequest method.
//    req, resp := client.DeleteInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstancesCommon for usage and error information.
func (c *ECS) DeleteInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInstancesCommonRequest(input)
	return out, req.Send()
}

// DeleteInstancesCommonWithContext is the same as DeleteInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstances = "DeleteInstances"

// DeleteInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstances for more information on using the DeleteInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstancesRequest method.
//    req, resp := client.DeleteInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstancesRequest(input *DeleteInstancesInput) (req *request.Request, output *DeleteInstancesOutput) {
	op := &request.Operation{
		Name:       opDeleteInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteInstancesInput{}
	}

	output = &DeleteInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstances for usage and error information.
func (c *ECS) DeleteInstances(input *DeleteInstancesInput) (*DeleteInstancesOutput, error) {
	req, out := c.DeleteInstancesRequest(input)
	return out, req.Send()
}

// DeleteInstancesWithContext is the same as DeleteInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstancesWithContext(ctx volcstack.Context, input *DeleteInstancesInput, opts ...request.Option) (*DeleteInstancesOutput, error) {
	req, out := c.DeleteInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceECSTerminalUrlCommon = "DescribeInstanceECSTerminalUrl"

// DescribeInstanceECSTerminalUrlCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceECSTerminalUrlCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceECSTerminalUrlCommon for more information on using the DescribeInstanceECSTerminalUrlCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceECSTerminalUrlCommonRequest method.
//    req, resp := client.DescribeInstanceECSTerminalUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceECSTerminalUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceECSTerminalUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceECSTerminalUrlCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceECSTerminalUrlCommon for usage and error information.
func (c *ECS) DescribeInstanceECSTerminalUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceECSTerminalUrlCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceECSTerminalUrlCommonWithContext is the same as DescribeInstanceECSTerminalUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceECSTerminalUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceECSTerminalUrlCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceECSTerminalUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceECSTerminalUrl = "DescribeInstanceECSTerminalUrl"

// DescribeInstanceECSTerminalUrlRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceECSTerminalUrl operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceECSTerminalUrl for more information on using the DescribeInstanceECSTerminalUrl
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceECSTerminalUrlRequest method.
//    req, resp := client.DescribeInstanceECSTerminalUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceECSTerminalUrlRequest(input *DescribeInstanceECSTerminalUrlInput) (req *request.Request, output *DescribeInstanceECSTerminalUrlOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceECSTerminalUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceECSTerminalUrlInput{}
	}

	output = &DescribeInstanceECSTerminalUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceECSTerminalUrl API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceECSTerminalUrl for usage and error information.
func (c *ECS) DescribeInstanceECSTerminalUrl(input *DescribeInstanceECSTerminalUrlInput) (*DescribeInstanceECSTerminalUrlOutput, error) {
	req, out := c.DescribeInstanceECSTerminalUrlRequest(input)
	return out, req.Send()
}

// DescribeInstanceECSTerminalUrlWithContext is the same as DescribeInstanceECSTerminalUrl with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceECSTerminalUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceECSTerminalUrlWithContext(ctx volcstack.Context, input *DescribeInstanceECSTerminalUrlInput, opts ...request.Option) (*DescribeInstanceECSTerminalUrlOutput, error) {
	req, out := c.DescribeInstanceECSTerminalUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceVncUrlCommon = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrlCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceVncUrlCommon for more information on using the DescribeInstanceVncUrlCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceVncUrlCommonRequest method.
//    req, resp := client.DescribeInstanceVncUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrlCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrlCommon for usage and error information.
func (c *ECS) DescribeInstanceVncUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlCommonWithContext is the same as DescribeInstanceVncUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceVncUrl = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrl operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceVncUrl for more information on using the DescribeInstanceVncUrl
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceVncUrlRequest method.
//    req, resp := client.DescribeInstanceVncUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlRequest(input *DescribeInstanceVncUrlInput) (req *request.Request, output *DescribeInstanceVncUrlOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceVncUrlInput{}
	}

	output = &DescribeInstanceVncUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrl API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrl for usage and error information.
func (c *ECS) DescribeInstanceVncUrl(input *DescribeInstanceVncUrlInput) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlWithContext is the same as DescribeInstanceVncUrl with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlWithContext(ctx volcstack.Context, input *DescribeInstanceVncUrlInput, opts ...request.Option) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstancesCommon = "DescribeInstances"

// DescribeInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstancesCommon for more information on using the DescribeInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstancesCommonRequest method.
//    req, resp := client.DescribeInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstancesCommon for usage and error information.
func (c *ECS) DescribeInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancesCommonRequest(input)
	return out, req.Send()
}

// DescribeInstancesCommonWithContext is the same as DescribeInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstances = "DescribeInstances"

// DescribeInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstances for more information on using the DescribeInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstancesRequest method.
//    req, resp := client.DescribeInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancesRequest(input *DescribeInstancesInput) (req *request.Request, output *DescribeInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstancesInput{}
	}

	output = &DescribeInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstances for usage and error information.
func (c *ECS) DescribeInstances(input *DescribeInstancesInput) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	return out, req.Send()
}

// DescribeInstancesWithContext is the same as DescribeInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancesWithContext(ctx volcstack.Context, input *DescribeInstancesInput, opts ...request.Option) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeUserDataCommon = "DescribeUserData"

// DescribeUserDataCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeUserDataCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeUserDataCommon for more information on using the DescribeUserDataCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeUserDataCommonRequest method.
//    req, resp := client.DescribeUserDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeUserDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeUserDataCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeUserDataCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeUserDataCommon for usage and error information.
func (c *ECS) DescribeUserDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeUserDataCommonRequest(input)
	return out, req.Send()
}

// DescribeUserDataCommonWithContext is the same as DescribeUserDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeUserDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeUserDataCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeUserDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeUserData = "DescribeUserData"

// DescribeUserDataRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeUserData operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeUserData for more information on using the DescribeUserData
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeUserDataRequest method.
//    req, resp := client.DescribeUserDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeUserDataRequest(input *DescribeUserDataInput) (req *request.Request, output *DescribeUserDataOutput) {
	op := &request.Operation{
		Name:       opDescribeUserData,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeUserDataInput{}
	}

	output = &DescribeUserDataOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeUserData API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeUserData for usage and error information.
func (c *ECS) DescribeUserData(input *DescribeUserDataInput) (*DescribeUserDataOutput, error) {
	req, out := c.DescribeUserDataRequest(input)
	return out, req.Send()
}

// DescribeUserDataWithContext is the same as DescribeUserData with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeUserData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeUserDataWithContext(ctx volcstack.Context, input *DescribeUserDataInput, opts ...request.Option) (*DescribeUserDataOutput, error) {
	req, out := c.DescribeUserDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInstanceConsoleCommon = "GetInstanceConsole"

// GetInstanceConsoleCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the GetInstanceConsoleCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetInstanceConsoleCommon for more information on using the GetInstanceConsoleCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetInstanceConsoleCommonRequest method.
//    req, resp := client.GetInstanceConsoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) GetInstanceConsoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetInstanceConsoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetInstanceConsoleCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation GetInstanceConsoleCommon for usage and error information.
func (c *ECS) GetInstanceConsoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetInstanceConsoleCommonRequest(input)
	return out, req.Send()
}

// GetInstanceConsoleCommonWithContext is the same as GetInstanceConsoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceConsoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) GetInstanceConsoleCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetInstanceConsoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInstanceConsole = "GetInstanceConsole"

// GetInstanceConsoleRequest generates a "volcstack/request.Request" representing the
// client's request for the GetInstanceConsole operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetInstanceConsole for more information on using the GetInstanceConsole
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetInstanceConsoleRequest method.
//    req, resp := client.GetInstanceConsoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) GetInstanceConsoleRequest(input *GetInstanceConsoleInput) (req *request.Request, output *GetInstanceConsoleOutput) {
	op := &request.Operation{
		Name:       opGetInstanceConsole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetInstanceConsoleInput{}
	}

	output = &GetInstanceConsoleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetInstanceConsole API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation GetInstanceConsole for usage and error information.
func (c *ECS) GetInstanceConsole(input *GetInstanceConsoleInput) (*GetInstanceConsoleOutput, error) {
	req, out := c.GetInstanceConsoleRequest(input)
	return out, req.Send()
}

// GetInstanceConsoleWithContext is the same as GetInstanceConsole with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceConsole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) GetInstanceConsoleWithContext(ctx volcstack.Context, input *GetInstanceConsoleInput, opts ...request.Option) (*GetInstanceConsoleOutput, error) {
	req, out := c.GetInstanceConsoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolumeCommon = "InnerReplaceSystemVolume"

// InnerReplaceSystemVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolumeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolumeCommon for more information on using the InnerReplaceSystemVolumeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumeCommonRequest method.
//    req, resp := client.InnerReplaceSystemVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolumeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolumeCommon for usage and error information.
func (c *ECS) InnerReplaceSystemVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumeCommonRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumeCommonWithContext is the same as InnerReplaceSystemVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolume = "InnerReplaceSystemVolume"

// InnerReplaceSystemVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolume operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolume for more information on using the InnerReplaceSystemVolume
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumeRequest method.
//    req, resp := client.InnerReplaceSystemVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumeRequest(input *InnerReplaceSystemVolumeInput) (req *request.Request, output *InnerReplaceSystemVolumeOutput) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &InnerReplaceSystemVolumeInput{}
	}

	output = &InnerReplaceSystemVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolume API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolume for usage and error information.
func (c *ECS) InnerReplaceSystemVolume(input *InnerReplaceSystemVolumeInput) (*InnerReplaceSystemVolumeOutput, error) {
	req, out := c.InnerReplaceSystemVolumeRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumeWithContext is the same as InnerReplaceSystemVolume with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumeWithContext(ctx volcstack.Context, input *InnerReplaceSystemVolumeInput, opts ...request.Option) (*InnerReplaceSystemVolumeOutput, error) {
	req, out := c.InnerReplaceSystemVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolumesCommon = "InnerReplaceSystemVolumes"

// InnerReplaceSystemVolumesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolumesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolumesCommon for more information on using the InnerReplaceSystemVolumesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumesCommonRequest method.
//    req, resp := client.InnerReplaceSystemVolumesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolumesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolumesCommon for usage and error information.
func (c *ECS) InnerReplaceSystemVolumesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumesCommonRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumesCommonWithContext is the same as InnerReplaceSystemVolumesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolumes = "InnerReplaceSystemVolumes"

// InnerReplaceSystemVolumesRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolumes operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolumes for more information on using the InnerReplaceSystemVolumes
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumesRequest method.
//    req, resp := client.InnerReplaceSystemVolumesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumesRequest(input *InnerReplaceSystemVolumesInput) (req *request.Request, output *InnerReplaceSystemVolumesOutput) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &InnerReplaceSystemVolumesInput{}
	}

	output = &InnerReplaceSystemVolumesOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolumes API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolumes for usage and error information.
func (c *ECS) InnerReplaceSystemVolumes(input *InnerReplaceSystemVolumesInput) (*InnerReplaceSystemVolumesOutput, error) {
	req, out := c.InnerReplaceSystemVolumesRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumesWithContext is the same as InnerReplaceSystemVolumes with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumesWithContext(ctx volcstack.Context, input *InnerReplaceSystemVolumesInput, opts ...request.Option) (*InnerReplaceSystemVolumesOutput, error) {
	req, out := c.InnerReplaceSystemVolumesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAssumeRolesCommon = "ListAssumeRoles"

// ListAssumeRolesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ListAssumeRolesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListAssumeRolesCommon for more information on using the ListAssumeRolesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListAssumeRolesCommonRequest method.
//    req, resp := client.ListAssumeRolesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ListAssumeRolesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAssumeRolesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListAssumeRolesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ListAssumeRolesCommon for usage and error information.
func (c *ECS) ListAssumeRolesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAssumeRolesCommonRequest(input)
	return out, req.Send()
}

// ListAssumeRolesCommonWithContext is the same as ListAssumeRolesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAssumeRolesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ListAssumeRolesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAssumeRolesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAssumeRoles = "ListAssumeRoles"

// ListAssumeRolesRequest generates a "volcstack/request.Request" representing the
// client's request for the ListAssumeRoles operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListAssumeRoles for more information on using the ListAssumeRoles
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListAssumeRolesRequest method.
//    req, resp := client.ListAssumeRolesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ListAssumeRolesRequest(input *ListAssumeRolesInput) (req *request.Request, output *ListAssumeRolesOutput) {
	op := &request.Operation{
		Name:       opListAssumeRoles,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAssumeRolesInput{}
	}

	output = &ListAssumeRolesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListAssumeRoles API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ListAssumeRoles for usage and error information.
func (c *ECS) ListAssumeRoles(input *ListAssumeRolesInput) (*ListAssumeRolesOutput, error) {
	req, out := c.ListAssumeRolesRequest(input)
	return out, req.Send()
}

// ListAssumeRolesWithContext is the same as ListAssumeRoles with the addition of
// the ability to pass a context and additional request options.
//
// See ListAssumeRoles for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ListAssumeRolesWithContext(ctx volcstack.Context, input *ListAssumeRolesInput, opts ...request.Option) (*ListAssumeRolesOutput, error) {
	req, out := c.ListAssumeRolesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceAttributeCommon = "ModifyInstanceAttribute"

// ModifyInstanceAttributeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceAttributeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceAttributeCommon for more information on using the ModifyInstanceAttributeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceAttributeCommonRequest method.
//    req, resp := client.ModifyInstanceAttributeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceAttributeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceAttributeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceAttributeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceAttributeCommon for usage and error information.
func (c *ECS) ModifyInstanceAttributeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceAttributeCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceAttributeCommonWithContext is the same as ModifyInstanceAttributeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceAttributeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceAttributeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceAttributeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceAttribute = "ModifyInstanceAttribute"

// ModifyInstanceAttributeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceAttribute operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceAttribute for more information on using the ModifyInstanceAttribute
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceAttributeRequest method.
//    req, resp := client.ModifyInstanceAttributeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceAttributeRequest(input *ModifyInstanceAttributeInput) (req *request.Request, output *ModifyInstanceAttributeOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceAttributeInput{}
	}

	output = &ModifyInstanceAttributeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceAttribute API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceAttribute for usage and error information.
func (c *ECS) ModifyInstanceAttribute(input *ModifyInstanceAttributeInput) (*ModifyInstanceAttributeOutput, error) {
	req, out := c.ModifyInstanceAttributeRequest(input)
	return out, req.Send()
}

// ModifyInstanceAttributeWithContext is the same as ModifyInstanceAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceAttributeWithContext(ctx volcstack.Context, input *ModifyInstanceAttributeInput, opts ...request.Option) (*ModifyInstanceAttributeOutput, error) {
	req, out := c.ModifyInstanceAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceChargeTypeCommon = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceChargeTypeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceChargeTypeCommon for more information on using the ModifyInstanceChargeTypeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceChargeTypeCommonRequest method.
//    req, resp := client.ModifyInstanceChargeTypeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceChargeTypeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeTypeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceChargeTypeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceChargeTypeCommon for usage and error information.
func (c *ECS) ModifyInstanceChargeTypeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeCommonWithContext is the same as ModifyInstanceChargeTypeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeTypeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceChargeTypeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceChargeType = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceChargeType operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceChargeType for more information on using the ModifyInstanceChargeType
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceChargeTypeRequest method.
//    req, resp := client.ModifyInstanceChargeTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceChargeTypeRequest(input *ModifyInstanceChargeTypeInput) (req *request.Request, output *ModifyInstanceChargeTypeOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeType,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceChargeTypeInput{}
	}

	output = &ModifyInstanceChargeTypeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceChargeType API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceChargeType for usage and error information.
func (c *ECS) ModifyInstanceChargeType(input *ModifyInstanceChargeTypeInput) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeWithContext is the same as ModifyInstanceChargeType with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceChargeTypeWithContext(ctx volcstack.Context, input *ModifyInstanceChargeTypeInput, opts ...request.Option) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceSpecCommon = "ModifyInstanceSpec"

// ModifyInstanceSpecCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceSpecCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceSpecCommon for more information on using the ModifyInstanceSpecCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceSpecCommonRequest method.
//    req, resp := client.ModifyInstanceSpecCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceSpecCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceSpecCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceSpecCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceSpecCommon for usage and error information.
func (c *ECS) ModifyInstanceSpecCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceSpecCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceSpecCommonWithContext is the same as ModifyInstanceSpecCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceSpecCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceSpecCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceSpecCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceSpec = "ModifyInstanceSpec"

// ModifyInstanceSpecRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceSpec operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceSpec for more information on using the ModifyInstanceSpec
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceSpecRequest method.
//    req, resp := client.ModifyInstanceSpecRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceSpecRequest(input *ModifyInstanceSpecInput) (req *request.Request, output *ModifyInstanceSpecOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceSpec,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceSpecInput{}
	}

	output = &ModifyInstanceSpecOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceSpec API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceSpec for usage and error information.
func (c *ECS) ModifyInstanceSpec(input *ModifyInstanceSpecInput) (*ModifyInstanceSpecOutput, error) {
	req, out := c.ModifyInstanceSpecRequest(input)
	return out, req.Send()
}

// ModifyInstanceSpecWithContext is the same as ModifyInstanceSpec with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceSpec for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceSpecWithContext(ctx volcstack.Context, input *ModifyInstanceSpecInput, opts ...request.Option) (*ModifyInstanceSpecOutput, error) {
	req, out := c.ModifyInstanceSpecRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstanceCommon = "RebootInstance"

// RebootInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootInstanceCommon for more information on using the RebootInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootInstanceCommonRequest method.
//    req, resp := client.RebootInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRebootInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RebootInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstanceCommon for usage and error information.
func (c *ECS) RebootInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RebootInstanceCommonRequest(input)
	return out, req.Send()
}

// RebootInstanceCommonWithContext is the same as RebootInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RebootInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstance = "RebootInstance"

// RebootInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootInstance for more information on using the RebootInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootInstanceRequest method.
//    req, resp := client.RebootInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstanceRequest(input *RebootInstanceInput) (req *request.Request, output *RebootInstanceOutput) {
	op := &request.Operation{
		Name:       opRebootInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RebootInstanceInput{}
	}

	output = &RebootInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RebootInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstance for usage and error information.
func (c *ECS) RebootInstance(input *RebootInstanceInput) (*RebootInstanceOutput, error) {
	req, out := c.RebootInstanceRequest(input)
	return out, req.Send()
}

// RebootInstanceWithContext is the same as RebootInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstanceWithContext(ctx volcstack.Context, input *RebootInstanceInput, opts ...request.Option) (*RebootInstanceOutput, error) {
	req, out := c.RebootInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstancesCommon = "RebootInstances"

// RebootInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootInstancesCommon for more information on using the RebootInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootInstancesCommonRequest method.
//    req, resp := client.RebootInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRebootInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RebootInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstancesCommon for usage and error information.
func (c *ECS) RebootInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RebootInstancesCommonRequest(input)
	return out, req.Send()
}

// RebootInstancesCommonWithContext is the same as RebootInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RebootInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstances = "RebootInstances"

// RebootInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootInstances for more information on using the RebootInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootInstancesRequest method.
//    req, resp := client.RebootInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstancesRequest(input *RebootInstancesInput) (req *request.Request, output *RebootInstancesOutput) {
	op := &request.Operation{
		Name:       opRebootInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RebootInstancesInput{}
	}

	output = &RebootInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RebootInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstances for usage and error information.
func (c *ECS) RebootInstances(input *RebootInstancesInput) (*RebootInstancesOutput, error) {
	req, out := c.RebootInstancesRequest(input)
	return out, req.Send()
}

// RebootInstancesWithContext is the same as RebootInstances with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstancesWithContext(ctx volcstack.Context, input *RebootInstancesInput, opts ...request.Option) (*RebootInstancesOutput, error) {
	req, out := c.RebootInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewInstanceCommon = "RenewInstance"

// RenewInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RenewInstanceCommon for more information on using the RenewInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RenewInstanceCommonRequest method.
//    req, resp := client.RenewInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RenewInstanceCommon for usage and error information.
func (c *ECS) RenewInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewInstanceCommonRequest(input)
	return out, req.Send()
}

// RenewInstanceCommonWithContext is the same as RenewInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewInstance = "RenewInstance"

// RenewInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RenewInstance for more information on using the RenewInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RenewInstanceRequest method.
//    req, resp := client.RenewInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewInstanceRequest(input *RenewInstanceInput) (req *request.Request, output *RenewInstanceOutput) {
	op := &request.Operation{
		Name:       opRenewInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewInstanceInput{}
	}

	output = &RenewInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RenewInstance for usage and error information.
func (c *ECS) RenewInstance(input *RenewInstanceInput) (*RenewInstanceOutput, error) {
	req, out := c.RenewInstanceRequest(input)
	return out, req.Send()
}

// RenewInstanceWithContext is the same as RenewInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RenewInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewInstanceWithContext(ctx volcstack.Context, input *RenewInstanceInput, opts ...request.Option) (*RenewInstanceOutput, error) {
	req, out := c.RenewInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemVolumeCommon = "ReplaceSystemVolume"

// ReplaceSystemVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemVolumeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemVolumeCommon for more information on using the ReplaceSystemVolumeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemVolumeCommonRequest method.
//    req, resp := client.ReplaceSystemVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReplaceSystemVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemVolumeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemVolumeCommon for usage and error information.
func (c *ECS) ReplaceSystemVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemVolumeCommonRequest(input)
	return out, req.Send()
}

// ReplaceSystemVolumeCommonWithContext is the same as ReplaceSystemVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemVolume = "ReplaceSystemVolume"

// ReplaceSystemVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemVolume operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemVolume for more information on using the ReplaceSystemVolume
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemVolumeRequest method.
//    req, resp := client.ReplaceSystemVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemVolumeRequest(input *ReplaceSystemVolumeInput) (req *request.Request, output *ReplaceSystemVolumeOutput) {
	op := &request.Operation{
		Name:       opReplaceSystemVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ReplaceSystemVolumeInput{}
	}

	output = &ReplaceSystemVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemVolume API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemVolume for usage and error information.
func (c *ECS) ReplaceSystemVolume(input *ReplaceSystemVolumeInput) (*ReplaceSystemVolumeOutput, error) {
	req, out := c.ReplaceSystemVolumeRequest(input)
	return out, req.Send()
}

// ReplaceSystemVolumeWithContext is the same as ReplaceSystemVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemVolumeWithContext(ctx volcstack.Context, input *ReplaceSystemVolumeInput, opts ...request.Option) (*ReplaceSystemVolumeOutput, error) {
	req, out := c.ReplaceSystemVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemsVolumeCommon = "ReplaceSystemsVolume"

// ReplaceSystemsVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemsVolumeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemsVolumeCommon for more information on using the ReplaceSystemsVolumeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemsVolumeCommonRequest method.
//    req, resp := client.ReplaceSystemsVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemsVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReplaceSystemsVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemsVolumeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemsVolumeCommon for usage and error information.
func (c *ECS) ReplaceSystemsVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemsVolumeCommonRequest(input)
	return out, req.Send()
}

// ReplaceSystemsVolumeCommonWithContext is the same as ReplaceSystemsVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemsVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemsVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemsVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemsVolume = "ReplaceSystemsVolume"

// ReplaceSystemsVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemsVolume operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemsVolume for more information on using the ReplaceSystemsVolume
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemsVolumeRequest method.
//    req, resp := client.ReplaceSystemsVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemsVolumeRequest(input *ReplaceSystemsVolumeInput) (req *request.Request, output *ReplaceSystemsVolumeOutput) {
	op := &request.Operation{
		Name:       opReplaceSystemsVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ReplaceSystemsVolumeInput{}
	}

	output = &ReplaceSystemsVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemsVolume API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemsVolume for usage and error information.
func (c *ECS) ReplaceSystemsVolume(input *ReplaceSystemsVolumeInput) (*ReplaceSystemsVolumeOutput, error) {
	req, out := c.ReplaceSystemsVolumeRequest(input)
	return out, req.Send()
}

// ReplaceSystemsVolumeWithContext is the same as ReplaceSystemsVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemsVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemsVolumeWithContext(ctx volcstack.Context, input *ReplaceSystemsVolumeInput, opts ...request.Option) (*ReplaceSystemsVolumeOutput, error) {
	req, out := c.ReplaceSystemsVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetAuthenticationCommon = "ResetAuthentication"

// ResetAuthenticationCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetAuthenticationCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResetAuthenticationCommon for more information on using the ResetAuthenticationCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResetAuthenticationCommonRequest method.
//    req, resp := client.ResetAuthenticationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResetAuthenticationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetAuthenticationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResetAuthenticationCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResetAuthenticationCommon for usage and error information.
func (c *ECS) ResetAuthenticationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetAuthenticationCommonRequest(input)
	return out, req.Send()
}

// ResetAuthenticationCommonWithContext is the same as ResetAuthenticationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAuthenticationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResetAuthenticationCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetAuthenticationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetAuthentication = "ResetAuthentication"

// ResetAuthenticationRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetAuthentication operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResetAuthentication for more information on using the ResetAuthentication
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResetAuthenticationRequest method.
//    req, resp := client.ResetAuthenticationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResetAuthenticationRequest(input *ResetAuthenticationInput) (req *request.Request, output *ResetAuthenticationOutput) {
	op := &request.Operation{
		Name:       opResetAuthentication,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetAuthenticationInput{}
	}

	output = &ResetAuthenticationOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResetAuthentication API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResetAuthentication for usage and error information.
func (c *ECS) ResetAuthentication(input *ResetAuthenticationInput) (*ResetAuthenticationOutput, error) {
	req, out := c.ResetAuthenticationRequest(input)
	return out, req.Send()
}

// ResetAuthenticationWithContext is the same as ResetAuthentication with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAuthentication for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResetAuthenticationWithContext(ctx volcstack.Context, input *ResetAuthenticationInput, opts ...request.Option) (*ResetAuthenticationOutput, error) {
	req, out := c.ResetAuthenticationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResizeInstanceCommon = "ResizeInstance"

// ResizeInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ResizeInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResizeInstanceCommon for more information on using the ResizeInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResizeInstanceCommonRequest method.
//    req, resp := client.ResizeInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResizeInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResizeInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ResizeInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResizeInstanceCommon for usage and error information.
func (c *ECS) ResizeInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResizeInstanceCommonRequest(input)
	return out, req.Send()
}

// ResizeInstanceCommonWithContext is the same as ResizeInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResizeInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResizeInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResizeInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResizeInstance = "ResizeInstance"

// ResizeInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the ResizeInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResizeInstance for more information on using the ResizeInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResizeInstanceRequest method.
//    req, resp := client.ResizeInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResizeInstanceRequest(input *ResizeInstanceInput) (req *request.Request, output *ResizeInstanceOutput) {
	op := &request.Operation{
		Name:       opResizeInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResizeInstanceInput{}
	}

	output = &ResizeInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ResizeInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResizeInstance for usage and error information.
func (c *ECS) ResizeInstance(input *ResizeInstanceInput) (*ResizeInstanceOutput, error) {
	req, out := c.ResizeInstanceRequest(input)
	return out, req.Send()
}

// ResizeInstanceWithContext is the same as ResizeInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ResizeInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResizeInstanceWithContext(ctx volcstack.Context, input *ResizeInstanceInput, opts ...request.Option) (*ResizeInstanceOutput, error) {
	req, out := c.ResizeInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunInstancesCommon = "RunInstances"

// RunInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RunInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RunInstancesCommon for more information on using the RunInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RunInstancesCommonRequest method.
//    req, resp := client.RunInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RunInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRunInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RunInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RunInstancesCommon for usage and error information.
func (c *ECS) RunInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RunInstancesCommonRequest(input)
	return out, req.Send()
}

// RunInstancesCommonWithContext is the same as RunInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RunInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RunInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RunInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunInstances = "RunInstances"

// RunInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the RunInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RunInstances for more information on using the RunInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RunInstancesRequest method.
//    req, resp := client.RunInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RunInstancesRequest(input *RunInstancesInput) (req *request.Request, output *RunInstancesOutput) {
	op := &request.Operation{
		Name:       opRunInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RunInstancesInput{}
	}

	output = &RunInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RunInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RunInstances for usage and error information.
func (c *ECS) RunInstances(input *RunInstancesInput) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	return out, req.Send()
}

// RunInstancesWithContext is the same as RunInstances with the addition of
// the ability to pass a context and additional request options.
//
// See RunInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RunInstancesWithContext(ctx volcstack.Context, input *RunInstancesInput, opts ...request.Option) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstanceCommon = "StartInstance"

// StartInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartInstanceCommon for more information on using the StartInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartInstanceCommonRequest method.
//    req, resp := client.StartInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StartInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstanceCommon for usage and error information.
func (c *ECS) StartInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartInstanceCommonRequest(input)
	return out, req.Send()
}

// StartInstanceCommonWithContext is the same as StartInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstance = "StartInstance"

// StartInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartInstance for more information on using the StartInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartInstanceRequest method.
//    req, resp := client.StartInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstanceRequest(input *StartInstanceInput) (req *request.Request, output *StartInstanceOutput) {
	op := &request.Operation{
		Name:       opStartInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartInstanceInput{}
	}

	output = &StartInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StartInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstance for usage and error information.
func (c *ECS) StartInstance(input *StartInstanceInput) (*StartInstanceOutput, error) {
	req, out := c.StartInstanceRequest(input)
	return out, req.Send()
}

// StartInstanceWithContext is the same as StartInstance with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstanceWithContext(ctx volcstack.Context, input *StartInstanceInput, opts ...request.Option) (*StartInstanceOutput, error) {
	req, out := c.StartInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstancesCommon = "StartInstances"

// StartInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartInstancesCommon for more information on using the StartInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartInstancesCommonRequest method.
//    req, resp := client.StartInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StartInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstancesCommon for usage and error information.
func (c *ECS) StartInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartInstancesCommonRequest(input)
	return out, req.Send()
}

// StartInstancesCommonWithContext is the same as StartInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstances = "StartInstances"

// StartInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartInstances for more information on using the StartInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartInstancesRequest method.
//    req, resp := client.StartInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstancesRequest(input *StartInstancesInput) (req *request.Request, output *StartInstancesOutput) {
	op := &request.Operation{
		Name:       opStartInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartInstancesInput{}
	}

	output = &StartInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StartInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstances for usage and error information.
func (c *ECS) StartInstances(input *StartInstancesInput) (*StartInstancesOutput, error) {
	req, out := c.StartInstancesRequest(input)
	return out, req.Send()
}

// StartInstancesWithContext is the same as StartInstances with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstancesWithContext(ctx volcstack.Context, input *StartInstancesInput, opts ...request.Option) (*StartInstancesOutput, error) {
	req, out := c.StartInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstanceCommon = "StopInstance"

// StopInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopInstanceCommon for more information on using the StopInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StopInstanceCommonRequest method.
//    req, resp := client.StopInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StopInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstanceCommon for usage and error information.
func (c *ECS) StopInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopInstanceCommonRequest(input)
	return out, req.Send()
}

// StopInstanceCommonWithContext is the same as StopInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstance = "StopInstance"

// StopInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopInstance for more information on using the StopInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StopInstanceRequest method.
//    req, resp := client.StopInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstanceRequest(input *StopInstanceInput) (req *request.Request, output *StopInstanceOutput) {
	op := &request.Operation{
		Name:       opStopInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopInstanceInput{}
	}

	output = &StopInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StopInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstance for usage and error information.
func (c *ECS) StopInstance(input *StopInstanceInput) (*StopInstanceOutput, error) {
	req, out := c.StopInstanceRequest(input)
	return out, req.Send()
}

// StopInstanceWithContext is the same as StopInstance with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstanceWithContext(ctx volcstack.Context, input *StopInstanceInput, opts ...request.Option) (*StopInstanceOutput, error) {
	req, out := c.StopInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstancesCommon = "StopInstances"

// StopInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopInstancesCommon for more information on using the StopInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StopInstancesCommonRequest method.
//    req, resp := client.StopInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StopInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstancesCommon for usage and error information.
func (c *ECS) StopInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopInstancesCommonRequest(input)
	return out, req.Send()
}

// StopInstancesCommonWithContext is the same as StopInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstances = "StopInstances"

// StopInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopInstances for more information on using the StopInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StopInstancesRequest method.
//    req, resp := client.StopInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstancesRequest(input *StopInstancesInput) (req *request.Request, output *StopInstancesOutput) {
	op := &request.Operation{
		Name:       opStopInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopInstancesInput{}
	}

	output = &StopInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// StopInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstances for usage and error information.
func (c *ECS) StopInstances(input *StopInstancesInput) (*StopInstancesOutput, error) {
	req, out := c.StopInstancesRequest(input)
	return out, req.Send()
}

// StopInstancesWithContext is the same as StopInstances with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstancesWithContext(ctx volcstack.Context, input *StopInstancesInput, opts ...request.Option) (*StopInstancesOutput, error) {
	req, out := c.StopInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnbindAssumeRoleCommon = "UnbindAssumeRole"

// UnbindAssumeRoleCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the UnbindAssumeRoleCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UnbindAssumeRoleCommon for more information on using the UnbindAssumeRoleCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the UnbindAssumeRoleCommonRequest method.
//    req, resp := client.UnbindAssumeRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UnbindAssumeRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUnbindAssumeRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// UnbindAssumeRoleCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation UnbindAssumeRoleCommon for usage and error information.
func (c *ECS) UnbindAssumeRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UnbindAssumeRoleCommonRequest(input)
	return out, req.Send()
}

// UnbindAssumeRoleCommonWithContext is the same as UnbindAssumeRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindAssumeRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UnbindAssumeRoleCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UnbindAssumeRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnbindAssumeRole = "UnbindAssumeRole"

// UnbindAssumeRoleRequest generates a "volcstack/request.Request" representing the
// client's request for the UnbindAssumeRole operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UnbindAssumeRole for more information on using the UnbindAssumeRole
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the UnbindAssumeRoleRequest method.
//    req, resp := client.UnbindAssumeRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UnbindAssumeRoleRequest(input *UnbindAssumeRoleInput) (req *request.Request, output *UnbindAssumeRoleOutput) {
	op := &request.Operation{
		Name:       opUnbindAssumeRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UnbindAssumeRoleInput{}
	}

	output = &UnbindAssumeRoleOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// UnbindAssumeRole API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation UnbindAssumeRole for usage and error information.
func (c *ECS) UnbindAssumeRole(input *UnbindAssumeRoleInput) (*UnbindAssumeRoleOutput, error) {
	req, out := c.UnbindAssumeRoleRequest(input)
	return out, req.Send()
}

// UnbindAssumeRoleWithContext is the same as UnbindAssumeRole with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindAssumeRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UnbindAssumeRoleWithContext(ctx volcstack.Context, input *UnbindAssumeRoleInput, opts ...request.Option) (*UnbindAssumeRoleOutput, error) {
	req, out := c.UnbindAssumeRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type BindAssumeRoleInput struct {
	_ struct{} `type:"structure"`

	AssumeRole *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s BindAssumeRoleInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BindAssumeRoleInput) GoString() string {
	return s.String()
}

// SetAssumeRole sets the AssumeRole field's value.
func (s *BindAssumeRoleInput) SetAssumeRole(v string) *BindAssumeRoleInput {
	s.AssumeRole = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *BindAssumeRoleInput) SetInstanceId(v string) *BindAssumeRoleInput {
	s.InstanceId = &v
	return s
}

type BindAssumeRoleOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s BindAssumeRoleOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BindAssumeRoleOutput) GoString() string {
	return s.String()
}

type CpuOption struct {
	_ struct{} `type:"structure"`

	Ma *int64 `locationName:"ma" type:"integer"`
}

// String returns the string representation
func (s CpuOption) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CpuOption) GoString() string {
	return s.String()
}

// SetMa sets the Ma field's value.
func (s *CpuOption) SetMa(v int64) *CpuOption {
	s.Ma = &v
	return s
}

type CreateInstancesInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	AntiAffinityRuleId *string `type:"string"`

	AutoRenew *bool `type:"boolean"`

	AutoRenewPeriod *int64 `type:"integer"`

	Count *int64 `type:"integer"`

	CpuOptions []*CpuOption `type:"list"`

	DeploymentSetId *string `type:"string"`

	Description *string `type:"string"`

	DryRun *bool `type:"boolean"`

	Eip *Eip `type:"structure"`

	HostName *string `type:"string"`

	HpcClusterId *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	Ipv6Address []*string `type:"list"`

	Ipv6AddressCount *int64 `type:"integer"`

	Kerberos *bool `type:"boolean"`

	KeyPairName *string `type:"string"`

	NetworkInterfaces []*NetworkInterface `type:"list"`

	Password *string `type:"string"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`

	ProjectName *string `type:"string"`

	SecurityEnhancementStrategy *string `type:"string"`

	SuffixIndex *int64 `type:"integer"`

	TagList []*Tag `type:"list"`

	UniqueSuffix *bool `type:"boolean"`

	UserData *string `type:"string"`

	Volumes []*Volume `type:"list"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s CreateInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInstancesInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CreateInstancesInput) SetAccountId(v string) *CreateInstancesInput {
	s.AccountId = &v
	return s
}

// SetAntiAffinityRuleId sets the AntiAffinityRuleId field's value.
func (s *CreateInstancesInput) SetAntiAffinityRuleId(v string) *CreateInstancesInput {
	s.AntiAffinityRuleId = &v
	return s
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *CreateInstancesInput) SetAutoRenew(v bool) *CreateInstancesInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *CreateInstancesInput) SetAutoRenewPeriod(v int64) *CreateInstancesInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetCount sets the Count field's value.
func (s *CreateInstancesInput) SetCount(v int64) *CreateInstancesInput {
	s.Count = &v
	return s
}

// SetCpuOptions sets the CpuOptions field's value.
func (s *CreateInstancesInput) SetCpuOptions(v []*CpuOption) *CreateInstancesInput {
	s.CpuOptions = v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *CreateInstancesInput) SetDeploymentSetId(v string) *CreateInstancesInput {
	s.DeploymentSetId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateInstancesInput) SetDescription(v string) *CreateInstancesInput {
	s.Description = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *CreateInstancesInput) SetDryRun(v bool) *CreateInstancesInput {
	s.DryRun = &v
	return s
}

// SetEip sets the Eip field's value.
func (s *CreateInstancesInput) SetEip(v *Eip) *CreateInstancesInput {
	s.Eip = v
	return s
}

// SetHostName sets the HostName field's value.
func (s *CreateInstancesInput) SetHostName(v string) *CreateInstancesInput {
	s.HostName = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *CreateInstancesInput) SetHpcClusterId(v string) *CreateInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *CreateInstancesInput) SetImageId(v string) *CreateInstancesInput {
	s.ImageId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *CreateInstancesInput) SetInstanceChargeType(v string) *CreateInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *CreateInstancesInput) SetInstanceName(v string) *CreateInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *CreateInstancesInput) SetInstanceType(v string) *CreateInstancesInput {
	s.InstanceType = &v
	return s
}

// SetIpv6Address sets the Ipv6Address field's value.
func (s *CreateInstancesInput) SetIpv6Address(v []*string) *CreateInstancesInput {
	s.Ipv6Address = v
	return s
}

// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
func (s *CreateInstancesInput) SetIpv6AddressCount(v int64) *CreateInstancesInput {
	s.Ipv6AddressCount = &v
	return s
}

// SetKerberos sets the Kerberos field's value.
func (s *CreateInstancesInput) SetKerberos(v bool) *CreateInstancesInput {
	s.Kerberos = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *CreateInstancesInput) SetKeyPairName(v string) *CreateInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfaces sets the NetworkInterfaces field's value.
func (s *CreateInstancesInput) SetNetworkInterfaces(v []*NetworkInterface) *CreateInstancesInput {
	s.NetworkInterfaces = v
	return s
}

// SetPassword sets the Password field's value.
func (s *CreateInstancesInput) SetPassword(v string) *CreateInstancesInput {
	s.Password = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *CreateInstancesInput) SetPeriod(v int64) *CreateInstancesInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *CreateInstancesInput) SetPeriodUnit(v string) *CreateInstancesInput {
	s.PeriodUnit = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateInstancesInput) SetProjectName(v string) *CreateInstancesInput {
	s.ProjectName = &v
	return s
}

// SetSecurityEnhancementStrategy sets the SecurityEnhancementStrategy field's value.
func (s *CreateInstancesInput) SetSecurityEnhancementStrategy(v string) *CreateInstancesInput {
	s.SecurityEnhancementStrategy = &v
	return s
}

// SetSuffixIndex sets the SuffixIndex field's value.
func (s *CreateInstancesInput) SetSuffixIndex(v int64) *CreateInstancesInput {
	s.SuffixIndex = &v
	return s
}

// SetTagList sets the TagList field's value.
func (s *CreateInstancesInput) SetTagList(v []*Tag) *CreateInstancesInput {
	s.TagList = v
	return s
}

// SetUniqueSuffix sets the UniqueSuffix field's value.
func (s *CreateInstancesInput) SetUniqueSuffix(v bool) *CreateInstancesInput {
	s.UniqueSuffix = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *CreateInstancesInput) SetUserData(v string) *CreateInstancesInput {
	s.UserData = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *CreateInstancesInput) SetVolumes(v []*Volume) *CreateInstancesInput {
	s.Volumes = v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *CreateInstancesInput) SetZoneId(v string) *CreateInstancesInput {
	s.ZoneId = &v
	return s
}

type CreateInstancesOutput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `type:"list"`

	PreorderNos []*string `type:"list"`
}

// String returns the string representation
func (s CreateInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInstancesOutput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *CreateInstancesOutput) SetInstanceIds(v []*string) *CreateInstancesOutput {
	s.InstanceIds = v
	return s
}

// SetPreorderNos sets the PreorderNos field's value.
func (s *CreateInstancesOutput) SetPreorderNos(v []*string) *CreateInstancesOutput {
	s.PreorderNos = v
	return s
}

type DeleteInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	Force *bool `type:"boolean"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *DeleteInstanceInput) SetDryRun(v bool) *DeleteInstanceInput {
	s.DryRun = &v
	return s
}

// SetForce sets the Force field's value.
func (s *DeleteInstanceInput) SetForce(v bool) *DeleteInstanceInput {
	s.Force = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteInstanceInput) SetInstanceId(v string) *DeleteInstanceInput {
	s.InstanceId = &v
	return s
}

type DeleteInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderNo *string `type:"string"`
}

// String returns the string representation
func (s DeleteInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteInstanceOutput) SetInstanceId(v string) *DeleteInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNo sets the OrderNo field's value.
func (s *DeleteInstanceOutput) SetOrderNo(v string) *DeleteInstanceOutput {
	s.OrderNo = &v
	return s
}

type DeleteInstancesInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	Force *bool `type:"boolean"`

	InstanceIds []*string `type:"list"`
}

// String returns the string representation
func (s DeleteInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstancesInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *DeleteInstancesInput) SetDryRun(v bool) *DeleteInstancesInput {
	s.DryRun = &v
	return s
}

// SetForce sets the Force field's value.
func (s *DeleteInstancesInput) SetForce(v bool) *DeleteInstancesInput {
	s.Force = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DeleteInstancesInput) SetInstanceIds(v []*string) *DeleteInstancesInput {
	s.InstanceIds = v
	return s
}

type DeleteInstancesOutput struct {
	_ struct{} `type:"structure"`

	OperationDetails []*OperationDetail `type:"list"`
}

// String returns the string representation
func (s DeleteInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstancesOutput) GoString() string {
	return s.String()
}

// SetOperationDetails sets the OperationDetails field's value.
func (s *DeleteInstancesOutput) SetOperationDetails(v []*OperationDetail) *DeleteInstancesOutput {
	s.OperationDetails = v
	return s
}

type DescribeInstanceECSTerminalUrlInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceECSTerminalUrlInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceECSTerminalUrlInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceECSTerminalUrlInput) SetInstanceId(v string) *DescribeInstanceECSTerminalUrlInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceECSTerminalUrlOutput struct {
	_ struct{} `type:"structure"`

	EcsTerminalUrl *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceECSTerminalUrlOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceECSTerminalUrlOutput) GoString() string {
	return s.String()
}

// SetEcsTerminalUrl sets the EcsTerminalUrl field's value.
func (s *DescribeInstanceECSTerminalUrlOutput) SetEcsTerminalUrl(v string) *DescribeInstanceECSTerminalUrlOutput {
	s.EcsTerminalUrl = &v
	return s
}

type DescribeInstanceVncUrlInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceVncUrlInput) SetInstanceId(v string) *DescribeInstanceVncUrlInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceVncUrlOutput struct {
	_ struct{} `type:"structure"`

	VncUrl *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlOutput) GoString() string {
	return s.String()
}

// SetVncUrl sets the VncUrl field's value.
func (s *DescribeInstanceVncUrlOutput) SetVncUrl(v string) *DescribeInstanceVncUrlOutput {
	s.VncUrl = &v
	return s
}

type DescribeInstancesInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	DeploymentSetIds []*string `type:"list"`

	HpcClusterId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceIds []*string `type:"list"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	KeyPairName *string `type:"string"`

	NetworkInterfacesId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	PrimaryIpAddress *string `type:"string"`

	ProjectName *string `type:"string"`

	Status *string `type:"string"`

	TagList []*Tag `type:"list"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeInstancesInput) SetAccountId(v string) *DescribeInstancesInput {
	s.AccountId = &v
	return s
}

// SetDeploymentSetIds sets the DeploymentSetIds field's value.
func (s *DescribeInstancesInput) SetDeploymentSetIds(v []*string) *DescribeInstancesInput {
	s.DeploymentSetIds = v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DescribeInstancesInput) SetHpcClusterId(v string) *DescribeInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *DescribeInstancesInput) SetInstanceChargeType(v string) *DescribeInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DescribeInstancesInput) SetInstanceIds(v []*string) *DescribeInstancesInput {
	s.InstanceIds = v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *DescribeInstancesInput) SetInstanceName(v string) *DescribeInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeInstancesInput) SetInstanceType(v string) *DescribeInstancesInput {
	s.InstanceType = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DescribeInstancesInput) SetKeyPairName(v string) *DescribeInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfacesId sets the NetworkInterfacesId field's value.
func (s *DescribeInstancesInput) SetNetworkInterfacesId(v string) *DescribeInstancesInput {
	s.NetworkInterfacesId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstancesInput) SetPageNumber(v int64) *DescribeInstancesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstancesInput) SetPageSize(v int64) *DescribeInstancesInput {
	s.PageSize = &v
	return s
}

// SetPrimaryIpAddress sets the PrimaryIpAddress field's value.
func (s *DescribeInstancesInput) SetPrimaryIpAddress(v string) *DescribeInstancesInput {
	s.PrimaryIpAddress = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeInstancesInput) SetProjectName(v string) *DescribeInstancesInput {
	s.ProjectName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeInstancesInput) SetStatus(v string) *DescribeInstancesInput {
	s.Status = &v
	return s
}

// SetTagList sets the TagList field's value.
func (s *DescribeInstancesInput) SetTagList(v []*Tag) *DescribeInstancesInput {
	s.TagList = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeInstancesInput) SetVpcId(v string) *DescribeInstancesInput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeInstancesInput) SetZoneId(v string) *DescribeInstancesInput {
	s.ZoneId = &v
	return s
}

type DescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	Instances []*Instance `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetInstances sets the Instances field's value.
func (s *DescribeInstancesOutput) SetInstances(v []*Instance) *DescribeInstancesOutput {
	s.Instances = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstancesOutput) SetPageNumber(v int64) *DescribeInstancesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstancesOutput) SetPageSize(v int64) *DescribeInstancesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeInstancesOutput) SetTotalCount(v int64) *DescribeInstancesOutput {
	s.TotalCount = &v
	return s
}

type DescribeUserDataInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeUserDataInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeUserDataInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeUserDataInput) SetInstanceId(v string) *DescribeUserDataInput {
	s.InstanceId = &v
	return s
}

type DescribeUserDataOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s DescribeUserDataOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeUserDataOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeUserDataOutput) SetInstanceId(v string) *DescribeUserDataOutput {
	s.InstanceId = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *DescribeUserDataOutput) SetUserData(v string) *DescribeUserDataOutput {
	s.UserData = &v
	return s
}

type Eip struct {
	_ struct{} `type:"structure"`

	Bandwidth *int64 `type:"integer"`

	BillingType *int64 `type:"integer"`

	ISP *string `type:"string"`

	Id *string `type:"string"`
}

// String returns the string representation
func (s Eip) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s Eip) GoString() string {
	return s.String()
}

// SetBandwidth sets the Bandwidth field's value.
func (s *Eip) SetBandwidth(v int64) *Eip {
	s.Bandwidth = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *Eip) SetBillingType(v int64) *Eip {
	s.BillingType = &v
	return s
}

// SetISP sets the ISP field's value.
func (s *Eip) SetISP(v string) *Eip {
	s.ISP = &v
	return s
}

// SetId sets the Id field's value.
func (s *Eip) SetId(v string) *Eip {
	s.Id = &v
	return s
}

type GetInstanceConsoleInput struct {
	_ struct{} `type:"structure"`

	Id *string `type:"string"`

	Type *string `type:"string"`
}

// String returns the string representation
func (s GetInstanceConsoleInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceConsoleInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *GetInstanceConsoleInput) SetId(v string) *GetInstanceConsoleInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *GetInstanceConsoleInput) SetType(v string) *GetInstanceConsoleInput {
	s.Type = &v
	return s
}

type GetInstanceConsoleOutput struct {
	_ struct{} `type:"structure"`

	ConsoleType *string `type:"string"`

	ConsoleURL *string `type:"string"`
}

// String returns the string representation
func (s GetInstanceConsoleOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceConsoleOutput) GoString() string {
	return s.String()
}

// SetConsoleType sets the ConsoleType field's value.
func (s *GetInstanceConsoleOutput) SetConsoleType(v string) *GetInstanceConsoleOutput {
	s.ConsoleType = &v
	return s
}

// SetConsoleURL sets the ConsoleURL field's value.
func (s *GetInstanceConsoleOutput) SetConsoleURL(v string) *GetInstanceConsoleOutput {
	s.ConsoleURL = &v
	return s
}

type InnerReplaceSystemVolumeInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceId *string `type:"string"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumeInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *InnerReplaceSystemVolumeInput) SetImageId(v string) *InnerReplaceSystemVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *InnerReplaceSystemVolumeInput) SetInstanceId(v string) *InnerReplaceSystemVolumeInput {
	s.InstanceId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *InnerReplaceSystemVolumeInput) SetKeyPairName(v string) *InnerReplaceSystemVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *InnerReplaceSystemVolumeInput) SetPassword(v string) *InnerReplaceSystemVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *InnerReplaceSystemVolumeInput) SetSize(v string) *InnerReplaceSystemVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *InnerReplaceSystemVolumeInput) SetUserData(v string) *InnerReplaceSystemVolumeInput {
	s.UserData = &v
	return s
}

type InnerReplaceSystemVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumeOutput) GoString() string {
	return s.String()
}

type InnerReplaceSystemVolumesInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumesInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *InnerReplaceSystemVolumesInput) SetImageId(v string) *InnerReplaceSystemVolumesInput {
	s.ImageId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *InnerReplaceSystemVolumesInput) SetInstanceIds(v []*string) *InnerReplaceSystemVolumesInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *InnerReplaceSystemVolumesInput) SetKeyPairName(v string) *InnerReplaceSystemVolumesInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *InnerReplaceSystemVolumesInput) SetPassword(v string) *InnerReplaceSystemVolumesInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *InnerReplaceSystemVolumesInput) SetSize(v string) *InnerReplaceSystemVolumesInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *InnerReplaceSystemVolumesInput) SetUserData(v string) *InnerReplaceSystemVolumesInput {
	s.UserData = &v
	return s
}

type InnerReplaceSystemVolumesOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumesOutput) GoString() string {
	return s.String()
}

type Instance struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	DeploymentSetId *string `type:"string"`

	Description *string `type:"string"`

	HostName *string `type:"string"`

	Id *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	InstanceTypeId *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`

	NetworkInterfaces []*NetworkInterface `type:"list"`

	RdmaIpAddresses []*string `type:"list"`

	Status *string `type:"string"`

	StoppedMode *string `type:"string"`

	Tags []*Tag `type:"list"`

	UpdatedAt *string `type:"string"`

	UserData *string `type:"string"`

	Volumes []*Volume `type:"list"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s Instance) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s Instance) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *Instance) SetCreatedAt(v string) *Instance {
	s.CreatedAt = &v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *Instance) SetDeploymentSetId(v string) *Instance {
	s.DeploymentSetId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *Instance) SetDescription(v string) *Instance {
	s.Description = &v
	return s
}

// SetHostName sets the HostName field's value.
func (s *Instance) SetHostName(v string) *Instance {
	s.HostName = &v
	return s
}

// SetId sets the Id field's value.
func (s *Instance) SetId(v string) *Instance {
	s.Id = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *Instance) SetImageId(v string) *Instance {
	s.ImageId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *Instance) SetInstanceChargeType(v string) *Instance {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *Instance) SetInstanceName(v string) *Instance {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *Instance) SetInstanceType(v string) *Instance {
	s.InstanceType = &v
	return s
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *Instance) SetInstanceTypeId(v string) *Instance {
	s.InstanceTypeId = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *Instance) SetKeyPairId(v string) *Instance {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *Instance) SetKeyPairName(v string) *Instance {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfaces sets the NetworkInterfaces field's value.
func (s *Instance) SetNetworkInterfaces(v []*NetworkInterface) *Instance {
	s.NetworkInterfaces = v
	return s
}

// SetRdmaIpAddresses sets the RdmaIpAddresses field's value.
func (s *Instance) SetRdmaIpAddresses(v []*string) *Instance {
	s.RdmaIpAddresses = v
	return s
}

// SetStatus sets the Status field's value.
func (s *Instance) SetStatus(v string) *Instance {
	s.Status = &v
	return s
}

// SetStoppedMode sets the StoppedMode field's value.
func (s *Instance) SetStoppedMode(v string) *Instance {
	s.StoppedMode = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *Instance) SetTags(v []*Tag) *Instance {
	s.Tags = v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *Instance) SetUpdatedAt(v string) *Instance {
	s.UpdatedAt = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *Instance) SetUserData(v string) *Instance {
	s.UserData = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *Instance) SetVolumes(v []*Volume) *Instance {
	s.Volumes = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *Instance) SetVpcId(v string) *Instance {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *Instance) SetZoneId(v string) *Instance {
	s.ZoneId = &v
	return s
}

type ListAssumeRolesInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ListAssumeRolesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAssumeRolesInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListAssumeRolesInput) SetInstanceId(v string) *ListAssumeRolesInput {
	s.InstanceId = &v
	return s
}

type ListAssumeRolesOutput struct {
	_ struct{} `type:"structure"`

	AssumeRoles []*string `type:"list"`
}

// String returns the string representation
func (s ListAssumeRolesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAssumeRolesOutput) GoString() string {
	return s.String()
}

// SetAssumeRoles sets the AssumeRoles field's value.
func (s *ListAssumeRolesOutput) SetAssumeRoles(v []*string) *ListAssumeRolesOutput {
	s.AssumeRoles = v
	return s
}

type ModifyInstanceAttributeInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	Password *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceAttributeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceAttributeInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *ModifyInstanceAttributeInput) SetDescription(v string) *ModifyInstanceAttributeInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceAttributeInput) SetInstanceId(v string) *ModifyInstanceAttributeInput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *ModifyInstanceAttributeInput) SetInstanceName(v string) *ModifyInstanceAttributeInput {
	s.InstanceName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ModifyInstanceAttributeInput) SetPassword(v string) *ModifyInstanceAttributeInput {
	s.Password = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ModifyInstanceAttributeInput) SetUserData(v string) *ModifyInstanceAttributeInput {
	s.UserData = &v
	return s
}

type ModifyInstanceAttributeOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderNo *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceAttributeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceAttributeOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceAttributeOutput) SetInstanceId(v string) *ModifyInstanceAttributeOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNo sets the OrderNo field's value.
func (s *ModifyInstanceAttributeOutput) SetOrderNo(v string) *ModifyInstanceAttributeOutput {
	s.OrderNo = &v
	return s
}

type ModifyInstanceChargeTypeInput struct {
	_ struct{} `type:"structure"`

	AutoPay *bool `type:"boolean"`

	AutoRenew *bool `type:"boolean"`

	DryRun *bool `type:"boolean"`

	IncludeDataVolumes *bool `type:"boolean"`

	InstanceChargeType *string `type:"string"`

	InstanceIds []*string `type:"list"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeInput) GoString() string {
	return s.String()
}

// SetAutoPay sets the AutoPay field's value.
func (s *ModifyInstanceChargeTypeInput) SetAutoPay(v bool) *ModifyInstanceChargeTypeInput {
	s.AutoPay = &v
	return s
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *ModifyInstanceChargeTypeInput) SetAutoRenew(v bool) *ModifyInstanceChargeTypeInput {
	s.AutoRenew = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *ModifyInstanceChargeTypeInput) SetDryRun(v bool) *ModifyInstanceChargeTypeInput {
	s.DryRun = &v
	return s
}

// SetIncludeDataVolumes sets the IncludeDataVolumes field's value.
func (s *ModifyInstanceChargeTypeInput) SetIncludeDataVolumes(v bool) *ModifyInstanceChargeTypeInput {
	s.IncludeDataVolumes = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *ModifyInstanceChargeTypeInput) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ModifyInstanceChargeTypeInput) SetInstanceIds(v []*string) *ModifyInstanceChargeTypeInput {
	s.InstanceIds = v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ModifyInstanceChargeTypeInput) SetPeriod(v int64) *ModifyInstanceChargeTypeInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ModifyInstanceChargeTypeInput) SetPeriodUnit(v string) *ModifyInstanceChargeTypeInput {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceChargeTypeOutput struct {
	_ struct{} `type:"structure"`

	OrderId *string `type:"string"`

	VolumeOrderId *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *ModifyInstanceChargeTypeOutput) SetOrderId(v string) *ModifyInstanceChargeTypeOutput {
	s.OrderId = &v
	return s
}

// SetVolumeOrderId sets the VolumeOrderId field's value.
func (s *ModifyInstanceChargeTypeOutput) SetVolumeOrderId(v string) *ModifyInstanceChargeTypeOutput {
	s.VolumeOrderId = &v
	return s
}

type ModifyInstanceSpecInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	InstanceType *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceSpecInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceSpecInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *ModifyInstanceSpecInput) SetDryRun(v bool) *ModifyInstanceSpecInput {
	s.DryRun = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceSpecInput) SetInstanceId(v string) *ModifyInstanceSpecInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ModifyInstanceSpecInput) SetInstanceType(v string) *ModifyInstanceSpecInput {
	s.InstanceType = &v
	return s
}

type ModifyInstanceSpecOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderNo *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceSpecOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceSpecOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceSpecOutput) SetInstanceId(v string) *ModifyInstanceSpecOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNo sets the OrderNo field's value.
func (s *ModifyInstanceSpecOutput) SetOrderNo(v string) *ModifyInstanceSpecOutput {
	s.OrderNo = &v
	return s
}

type NetworkInterface struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	EipAddress *string `type:"string"`

	Ipv6Sets []*string `type:"list"`

	MacAddress *string `type:"string"`

	NetworkInterfaceId *string `type:"string"`

	NetworkInterfaceName *string `type:"string"`

	PrimaryIpAddress *string `type:"string"`

	PrivateIpAddresses []*string `type:"list"`

	SecurityGroupIds []*string `type:"list"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`

	Type *string `type:"string"`

	VpcId *string `type:"string"`

	VpcName *string `type:"string"`
}

// String returns the string representation
func (s NetworkInterface) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NetworkInterface) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *NetworkInterface) SetDescription(v string) *NetworkInterface {
	s.Description = &v
	return s
}

// SetEipAddress sets the EipAddress field's value.
func (s *NetworkInterface) SetEipAddress(v string) *NetworkInterface {
	s.EipAddress = &v
	return s
}

// SetIpv6Sets sets the Ipv6Sets field's value.
func (s *NetworkInterface) SetIpv6Sets(v []*string) *NetworkInterface {
	s.Ipv6Sets = v
	return s
}

// SetMacAddress sets the MacAddress field's value.
func (s *NetworkInterface) SetMacAddress(v string) *NetworkInterface {
	s.MacAddress = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *NetworkInterface) SetNetworkInterfaceId(v string) *NetworkInterface {
	s.NetworkInterfaceId = &v
	return s
}

// SetNetworkInterfaceName sets the NetworkInterfaceName field's value.
func (s *NetworkInterface) SetNetworkInterfaceName(v string) *NetworkInterface {
	s.NetworkInterfaceName = &v
	return s
}

// SetPrimaryIpAddress sets the PrimaryIpAddress field's value.
func (s *NetworkInterface) SetPrimaryIpAddress(v string) *NetworkInterface {
	s.PrimaryIpAddress = &v
	return s
}

// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
func (s *NetworkInterface) SetPrivateIpAddresses(v []*string) *NetworkInterface {
	s.PrivateIpAddresses = v
	return s
}

// SetSecurityGroupIds sets the SecurityGroupIds field's value.
func (s *NetworkInterface) SetSecurityGroupIds(v []*string) *NetworkInterface {
	s.SecurityGroupIds = v
	return s
}

// SetStatus sets the Status field's value.
func (s *NetworkInterface) SetStatus(v string) *NetworkInterface {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *NetworkInterface) SetSubnetId(v string) *NetworkInterface {
	s.SubnetId = &v
	return s
}

// SetType sets the Type field's value.
func (s *NetworkInterface) SetType(v string) *NetworkInterface {
	s.Type = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *NetworkInterface) SetVpcId(v string) *NetworkInterface {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *NetworkInterface) SetVpcName(v string) *NetworkInterface {
	s.VpcName = &v
	return s
}

type OperationDetail struct {
	_ struct{} `type:"structure"`

	Error *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s OperationDetail) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationDetail) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *OperationDetail) SetError(v string) *OperationDetail {
	s.Error = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *OperationDetail) SetInstanceId(v string) *OperationDetail {
	s.InstanceId = &v
	return s
}

type RebootInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ForceStop *bool `type:"boolean"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s RebootInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *RebootInstanceInput) SetDryRun(v bool) *RebootInstanceInput {
	s.DryRun = &v
	return s
}

// SetForceStop sets the ForceStop field's value.
func (s *RebootInstanceInput) SetForceStop(v bool) *RebootInstanceInput {
	s.ForceStop = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RebootInstanceInput) SetInstanceId(v string) *RebootInstanceInput {
	s.InstanceId = &v
	return s
}

type RebootInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderNo *string `type:"string"`
}

// String returns the string representation
func (s RebootInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *RebootInstanceOutput) SetInstanceId(v string) *RebootInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNo sets the OrderNo field's value.
func (s *RebootInstanceOutput) SetOrderNo(v string) *RebootInstanceOutput {
	s.OrderNo = &v
	return s
}

type RebootInstancesInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ForceStop *bool `type:"boolean"`

	InstanceIds []*string `type:"list"`
}

// String returns the string representation
func (s RebootInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstancesInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *RebootInstancesInput) SetDryRun(v bool) *RebootInstancesInput {
	s.DryRun = &v
	return s
}

// SetForceStop sets the ForceStop field's value.
func (s *RebootInstancesInput) SetForceStop(v bool) *RebootInstancesInput {
	s.ForceStop = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *RebootInstancesInput) SetInstanceIds(v []*string) *RebootInstancesInput {
	s.InstanceIds = v
	return s
}

type RebootInstancesOutput struct {
	_ struct{} `type:"structure"`

	OperationDetails []*OperationDetail `type:"list"`
}

// String returns the string representation
func (s RebootInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstancesOutput) GoString() string {
	return s.String()
}

// SetOperationDetails sets the OperationDetails field's value.
func (s *RebootInstancesOutput) SetOperationDetails(v []*OperationDetail) *RebootInstancesOutput {
	s.OperationDetails = v
	return s
}

type RenewInstanceInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	InstanceId *string `type:"string"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s RenewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewInstanceInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *RenewInstanceInput) SetClientToken(v string) *RenewInstanceInput {
	s.ClientToken = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RenewInstanceInput) SetInstanceId(v string) *RenewInstanceInput {
	s.InstanceId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RenewInstanceInput) SetPeriod(v int64) *RenewInstanceInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewInstanceInput) SetPeriodUnit(v string) *RenewInstanceInput {
	s.PeriodUnit = &v
	return s
}

type RenewInstanceOutput struct {
	_ struct{} `type:"structure"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s RenewInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewInstanceOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *RenewInstanceOutput) SetOrderId(v string) *RenewInstanceOutput {
	s.OrderId = &v
	return s
}

type ReplaceSystemVolumeInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ImageId *string `type:"string"`

	InstanceId *string `type:"string"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ReplaceSystemVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemVolumeInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *ReplaceSystemVolumeInput) SetDryRun(v bool) *ReplaceSystemVolumeInput {
	s.DryRun = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *ReplaceSystemVolumeInput) SetImageId(v string) *ReplaceSystemVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ReplaceSystemVolumeInput) SetInstanceId(v string) *ReplaceSystemVolumeInput {
	s.InstanceId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ReplaceSystemVolumeInput) SetKeyPairName(v string) *ReplaceSystemVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ReplaceSystemVolumeInput) SetPassword(v string) *ReplaceSystemVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *ReplaceSystemVolumeInput) SetSize(v string) *ReplaceSystemVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ReplaceSystemVolumeInput) SetUserData(v string) *ReplaceSystemVolumeInput {
	s.UserData = &v
	return s
}

type ReplaceSystemVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ReplaceSystemVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemVolumeOutput) GoString() string {
	return s.String()
}

type ReplaceSystemsVolumeInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ReplaceSystemsVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemsVolumeInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *ReplaceSystemsVolumeInput) SetImageId(v string) *ReplaceSystemsVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ReplaceSystemsVolumeInput) SetInstanceIds(v []*string) *ReplaceSystemsVolumeInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ReplaceSystemsVolumeInput) SetKeyPairName(v string) *ReplaceSystemsVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ReplaceSystemsVolumeInput) SetPassword(v string) *ReplaceSystemsVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *ReplaceSystemsVolumeInput) SetSize(v string) *ReplaceSystemsVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ReplaceSystemsVolumeInput) SetUserData(v string) *ReplaceSystemsVolumeInput {
	s.UserData = &v
	return s
}

type ReplaceSystemsVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ReplaceSystemsVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemsVolumeOutput) GoString() string {
	return s.String()
}

type ResetAuthenticationInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	Password *string `type:"string"`

	Pubkey *string `type:"string"`
}

// String returns the string representation
func (s ResetAuthenticationInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAuthenticationInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResetAuthenticationInput) SetInstanceId(v string) *ResetAuthenticationInput {
	s.InstanceId = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ResetAuthenticationInput) SetPassword(v string) *ResetAuthenticationInput {
	s.Password = &v
	return s
}

// SetPubkey sets the Pubkey field's value.
func (s *ResetAuthenticationInput) SetPubkey(v string) *ResetAuthenticationInput {
	s.Pubkey = &v
	return s
}

type ResetAuthenticationOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ResetAuthenticationOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAuthenticationOutput) GoString() string {
	return s.String()
}

type ResizeInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	InstanceType *string `type:"string"`
}

// String returns the string representation
func (s ResizeInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResizeInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *ResizeInstanceInput) SetDryRun(v bool) *ResizeInstanceInput {
	s.DryRun = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResizeInstanceInput) SetInstanceId(v string) *ResizeInstanceInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ResizeInstanceInput) SetInstanceType(v string) *ResizeInstanceInput {
	s.InstanceType = &v
	return s
}

type ResizeInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderNo *string `type:"string"`
}

// String returns the string representation
func (s ResizeInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResizeInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResizeInstanceOutput) SetInstanceId(v string) *ResizeInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNo sets the OrderNo field's value.
func (s *ResizeInstanceOutput) SetOrderNo(v string) *ResizeInstanceOutput {
	s.OrderNo = &v
	return s
}

type RunInstancesInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	AntiAffinityRuleId *string `type:"string"`

	AutoRenew *bool `type:"boolean"`

	AutoRenewPeriod *int64 `type:"integer"`

	Count *int64 `type:"integer"`

	CpuOptions []*CpuOption `type:"list"`

	DeploymentSetId *string `type:"string"`

	Description *string `type:"string"`

	DryRun *bool `type:"boolean"`

	Eip *Eip `type:"structure"`

	HostName *string `type:"string"`

	HpcClusterId *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	Ipv6Address []*string `type:"list"`

	Ipv6AddressCount *int64 `type:"integer"`

	Kerberos *bool `type:"boolean"`

	KeyPairName *string `type:"string"`

	NetworkInterfaces []*NetworkInterface `type:"list"`

	Password *string `type:"string"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`

	ProjectName *string `type:"string"`

	SecurityEnhancementStrategy *string `type:"string"`

	SuffixIndex *int64 `type:"integer"`

	TagList []*Tag `type:"list"`

	UniqueSuffix *bool `type:"boolean"`

	UserData *string `type:"string"`

	Volumes []*Volume `type:"list"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s RunInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *RunInstancesInput) SetAccountId(v string) *RunInstancesInput {
	s.AccountId = &v
	return s
}

// SetAntiAffinityRuleId sets the AntiAffinityRuleId field's value.
func (s *RunInstancesInput) SetAntiAffinityRuleId(v string) *RunInstancesInput {
	s.AntiAffinityRuleId = &v
	return s
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *RunInstancesInput) SetAutoRenew(v bool) *RunInstancesInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *RunInstancesInput) SetAutoRenewPeriod(v int64) *RunInstancesInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetCount sets the Count field's value.
func (s *RunInstancesInput) SetCount(v int64) *RunInstancesInput {
	s.Count = &v
	return s
}

// SetCpuOptions sets the CpuOptions field's value.
func (s *RunInstancesInput) SetCpuOptions(v []*CpuOption) *RunInstancesInput {
	s.CpuOptions = v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *RunInstancesInput) SetDeploymentSetId(v string) *RunInstancesInput {
	s.DeploymentSetId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *RunInstancesInput) SetDescription(v string) *RunInstancesInput {
	s.Description = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *RunInstancesInput) SetDryRun(v bool) *RunInstancesInput {
	s.DryRun = &v
	return s
}

// SetEip sets the Eip field's value.
func (s *RunInstancesInput) SetEip(v *Eip) *RunInstancesInput {
	s.Eip = v
	return s
}

// SetHostName sets the HostName field's value.
func (s *RunInstancesInput) SetHostName(v string) *RunInstancesInput {
	s.HostName = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *RunInstancesInput) SetHpcClusterId(v string) *RunInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *RunInstancesInput) SetImageId(v string) *RunInstancesInput {
	s.ImageId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *RunInstancesInput) SetInstanceChargeType(v string) *RunInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *RunInstancesInput) SetInstanceName(v string) *RunInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *RunInstancesInput) SetInstanceType(v string) *RunInstancesInput {
	s.InstanceType = &v
	return s
}

// SetIpv6Address sets the Ipv6Address field's value.
func (s *RunInstancesInput) SetIpv6Address(v []*string) *RunInstancesInput {
	s.Ipv6Address = v
	return s
}

// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
func (s *RunInstancesInput) SetIpv6AddressCount(v int64) *RunInstancesInput {
	s.Ipv6AddressCount = &v
	return s
}

// SetKerberos sets the Kerberos field's value.
func (s *RunInstancesInput) SetKerberos(v bool) *RunInstancesInput {
	s.Kerberos = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *RunInstancesInput) SetKeyPairName(v string) *RunInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfaces sets the NetworkInterfaces field's value.
func (s *RunInstancesInput) SetNetworkInterfaces(v []*NetworkInterface) *RunInstancesInput {
	s.NetworkInterfaces = v
	return s
}

// SetPassword sets the Password field's value.
func (s *RunInstancesInput) SetPassword(v string) *RunInstancesInput {
	s.Password = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RunInstancesInput) SetPeriod(v int64) *RunInstancesInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RunInstancesInput) SetPeriodUnit(v string) *RunInstancesInput {
	s.PeriodUnit = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *RunInstancesInput) SetProjectName(v string) *RunInstancesInput {
	s.ProjectName = &v
	return s
}

// SetSecurityEnhancementStrategy sets the SecurityEnhancementStrategy field's value.
func (s *RunInstancesInput) SetSecurityEnhancementStrategy(v string) *RunInstancesInput {
	s.SecurityEnhancementStrategy = &v
	return s
}

// SetSuffixIndex sets the SuffixIndex field's value.
func (s *RunInstancesInput) SetSuffixIndex(v int64) *RunInstancesInput {
	s.SuffixIndex = &v
	return s
}

// SetTagList sets the TagList field's value.
func (s *RunInstancesInput) SetTagList(v []*Tag) *RunInstancesInput {
	s.TagList = v
	return s
}

// SetUniqueSuffix sets the UniqueSuffix field's value.
func (s *RunInstancesInput) SetUniqueSuffix(v bool) *RunInstancesInput {
	s.UniqueSuffix = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *RunInstancesInput) SetUserData(v string) *RunInstancesInput {
	s.UserData = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *RunInstancesInput) SetVolumes(v []*Volume) *RunInstancesInput {
	s.Volumes = v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *RunInstancesInput) SetZoneId(v string) *RunInstancesInput {
	s.ZoneId = &v
	return s
}

type RunInstancesOutput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `type:"list"`

	PreorderNos []*string `type:"list"`
}

// String returns the string representation
func (s RunInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesOutput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *RunInstancesOutput) SetInstanceIds(v []*string) *RunInstancesOutput {
	s.InstanceIds = v
	return s
}

// SetPreorderNos sets the PreorderNos field's value.
func (s *RunInstancesOutput) SetPreorderNos(v []*string) *RunInstancesOutput {
	s.PreorderNos = v
	return s
}

type StartInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s StartInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *StartInstanceInput) SetDryRun(v bool) *StartInstanceInput {
	s.DryRun = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *StartInstanceInput) SetInstanceId(v string) *StartInstanceInput {
	s.InstanceId = &v
	return s
}

type StartInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderNo *string `type:"string"`
}

// String returns the string representation
func (s StartInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *StartInstanceOutput) SetInstanceId(v string) *StartInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNo sets the OrderNo field's value.
func (s *StartInstanceOutput) SetOrderNo(v string) *StartInstanceOutput {
	s.OrderNo = &v
	return s
}

type StartInstancesInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	InstanceIds []*string `type:"list"`
}

// String returns the string representation
func (s StartInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstancesInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *StartInstancesInput) SetDryRun(v bool) *StartInstancesInput {
	s.DryRun = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *StartInstancesInput) SetInstanceIds(v []*string) *StartInstancesInput {
	s.InstanceIds = v
	return s
}

type StartInstancesOutput struct {
	_ struct{} `type:"structure"`

	OperationDetails []*OperationDetail `type:"list"`
}

// String returns the string representation
func (s StartInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstancesOutput) GoString() string {
	return s.String()
}

// SetOperationDetails sets the OperationDetails field's value.
func (s *StartInstancesOutput) SetOperationDetails(v []*OperationDetail) *StartInstancesOutput {
	s.OperationDetails = v
	return s
}

type StopInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ForceStop *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	StoppedMode *string `type:"string"`
}

// String returns the string representation
func (s StopInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *StopInstanceInput) SetDryRun(v bool) *StopInstanceInput {
	s.DryRun = &v
	return s
}

// SetForceStop sets the ForceStop field's value.
func (s *StopInstanceInput) SetForceStop(v bool) *StopInstanceInput {
	s.ForceStop = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *StopInstanceInput) SetInstanceId(v string) *StopInstanceInput {
	s.InstanceId = &v
	return s
}

// SetStoppedMode sets the StoppedMode field's value.
func (s *StopInstanceInput) SetStoppedMode(v string) *StopInstanceInput {
	s.StoppedMode = &v
	return s
}

type StopInstanceOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	OrderNo *string `type:"string"`
}

// String returns the string representation
func (s StopInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstanceOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *StopInstanceOutput) SetInstanceId(v string) *StopInstanceOutput {
	s.InstanceId = &v
	return s
}

// SetOrderNo sets the OrderNo field's value.
func (s *StopInstanceOutput) SetOrderNo(v string) *StopInstanceOutput {
	s.OrderNo = &v
	return s
}

type StopInstancesInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ForceStop *bool `type:"boolean"`

	InstanceIds []*string `type:"list"`

	StoppedMode *string `type:"string"`
}

// String returns the string representation
func (s StopInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstancesInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *StopInstancesInput) SetDryRun(v bool) *StopInstancesInput {
	s.DryRun = &v
	return s
}

// SetForceStop sets the ForceStop field's value.
func (s *StopInstancesInput) SetForceStop(v bool) *StopInstancesInput {
	s.ForceStop = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *StopInstancesInput) SetInstanceIds(v []*string) *StopInstancesInput {
	s.InstanceIds = v
	return s
}

// SetStoppedMode sets the StoppedMode field's value.
func (s *StopInstancesInput) SetStoppedMode(v string) *StopInstancesInput {
	s.StoppedMode = &v
	return s
}

type StopInstancesOutput struct {
	_ struct{} `type:"structure"`

	OperationDetails []*OperationDetail `type:"list"`
}

// String returns the string representation
func (s StopInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstancesOutput) GoString() string {
	return s.String()
}

// SetOperationDetails sets the OperationDetails field's value.
func (s *StopInstancesOutput) SetOperationDetails(v []*OperationDetail) *StopInstancesOutput {
	s.OperationDetails = v
	return s
}

type Tag struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s Tag) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s Tag) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *Tag) SetKey(v string) *Tag {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *Tag) SetValue(v string) *Tag {
	s.Value = &v
	return s
}

type UnbindAssumeRoleInput struct {
	_ struct{} `type:"structure"`

	AssumeRole *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s UnbindAssumeRoleInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindAssumeRoleInput) GoString() string {
	return s.String()
}

// SetAssumeRole sets the AssumeRole field's value.
func (s *UnbindAssumeRoleInput) SetAssumeRole(v string) *UnbindAssumeRoleInput {
	s.AssumeRole = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *UnbindAssumeRoleInput) SetInstanceId(v string) *UnbindAssumeRoleInput {
	s.InstanceId = &v
	return s
}

type UnbindAssumeRoleOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s UnbindAssumeRoleOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindAssumeRoleOutput) GoString() string {
	return s.String()
}

type Volume struct {
	_ struct{} `type:"structure"`

	DeleteWithInstance *string `type:"string"`

	Description *string `type:"string"`

	ImageId *string `type:"string"`

	Kind *string `type:"string"`

	Size *int64 `type:"integer"`

	SnapshotId *string `type:"string"`

	Status *string `type:"string"`

	VolumeId *string `type:"string"`

	VolumeName *string `type:"string"`

	VolumeType *string `type:"string"`
}

// String returns the string representation
func (s Volume) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s Volume) GoString() string {
	return s.String()
}

// SetDeleteWithInstance sets the DeleteWithInstance field's value.
func (s *Volume) SetDeleteWithInstance(v string) *Volume {
	s.DeleteWithInstance = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *Volume) SetDescription(v string) *Volume {
	s.Description = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *Volume) SetImageId(v string) *Volume {
	s.ImageId = &v
	return s
}

// SetKind sets the Kind field's value.
func (s *Volume) SetKind(v string) *Volume {
	s.Kind = &v
	return s
}

// SetSize sets the Size field's value.
func (s *Volume) SetSize(v int64) *Volume {
	s.Size = &v
	return s
}

// SetSnapshotId sets the SnapshotId field's value.
func (s *Volume) SetSnapshotId(v string) *Volume {
	s.SnapshotId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *Volume) SetStatus(v string) *Volume {
	s.Status = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *Volume) SetVolumeId(v string) *Volume {
	s.VolumeId = &v
	return s
}

// SetVolumeName sets the VolumeName field's value.
func (s *Volume) SetVolumeName(v string) *Volume {
	s.VolumeName = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *Volume) SetVolumeType(v string) *Volume {
	s.VolumeType = &v
	return s
}

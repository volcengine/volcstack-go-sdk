// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"code.byted.org/iaasng/volcstack-go-sdk/private/protocol"
	"code.byted.org/iaasng/volcstack-go-sdk/private/protocol/volcstackquery"
	"code.byted.org/iaasng/volcstack-go-sdk/volcstack"
	"code.byted.org/iaasng/volcstack-go-sdk/volcstack/request"
	"code.byted.org/iaasng/volcstack-go-sdk/volcstack/volcstackutil"
)

const opAttachKeyPairCommon = "AttachKeyPair"

// AttachKeyPairCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the AttachKeyPairCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AttachKeyPairCommon for more information on using the AttachKeyPairCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AttachKeyPairCommonRequest method.
//    req, resp := client.AttachKeyPairCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) AttachKeyPairCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachKeyPairCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AttachKeyPairCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation AttachKeyPairCommon for usage and error information.
func (c *ECS) AttachKeyPairCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachKeyPairCommonRequest(input)
	return out, req.Send()
}

// AttachKeyPairCommonWithContext is the same as AttachKeyPairCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachKeyPairCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) AttachKeyPairCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachKeyPairCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachKeyPair = "AttachKeyPair"

// AttachKeyPairRequest generates a "volcstack/request.Request" representing the
// client's request for the AttachKeyPair operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AttachKeyPair for more information on using the AttachKeyPair
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AttachKeyPairRequest method.
//    req, resp := client.AttachKeyPairRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) AttachKeyPairRequest(input *AttachKeyPairInput) (req *request.Request, output *AttachKeyPairOutput) {
	op := &request.Operation{
		Name:       opAttachKeyPair,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachKeyPairInput{}
	}

	output = &AttachKeyPairOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AttachKeyPair API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation AttachKeyPair for usage and error information.
func (c *ECS) AttachKeyPair(input *AttachKeyPairInput) (*AttachKeyPairOutput, error) {
	req, out := c.AttachKeyPairRequest(input)
	return out, req.Send()
}

// AttachKeyPairWithContext is the same as AttachKeyPair with the addition of
// the ability to pass a context and additional request options.
//
// See AttachKeyPair for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) AttachKeyPairWithContext(ctx volcstack.Context, input *AttachKeyPairInput, opts ...request.Option) (*AttachKeyPairOutput, error) {
	req, out := c.AttachKeyPairRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindAssumeRoleCommon = "BindAssumeRole"

// BindAssumeRoleCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the BindAssumeRoleCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See BindAssumeRoleCommon for more information on using the BindAssumeRoleCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the BindAssumeRoleCommonRequest method.
//    req, resp := client.BindAssumeRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) BindAssumeRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opBindAssumeRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// BindAssumeRoleCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation BindAssumeRoleCommon for usage and error information.
func (c *ECS) BindAssumeRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.BindAssumeRoleCommonRequest(input)
	return out, req.Send()
}

// BindAssumeRoleCommonWithContext is the same as BindAssumeRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See BindAssumeRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) BindAssumeRoleCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.BindAssumeRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opBindAssumeRole = "BindAssumeRole"

// BindAssumeRoleRequest generates a "volcstack/request.Request" representing the
// client's request for the BindAssumeRole operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See BindAssumeRole for more information on using the BindAssumeRole
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the BindAssumeRoleRequest method.
//    req, resp := client.BindAssumeRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) BindAssumeRoleRequest(input *BindAssumeRoleInput) (req *request.Request, output *BindAssumeRoleOutput) {
	op := &request.Operation{
		Name:       opBindAssumeRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &BindAssumeRoleInput{}
	}

	output = &BindAssumeRoleOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// BindAssumeRole API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation BindAssumeRole for usage and error information.
func (c *ECS) BindAssumeRole(input *BindAssumeRoleInput) (*BindAssumeRoleOutput, error) {
	req, out := c.BindAssumeRoleRequest(input)
	return out, req.Send()
}

// BindAssumeRoleWithContext is the same as BindAssumeRole with the addition of
// the ability to pass a context and additional request options.
//
// See BindAssumeRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) BindAssumeRoleWithContext(ctx volcstack.Context, input *BindAssumeRoleInput, opts ...request.Option) (*BindAssumeRoleOutput, error) {
	req, out := c.BindAssumeRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDeploymentSetCommon = "CreateDeploymentSet"

// CreateDeploymentSetCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDeploymentSetCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateDeploymentSetCommon for more information on using the CreateDeploymentSetCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateDeploymentSetCommonRequest method.
//    req, resp := client.CreateDeploymentSetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateDeploymentSetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDeploymentSetCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDeploymentSetCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateDeploymentSetCommon for usage and error information.
func (c *ECS) CreateDeploymentSetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDeploymentSetCommonRequest(input)
	return out, req.Send()
}

// CreateDeploymentSetCommonWithContext is the same as CreateDeploymentSetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDeploymentSetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateDeploymentSetCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDeploymentSetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDeploymentSet = "CreateDeploymentSet"

// CreateDeploymentSetRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateDeploymentSet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateDeploymentSet for more information on using the CreateDeploymentSet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateDeploymentSetRequest method.
//    req, resp := client.CreateDeploymentSetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateDeploymentSetRequest(input *CreateDeploymentSetInput) (req *request.Request, output *CreateDeploymentSetOutput) {
	op := &request.Operation{
		Name:       opCreateDeploymentSet,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDeploymentSetInput{}
	}

	output = &CreateDeploymentSetOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateDeploymentSet API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateDeploymentSet for usage and error information.
func (c *ECS) CreateDeploymentSet(input *CreateDeploymentSetInput) (*CreateDeploymentSetOutput, error) {
	req, out := c.CreateDeploymentSetRequest(input)
	return out, req.Send()
}

// CreateDeploymentSetWithContext is the same as CreateDeploymentSet with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDeploymentSet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateDeploymentSetWithContext(ctx volcstack.Context, input *CreateDeploymentSetInput, opts ...request.Option) (*CreateDeploymentSetOutput, error) {
	req, out := c.CreateDeploymentSetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateHpcClusterCommon = "CreateHpcCluster"

// CreateHpcClusterCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateHpcClusterCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateHpcClusterCommon for more information on using the CreateHpcClusterCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateHpcClusterCommonRequest method.
//    req, resp := client.CreateHpcClusterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateHpcClusterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateHpcClusterCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateHpcClusterCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateHpcClusterCommon for usage and error information.
func (c *ECS) CreateHpcClusterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateHpcClusterCommonRequest(input)
	return out, req.Send()
}

// CreateHpcClusterCommonWithContext is the same as CreateHpcClusterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateHpcClusterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateHpcClusterCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateHpcClusterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateHpcCluster = "CreateHpcCluster"

// CreateHpcClusterRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateHpcCluster operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateHpcCluster for more information on using the CreateHpcCluster
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateHpcClusterRequest method.
//    req, resp := client.CreateHpcClusterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateHpcClusterRequest(input *CreateHpcClusterInput) (req *request.Request, output *CreateHpcClusterOutput) {
	op := &request.Operation{
		Name:       opCreateHpcCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateHpcClusterInput{}
	}

	output = &CreateHpcClusterOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateHpcCluster API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateHpcCluster for usage and error information.
func (c *ECS) CreateHpcCluster(input *CreateHpcClusterInput) (*CreateHpcClusterOutput, error) {
	req, out := c.CreateHpcClusterRequest(input)
	return out, req.Send()
}

// CreateHpcClusterWithContext is the same as CreateHpcCluster with the addition of
// the ability to pass a context and additional request options.
//
// See CreateHpcCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateHpcClusterWithContext(ctx volcstack.Context, input *CreateHpcClusterInput, opts ...request.Option) (*CreateHpcClusterOutput, error) {
	req, out := c.CreateHpcClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInstancesCommon = "CreateInstances"

// CreateInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInstancesCommon for more information on using the CreateInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInstancesCommonRequest method.
//    req, resp := client.CreateInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateInstancesCommon for usage and error information.
func (c *ECS) CreateInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateInstancesCommonRequest(input)
	return out, req.Send()
}

// CreateInstancesCommonWithContext is the same as CreateInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateInstances = "CreateInstances"

// CreateInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateInstances for more information on using the CreateInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateInstancesRequest method.
//    req, resp := client.CreateInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateInstancesRequest(input *CreateInstancesInput) (req *request.Request, output *CreateInstancesOutput) {
	op := &request.Operation{
		Name:       opCreateInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateInstancesInput{}
	}

	output = &CreateInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateInstances for usage and error information.
func (c *ECS) CreateInstances(input *CreateInstancesInput) (*CreateInstancesOutput, error) {
	req, out := c.CreateInstancesRequest(input)
	return out, req.Send()
}

// CreateInstancesWithContext is the same as CreateInstances with the addition of
// the ability to pass a context and additional request options.
//
// See CreateInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateInstancesWithContext(ctx volcstack.Context, input *CreateInstancesInput, opts ...request.Option) (*CreateInstancesOutput, error) {
	req, out := c.CreateInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateKeyPairCommon = "CreateKeyPair"

// CreateKeyPairCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateKeyPairCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateKeyPairCommon for more information on using the CreateKeyPairCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateKeyPairCommonRequest method.
//    req, resp := client.CreateKeyPairCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateKeyPairCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateKeyPairCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateKeyPairCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateKeyPairCommon for usage and error information.
func (c *ECS) CreateKeyPairCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateKeyPairCommonRequest(input)
	return out, req.Send()
}

// CreateKeyPairCommonWithContext is the same as CreateKeyPairCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateKeyPairCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateKeyPairCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateKeyPairCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateKeyPair = "CreateKeyPair"

// CreateKeyPairRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateKeyPair operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateKeyPair for more information on using the CreateKeyPair
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateKeyPairRequest method.
//    req, resp := client.CreateKeyPairRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateKeyPairRequest(input *CreateKeyPairInput) (req *request.Request, output *CreateKeyPairOutput) {
	op := &request.Operation{
		Name:       opCreateKeyPair,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateKeyPairInput{}
	}

	output = &CreateKeyPairOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateKeyPair API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateKeyPair for usage and error information.
func (c *ECS) CreateKeyPair(input *CreateKeyPairInput) (*CreateKeyPairOutput, error) {
	req, out := c.CreateKeyPairRequest(input)
	return out, req.Send()
}

// CreateKeyPairWithContext is the same as CreateKeyPair with the addition of
// the ability to pass a context and additional request options.
//
// See CreateKeyPair for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateKeyPairWithContext(ctx volcstack.Context, input *CreateKeyPairInput, opts ...request.Option) (*CreateKeyPairOutput, error) {
	req, out := c.CreateKeyPairRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDeploymentSetCommon = "DeleteDeploymentSet"

// DeleteDeploymentSetCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDeploymentSetCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteDeploymentSetCommon for more information on using the DeleteDeploymentSetCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteDeploymentSetCommonRequest method.
//    req, resp := client.DeleteDeploymentSetCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteDeploymentSetCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDeploymentSetCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDeploymentSetCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteDeploymentSetCommon for usage and error information.
func (c *ECS) DeleteDeploymentSetCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDeploymentSetCommonRequest(input)
	return out, req.Send()
}

// DeleteDeploymentSetCommonWithContext is the same as DeleteDeploymentSetCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDeploymentSetCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteDeploymentSetCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDeploymentSetCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDeploymentSet = "DeleteDeploymentSet"

// DeleteDeploymentSetRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteDeploymentSet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteDeploymentSet for more information on using the DeleteDeploymentSet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteDeploymentSetRequest method.
//    req, resp := client.DeleteDeploymentSetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteDeploymentSetRequest(input *DeleteDeploymentSetInput) (req *request.Request, output *DeleteDeploymentSetOutput) {
	op := &request.Operation{
		Name:       opDeleteDeploymentSet,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDeploymentSetInput{}
	}

	output = &DeleteDeploymentSetOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDeploymentSet API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteDeploymentSet for usage and error information.
func (c *ECS) DeleteDeploymentSet(input *DeleteDeploymentSetInput) (*DeleteDeploymentSetOutput, error) {
	req, out := c.DeleteDeploymentSetRequest(input)
	return out, req.Send()
}

// DeleteDeploymentSetWithContext is the same as DeleteDeploymentSet with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDeploymentSet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteDeploymentSetWithContext(ctx volcstack.Context, input *DeleteDeploymentSetInput, opts ...request.Option) (*DeleteDeploymentSetOutput, error) {
	req, out := c.DeleteDeploymentSetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteHpcClusterCommon = "DeleteHpcCluster"

// DeleteHpcClusterCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteHpcClusterCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteHpcClusterCommon for more information on using the DeleteHpcClusterCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteHpcClusterCommonRequest method.
//    req, resp := client.DeleteHpcClusterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteHpcClusterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteHpcClusterCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteHpcClusterCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteHpcClusterCommon for usage and error information.
func (c *ECS) DeleteHpcClusterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteHpcClusterCommonRequest(input)
	return out, req.Send()
}

// DeleteHpcClusterCommonWithContext is the same as DeleteHpcClusterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteHpcClusterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteHpcClusterCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteHpcClusterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteHpcCluster = "DeleteHpcCluster"

// DeleteHpcClusterRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteHpcCluster operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteHpcCluster for more information on using the DeleteHpcCluster
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteHpcClusterRequest method.
//    req, resp := client.DeleteHpcClusterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteHpcClusterRequest(input *DeleteHpcClusterInput) (req *request.Request, output *DeleteHpcClusterOutput) {
	op := &request.Operation{
		Name:       opDeleteHpcCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteHpcClusterInput{}
	}

	output = &DeleteHpcClusterOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteHpcCluster API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteHpcCluster for usage and error information.
func (c *ECS) DeleteHpcCluster(input *DeleteHpcClusterInput) (*DeleteHpcClusterOutput, error) {
	req, out := c.DeleteHpcClusterRequest(input)
	return out, req.Send()
}

// DeleteHpcClusterWithContext is the same as DeleteHpcCluster with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteHpcCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteHpcClusterWithContext(ctx volcstack.Context, input *DeleteHpcClusterInput, opts ...request.Option) (*DeleteHpcClusterOutput, error) {
	req, out := c.DeleteHpcClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstanceCommon = "DeleteInstance"

// DeleteInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstanceCommon for more information on using the DeleteInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstanceCommonRequest method.
//    req, resp := client.DeleteInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstanceCommon for usage and error information.
func (c *ECS) DeleteInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceCommonRequest(input)
	return out, req.Send()
}

// DeleteInstanceCommonWithContext is the same as DeleteInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstance = "DeleteInstance"

// DeleteInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteInstance for more information on using the DeleteInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteInstanceRequest method.
//    req, resp := client.DeleteInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstanceRequest(input *DeleteInstanceInput) (req *request.Request, output *DeleteInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteInstanceInput{}
	}

	output = &DeleteInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstance for usage and error information.
func (c *ECS) DeleteInstance(input *DeleteInstanceInput) (*DeleteInstanceOutput, error) {
	req, out := c.DeleteInstanceRequest(input)
	return out, req.Send()
}

// DeleteInstanceWithContext is the same as DeleteInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstanceWithContext(ctx volcstack.Context, input *DeleteInstanceInput, opts ...request.Option) (*DeleteInstanceOutput, error) {
	req, out := c.DeleteInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKeyPairCommon = "DeleteKeyPair"

// DeleteKeyPairCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteKeyPairCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteKeyPairCommon for more information on using the DeleteKeyPairCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteKeyPairCommonRequest method.
//    req, resp := client.DeleteKeyPairCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteKeyPairCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteKeyPairCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPairCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteKeyPairCommon for usage and error information.
func (c *ECS) DeleteKeyPairCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairCommonRequest(input)
	return out, req.Send()
}

// DeleteKeyPairCommonWithContext is the same as DeleteKeyPairCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPairCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKeyPair = "DeleteKeyPair"

// DeleteKeyPairRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteKeyPair operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteKeyPair for more information on using the DeleteKeyPair
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteKeyPairRequest method.
//    req, resp := client.DeleteKeyPairRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteKeyPairRequest(input *DeleteKeyPairInput) (req *request.Request, output *DeleteKeyPairOutput) {
	op := &request.Operation{
		Name:       opDeleteKeyPair,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteKeyPairInput{}
	}

	output = &DeleteKeyPairOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPair API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteKeyPair for usage and error information.
func (c *ECS) DeleteKeyPair(input *DeleteKeyPairInput) (*DeleteKeyPairOutput, error) {
	req, out := c.DeleteKeyPairRequest(input)
	return out, req.Send()
}

// DeleteKeyPairWithContext is the same as DeleteKeyPair with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPair for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairWithContext(ctx volcstack.Context, input *DeleteKeyPairInput, opts ...request.Option) (*DeleteKeyPairOutput, error) {
	req, out := c.DeleteKeyPairRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKeyPairsCommon = "DeleteKeyPairs"

// DeleteKeyPairsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteKeyPairsCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteKeyPairsCommon for more information on using the DeleteKeyPairsCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteKeyPairsCommonRequest method.
//    req, resp := client.DeleteKeyPairsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteKeyPairsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteKeyPairsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPairsCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteKeyPairsCommon for usage and error information.
func (c *ECS) DeleteKeyPairsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairsCommonRequest(input)
	return out, req.Send()
}

// DeleteKeyPairsCommonWithContext is the same as DeleteKeyPairsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPairsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKeyPairs = "DeleteKeyPairs"

// DeleteKeyPairsRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteKeyPairs operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteKeyPairs for more information on using the DeleteKeyPairs
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteKeyPairsRequest method.
//    req, resp := client.DeleteKeyPairsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteKeyPairsRequest(input *DeleteKeyPairsInput) (req *request.Request, output *DeleteKeyPairsOutput) {
	op := &request.Operation{
		Name:       opDeleteKeyPairs,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteKeyPairsInput{}
	}

	output = &DeleteKeyPairsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPairs API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteKeyPairs for usage and error information.
func (c *ECS) DeleteKeyPairs(input *DeleteKeyPairsInput) (*DeleteKeyPairsOutput, error) {
	req, out := c.DeleteKeyPairsRequest(input)
	return out, req.Send()
}

// DeleteKeyPairsWithContext is the same as DeleteKeyPairs with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPairs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairsWithContext(ctx volcstack.Context, input *DeleteKeyPairsInput, opts ...request.Option) (*DeleteKeyPairsOutput, error) {
	req, out := c.DeleteKeyPairsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailableResourceCommon = "DescribeAvailableResource"

// DescribeAvailableResourceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAvailableResourceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeAvailableResourceCommon for more information on using the DescribeAvailableResourceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeAvailableResourceCommonRequest method.
//    req, resp := client.DescribeAvailableResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeAvailableResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAvailableResourceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAvailableResourceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeAvailableResourceCommon for usage and error information.
func (c *ECS) DescribeAvailableResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableResourceCommonRequest(input)
	return out, req.Send()
}

// DescribeAvailableResourceCommonWithContext is the same as DescribeAvailableResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeAvailableResourceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailableResource = "DescribeAvailableResource"

// DescribeAvailableResourceRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAvailableResource operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeAvailableResource for more information on using the DescribeAvailableResource
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeAvailableResourceRequest method.
//    req, resp := client.DescribeAvailableResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeAvailableResourceRequest(input *DescribeAvailableResourceInput) (req *request.Request, output *DescribeAvailableResourceOutput) {
	op := &request.Operation{
		Name:       opDescribeAvailableResource,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAvailableResourceInput{}
	}

	output = &DescribeAvailableResourceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAvailableResource API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeAvailableResource for usage and error information.
func (c *ECS) DescribeAvailableResource(input *DescribeAvailableResourceInput) (*DescribeAvailableResourceOutput, error) {
	req, out := c.DescribeAvailableResourceRequest(input)
	return out, req.Send()
}

// DescribeAvailableResourceWithContext is the same as DescribeAvailableResource with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeAvailableResourceWithContext(ctx volcstack.Context, input *DescribeAvailableResourceInput, opts ...request.Option) (*DescribeAvailableResourceOutput, error) {
	req, out := c.DescribeAvailableResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDeploymentSetSupportedInstanceTypeFamilyCommon = "DescribeDeploymentSetSupportedInstanceTypeFamily"

// DescribeDeploymentSetSupportedInstanceTypeFamilyCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDeploymentSetSupportedInstanceTypeFamilyCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDeploymentSetSupportedInstanceTypeFamilyCommon for more information on using the DescribeDeploymentSetSupportedInstanceTypeFamilyCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDeploymentSetSupportedInstanceTypeFamilyCommonRequest method.
//    req, resp := client.DescribeDeploymentSetSupportedInstanceTypeFamilyCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeDeploymentSetSupportedInstanceTypeFamilyCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDeploymentSetSupportedInstanceTypeFamilyCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDeploymentSetSupportedInstanceTypeFamilyCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeDeploymentSetSupportedInstanceTypeFamilyCommon for usage and error information.
func (c *ECS) DescribeDeploymentSetSupportedInstanceTypeFamilyCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDeploymentSetSupportedInstanceTypeFamilyCommonRequest(input)
	return out, req.Send()
}

// DescribeDeploymentSetSupportedInstanceTypeFamilyCommonWithContext is the same as DescribeDeploymentSetSupportedInstanceTypeFamilyCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDeploymentSetSupportedInstanceTypeFamilyCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeDeploymentSetSupportedInstanceTypeFamilyCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDeploymentSetSupportedInstanceTypeFamilyCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDeploymentSetSupportedInstanceTypeFamily = "DescribeDeploymentSetSupportedInstanceTypeFamily"

// DescribeDeploymentSetSupportedInstanceTypeFamilyRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDeploymentSetSupportedInstanceTypeFamily operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDeploymentSetSupportedInstanceTypeFamily for more information on using the DescribeDeploymentSetSupportedInstanceTypeFamily
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDeploymentSetSupportedInstanceTypeFamilyRequest method.
//    req, resp := client.DescribeDeploymentSetSupportedInstanceTypeFamilyRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeDeploymentSetSupportedInstanceTypeFamilyRequest(input *DescribeDeploymentSetSupportedInstanceTypeFamilyInput) (req *request.Request, output *DescribeDeploymentSetSupportedInstanceTypeFamilyOutput) {
	op := &request.Operation{
		Name:       opDescribeDeploymentSetSupportedInstanceTypeFamily,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDeploymentSetSupportedInstanceTypeFamilyInput{}
	}

	output = &DescribeDeploymentSetSupportedInstanceTypeFamilyOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDeploymentSetSupportedInstanceTypeFamily API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeDeploymentSetSupportedInstanceTypeFamily for usage and error information.
func (c *ECS) DescribeDeploymentSetSupportedInstanceTypeFamily(input *DescribeDeploymentSetSupportedInstanceTypeFamilyInput) (*DescribeDeploymentSetSupportedInstanceTypeFamilyOutput, error) {
	req, out := c.DescribeDeploymentSetSupportedInstanceTypeFamilyRequest(input)
	return out, req.Send()
}

// DescribeDeploymentSetSupportedInstanceTypeFamilyWithContext is the same as DescribeDeploymentSetSupportedInstanceTypeFamily with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDeploymentSetSupportedInstanceTypeFamily for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeDeploymentSetSupportedInstanceTypeFamilyWithContext(ctx volcstack.Context, input *DescribeDeploymentSetSupportedInstanceTypeFamilyInput, opts ...request.Option) (*DescribeDeploymentSetSupportedInstanceTypeFamilyOutput, error) {
	req, out := c.DescribeDeploymentSetSupportedInstanceTypeFamilyRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDeploymentSetsCommon = "DescribeDeploymentSets"

// DescribeDeploymentSetsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDeploymentSetsCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDeploymentSetsCommon for more information on using the DescribeDeploymentSetsCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDeploymentSetsCommonRequest method.
//    req, resp := client.DescribeDeploymentSetsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeDeploymentSetsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeDeploymentSetsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDeploymentSetsCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeDeploymentSetsCommon for usage and error information.
func (c *ECS) DescribeDeploymentSetsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeDeploymentSetsCommonRequest(input)
	return out, req.Send()
}

// DescribeDeploymentSetsCommonWithContext is the same as DescribeDeploymentSetsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDeploymentSetsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeDeploymentSetsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeDeploymentSetsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDeploymentSets = "DescribeDeploymentSets"

// DescribeDeploymentSetsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeDeploymentSets operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDeploymentSets for more information on using the DescribeDeploymentSets
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDeploymentSetsRequest method.
//    req, resp := client.DescribeDeploymentSetsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeDeploymentSetsRequest(input *DescribeDeploymentSetsInput) (req *request.Request, output *DescribeDeploymentSetsOutput) {
	op := &request.Operation{
		Name:       opDescribeDeploymentSets,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDeploymentSetsInput{}
	}

	output = &DescribeDeploymentSetsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeDeploymentSets API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeDeploymentSets for usage and error information.
func (c *ECS) DescribeDeploymentSets(input *DescribeDeploymentSetsInput) (*DescribeDeploymentSetsOutput, error) {
	req, out := c.DescribeDeploymentSetsRequest(input)
	return out, req.Send()
}

// DescribeDeploymentSetsWithContext is the same as DescribeDeploymentSets with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDeploymentSets for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeDeploymentSetsWithContext(ctx volcstack.Context, input *DescribeDeploymentSetsInput, opts ...request.Option) (*DescribeDeploymentSetsOutput, error) {
	req, out := c.DescribeDeploymentSetsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHpcClusterCommon = "DescribeHpcCluster"

// DescribeHpcClusterCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeHpcClusterCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeHpcClusterCommon for more information on using the DescribeHpcClusterCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeHpcClusterCommonRequest method.
//    req, resp := client.DescribeHpcClusterCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcClusterCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeHpcClusterCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcClusterCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeHpcClusterCommon for usage and error information.
func (c *ECS) DescribeHpcClusterCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcClusterCommonRequest(input)
	return out, req.Send()
}

// DescribeHpcClusterCommonWithContext is the same as DescribeHpcClusterCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcClusterCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcClusterCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcClusterCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHpcCluster = "DescribeHpcCluster"

// DescribeHpcClusterRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeHpcCluster operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeHpcCluster for more information on using the DescribeHpcCluster
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeHpcClusterRequest method.
//    req, resp := client.DescribeHpcClusterRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcClusterRequest(input *DescribeHpcClusterInput) (req *request.Request, output *DescribeHpcClusterOutput) {
	op := &request.Operation{
		Name:       opDescribeHpcCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeHpcClusterInput{}
	}

	output = &DescribeHpcClusterOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcCluster API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeHpcCluster for usage and error information.
func (c *ECS) DescribeHpcCluster(input *DescribeHpcClusterInput) (*DescribeHpcClusterOutput, error) {
	req, out := c.DescribeHpcClusterRequest(input)
	return out, req.Send()
}

// DescribeHpcClusterWithContext is the same as DescribeHpcCluster with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcCluster for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcClusterWithContext(ctx volcstack.Context, input *DescribeHpcClusterInput, opts ...request.Option) (*DescribeHpcClusterOutput, error) {
	req, out := c.DescribeHpcClusterRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHpcClustersCommon = "DescribeHpcClusters"

// DescribeHpcClustersCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeHpcClustersCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeHpcClustersCommon for more information on using the DescribeHpcClustersCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeHpcClustersCommonRequest method.
//    req, resp := client.DescribeHpcClustersCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcClustersCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeHpcClustersCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcClustersCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeHpcClustersCommon for usage and error information.
func (c *ECS) DescribeHpcClustersCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcClustersCommonRequest(input)
	return out, req.Send()
}

// DescribeHpcClustersCommonWithContext is the same as DescribeHpcClustersCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcClustersCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcClustersCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeHpcClustersCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeHpcClusters = "DescribeHpcClusters"

// DescribeHpcClustersRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeHpcClusters operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeHpcClusters for more information on using the DescribeHpcClusters
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeHpcClustersRequest method.
//    req, resp := client.DescribeHpcClustersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeHpcClustersRequest(input *DescribeHpcClustersInput) (req *request.Request, output *DescribeHpcClustersOutput) {
	op := &request.Operation{
		Name:       opDescribeHpcClusters,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeHpcClustersInput{}
	}

	output = &DescribeHpcClustersOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeHpcClusters API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeHpcClusters for usage and error information.
func (c *ECS) DescribeHpcClusters(input *DescribeHpcClustersInput) (*DescribeHpcClustersOutput, error) {
	req, out := c.DescribeHpcClustersRequest(input)
	return out, req.Send()
}

// DescribeHpcClustersWithContext is the same as DescribeHpcClusters with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeHpcClusters for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeHpcClustersWithContext(ctx volcstack.Context, input *DescribeHpcClustersInput, opts ...request.Option) (*DescribeHpcClustersOutput, error) {
	req, out := c.DescribeHpcClustersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceECSTerminalUrlCommon = "DescribeInstanceECSTerminalUrl"

// DescribeInstanceECSTerminalUrlCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceECSTerminalUrlCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceECSTerminalUrlCommon for more information on using the DescribeInstanceECSTerminalUrlCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceECSTerminalUrlCommonRequest method.
//    req, resp := client.DescribeInstanceECSTerminalUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceECSTerminalUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceECSTerminalUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceECSTerminalUrlCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceECSTerminalUrlCommon for usage and error information.
func (c *ECS) DescribeInstanceECSTerminalUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceECSTerminalUrlCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceECSTerminalUrlCommonWithContext is the same as DescribeInstanceECSTerminalUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceECSTerminalUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceECSTerminalUrlCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceECSTerminalUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceECSTerminalUrl = "DescribeInstanceECSTerminalUrl"

// DescribeInstanceECSTerminalUrlRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceECSTerminalUrl operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceECSTerminalUrl for more information on using the DescribeInstanceECSTerminalUrl
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceECSTerminalUrlRequest method.
//    req, resp := client.DescribeInstanceECSTerminalUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceECSTerminalUrlRequest(input *DescribeInstanceECSTerminalUrlInput) (req *request.Request, output *DescribeInstanceECSTerminalUrlOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceECSTerminalUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceECSTerminalUrlInput{}
	}

	output = &DescribeInstanceECSTerminalUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceECSTerminalUrl API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceECSTerminalUrl for usage and error information.
func (c *ECS) DescribeInstanceECSTerminalUrl(input *DescribeInstanceECSTerminalUrlInput) (*DescribeInstanceECSTerminalUrlOutput, error) {
	req, out := c.DescribeInstanceECSTerminalUrlRequest(input)
	return out, req.Send()
}

// DescribeInstanceECSTerminalUrlWithContext is the same as DescribeInstanceECSTerminalUrl with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceECSTerminalUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceECSTerminalUrlWithContext(ctx volcstack.Context, input *DescribeInstanceECSTerminalUrlInput, opts ...request.Option) (*DescribeInstanceECSTerminalUrlOutput, error) {
	req, out := c.DescribeInstanceECSTerminalUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceTypeFamiliesCommon = "DescribeInstanceTypeFamilies"

// DescribeInstanceTypeFamiliesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceTypeFamiliesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceTypeFamiliesCommon for more information on using the DescribeInstanceTypeFamiliesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceTypeFamiliesCommonRequest method.
//    req, resp := client.DescribeInstanceTypeFamiliesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceTypeFamiliesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceTypeFamiliesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceTypeFamiliesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceTypeFamiliesCommon for usage and error information.
func (c *ECS) DescribeInstanceTypeFamiliesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTypeFamiliesCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceTypeFamiliesCommonWithContext is the same as DescribeInstanceTypeFamiliesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceTypeFamiliesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceTypeFamiliesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTypeFamiliesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceTypeFamilies = "DescribeInstanceTypeFamilies"

// DescribeInstanceTypeFamiliesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceTypeFamilies operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceTypeFamilies for more information on using the DescribeInstanceTypeFamilies
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceTypeFamiliesRequest method.
//    req, resp := client.DescribeInstanceTypeFamiliesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceTypeFamiliesRequest(input *DescribeInstanceTypeFamiliesInput) (req *request.Request, output *DescribeInstanceTypeFamiliesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceTypeFamilies,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceTypeFamiliesInput{}
	}

	output = &DescribeInstanceTypeFamiliesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceTypeFamilies API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceTypeFamilies for usage and error information.
func (c *ECS) DescribeInstanceTypeFamilies(input *DescribeInstanceTypeFamiliesInput) (*DescribeInstanceTypeFamiliesOutput, error) {
	req, out := c.DescribeInstanceTypeFamiliesRequest(input)
	return out, req.Send()
}

// DescribeInstanceTypeFamiliesWithContext is the same as DescribeInstanceTypeFamilies with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceTypeFamilies for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceTypeFamiliesWithContext(ctx volcstack.Context, input *DescribeInstanceTypeFamiliesInput, opts ...request.Option) (*DescribeInstanceTypeFamiliesOutput, error) {
	req, out := c.DescribeInstanceTypeFamiliesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceTypesCommon = "DescribeInstanceTypes"

// DescribeInstanceTypesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceTypesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceTypesCommon for more information on using the DescribeInstanceTypesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceTypesCommonRequest method.
//    req, resp := client.DescribeInstanceTypesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceTypesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceTypesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceTypesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceTypesCommon for usage and error information.
func (c *ECS) DescribeInstanceTypesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTypesCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceTypesCommonWithContext is the same as DescribeInstanceTypesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceTypesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceTypesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTypesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceTypes = "DescribeInstanceTypes"

// DescribeInstanceTypesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceTypes operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceTypes for more information on using the DescribeInstanceTypes
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceTypesRequest method.
//    req, resp := client.DescribeInstanceTypesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceTypesRequest(input *DescribeInstanceTypesInput) (req *request.Request, output *DescribeInstanceTypesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceTypes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceTypesInput{}
	}

	output = &DescribeInstanceTypesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceTypes API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceTypes for usage and error information.
func (c *ECS) DescribeInstanceTypes(input *DescribeInstanceTypesInput) (*DescribeInstanceTypesOutput, error) {
	req, out := c.DescribeInstanceTypesRequest(input)
	return out, req.Send()
}

// DescribeInstanceTypesWithContext is the same as DescribeInstanceTypes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceTypes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceTypesWithContext(ctx volcstack.Context, input *DescribeInstanceTypesInput, opts ...request.Option) (*DescribeInstanceTypesOutput, error) {
	req, out := c.DescribeInstanceTypesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceVncUrlCommon = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrlCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceVncUrlCommon for more information on using the DescribeInstanceVncUrlCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceVncUrlCommonRequest method.
//    req, resp := client.DescribeInstanceVncUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrlCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrlCommon for usage and error information.
func (c *ECS) DescribeInstanceVncUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlCommonWithContext is the same as DescribeInstanceVncUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceVncUrl = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrl operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstanceVncUrl for more information on using the DescribeInstanceVncUrl
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstanceVncUrlRequest method.
//    req, resp := client.DescribeInstanceVncUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlRequest(input *DescribeInstanceVncUrlInput) (req *request.Request, output *DescribeInstanceVncUrlOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceVncUrlInput{}
	}

	output = &DescribeInstanceVncUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrl API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrl for usage and error information.
func (c *ECS) DescribeInstanceVncUrl(input *DescribeInstanceVncUrlInput) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlWithContext is the same as DescribeInstanceVncUrl with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlWithContext(ctx volcstack.Context, input *DescribeInstanceVncUrlInput, opts ...request.Option) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstancesCommon = "DescribeInstances"

// DescribeInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstancesCommon for more information on using the DescribeInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstancesCommonRequest method.
//    req, resp := client.DescribeInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstancesCommon for usage and error information.
func (c *ECS) DescribeInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancesCommonRequest(input)
	return out, req.Send()
}

// DescribeInstancesCommonWithContext is the same as DescribeInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstances = "DescribeInstances"

// DescribeInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeInstances for more information on using the DescribeInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeInstancesRequest method.
//    req, resp := client.DescribeInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancesRequest(input *DescribeInstancesInput) (req *request.Request, output *DescribeInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstancesInput{}
	}

	output = &DescribeInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstances for usage and error information.
func (c *ECS) DescribeInstances(input *DescribeInstancesInput) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	return out, req.Send()
}

// DescribeInstancesWithContext is the same as DescribeInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancesWithContext(ctx volcstack.Context, input *DescribeInstancesInput, opts ...request.Option) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeKeyPairCommon = "DescribeKeyPair"

// DescribeKeyPairCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeKeyPairCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeKeyPairCommon for more information on using the DescribeKeyPairCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeKeyPairCommonRequest method.
//    req, resp := client.DescribeKeyPairCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeKeyPairCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeKeyPairCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeKeyPairCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeKeyPairCommon for usage and error information.
func (c *ECS) DescribeKeyPairCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeKeyPairCommonRequest(input)
	return out, req.Send()
}

// DescribeKeyPairCommonWithContext is the same as DescribeKeyPairCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeKeyPairCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeKeyPairCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeKeyPairCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeKeyPair = "DescribeKeyPair"

// DescribeKeyPairRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeKeyPair operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeKeyPair for more information on using the DescribeKeyPair
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeKeyPairRequest method.
//    req, resp := client.DescribeKeyPairRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeKeyPairRequest(input *DescribeKeyPairInput) (req *request.Request, output *DescribeKeyPairOutput) {
	op := &request.Operation{
		Name:       opDescribeKeyPair,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeKeyPairInput{}
	}

	output = &DescribeKeyPairOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeKeyPair API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeKeyPair for usage and error information.
func (c *ECS) DescribeKeyPair(input *DescribeKeyPairInput) (*DescribeKeyPairOutput, error) {
	req, out := c.DescribeKeyPairRequest(input)
	return out, req.Send()
}

// DescribeKeyPairWithContext is the same as DescribeKeyPair with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeKeyPair for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeKeyPairWithContext(ctx volcstack.Context, input *DescribeKeyPairInput, opts ...request.Option) (*DescribeKeyPairOutput, error) {
	req, out := c.DescribeKeyPairRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeKeyPairsCommon = "DescribeKeyPairs"

// DescribeKeyPairsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeKeyPairsCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeKeyPairsCommon for more information on using the DescribeKeyPairsCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeKeyPairsCommonRequest method.
//    req, resp := client.DescribeKeyPairsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeKeyPairsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeKeyPairsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeKeyPairsCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeKeyPairsCommon for usage and error information.
func (c *ECS) DescribeKeyPairsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeKeyPairsCommonRequest(input)
	return out, req.Send()
}

// DescribeKeyPairsCommonWithContext is the same as DescribeKeyPairsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeKeyPairsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeKeyPairsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeKeyPairsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeKeyPairs = "DescribeKeyPairs"

// DescribeKeyPairsRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeKeyPairs operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeKeyPairs for more information on using the DescribeKeyPairs
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeKeyPairsRequest method.
//    req, resp := client.DescribeKeyPairsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeKeyPairsRequest(input *DescribeKeyPairsInput) (req *request.Request, output *DescribeKeyPairsOutput) {
	op := &request.Operation{
		Name:       opDescribeKeyPairs,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeKeyPairsInput{}
	}

	output = &DescribeKeyPairsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeKeyPairs API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeKeyPairs for usage and error information.
func (c *ECS) DescribeKeyPairs(input *DescribeKeyPairsInput) (*DescribeKeyPairsOutput, error) {
	req, out := c.DescribeKeyPairsRequest(input)
	return out, req.Send()
}

// DescribeKeyPairsWithContext is the same as DescribeKeyPairs with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeKeyPairs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeKeyPairsWithContext(ctx volcstack.Context, input *DescribeKeyPairsInput, opts ...request.Option) (*DescribeKeyPairsOutput, error) {
	req, out := c.DescribeKeyPairsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeUserDataCommon = "DescribeUserData"

// DescribeUserDataCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeUserDataCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeUserDataCommon for more information on using the DescribeUserDataCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeUserDataCommonRequest method.
//    req, resp := client.DescribeUserDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeUserDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeUserDataCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeUserDataCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeUserDataCommon for usage and error information.
func (c *ECS) DescribeUserDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeUserDataCommonRequest(input)
	return out, req.Send()
}

// DescribeUserDataCommonWithContext is the same as DescribeUserDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeUserDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeUserDataCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeUserDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeUserData = "DescribeUserData"

// DescribeUserDataRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeUserData operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeUserData for more information on using the DescribeUserData
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeUserDataRequest method.
//    req, resp := client.DescribeUserDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeUserDataRequest(input *DescribeUserDataInput) (req *request.Request, output *DescribeUserDataOutput) {
	op := &request.Operation{
		Name:       opDescribeUserData,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeUserDataInput{}
	}

	output = &DescribeUserDataOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeUserData API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeUserData for usage and error information.
func (c *ECS) DescribeUserData(input *DescribeUserDataInput) (*DescribeUserDataOutput, error) {
	req, out := c.DescribeUserDataRequest(input)
	return out, req.Send()
}

// DescribeUserDataWithContext is the same as DescribeUserData with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeUserData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeUserDataWithContext(ctx volcstack.Context, input *DescribeUserDataInput, opts ...request.Option) (*DescribeUserDataOutput, error) {
	req, out := c.DescribeUserDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeZonesCommon = "DescribeZones"

// DescribeZonesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeZonesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeZonesCommon for more information on using the DescribeZonesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeZonesCommonRequest method.
//    req, resp := client.DescribeZonesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeZonesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeZonesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeZonesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeZonesCommon for usage and error information.
func (c *ECS) DescribeZonesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeZonesCommonRequest(input)
	return out, req.Send()
}

// DescribeZonesCommonWithContext is the same as DescribeZonesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeZonesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeZonesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeZonesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeZones = "DescribeZones"

// DescribeZonesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeZones operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeZones for more information on using the DescribeZones
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeZonesRequest method.
//    req, resp := client.DescribeZonesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeZonesRequest(input *DescribeZonesInput) (req *request.Request, output *DescribeZonesOutput) {
	op := &request.Operation{
		Name:       opDescribeZones,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeZonesInput{}
	}

	output = &DescribeZonesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeZones API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeZones for usage and error information.
func (c *ECS) DescribeZones(input *DescribeZonesInput) (*DescribeZonesOutput, error) {
	req, out := c.DescribeZonesRequest(input)
	return out, req.Send()
}

// DescribeZonesWithContext is the same as DescribeZones with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeZones for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeZonesWithContext(ctx volcstack.Context, input *DescribeZonesInput, opts ...request.Option) (*DescribeZonesOutput, error) {
	req, out := c.DescribeZonesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetachKeyPairCommon = "DetachKeyPair"

// DetachKeyPairCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DetachKeyPairCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DetachKeyPairCommon for more information on using the DetachKeyPairCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DetachKeyPairCommonRequest method.
//    req, resp := client.DetachKeyPairCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DetachKeyPairCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDetachKeyPairCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DetachKeyPairCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DetachKeyPairCommon for usage and error information.
func (c *ECS) DetachKeyPairCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DetachKeyPairCommonRequest(input)
	return out, req.Send()
}

// DetachKeyPairCommonWithContext is the same as DetachKeyPairCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DetachKeyPairCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DetachKeyPairCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DetachKeyPairCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetachKeyPair = "DetachKeyPair"

// DetachKeyPairRequest generates a "volcstack/request.Request" representing the
// client's request for the DetachKeyPair operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DetachKeyPair for more information on using the DetachKeyPair
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DetachKeyPairRequest method.
//    req, resp := client.DetachKeyPairRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DetachKeyPairRequest(input *DetachKeyPairInput) (req *request.Request, output *DetachKeyPairOutput) {
	op := &request.Operation{
		Name:       opDetachKeyPair,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetachKeyPairInput{}
	}

	output = &DetachKeyPairOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DetachKeyPair API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DetachKeyPair for usage and error information.
func (c *ECS) DetachKeyPair(input *DetachKeyPairInput) (*DetachKeyPairOutput, error) {
	req, out := c.DetachKeyPairRequest(input)
	return out, req.Send()
}

// DetachKeyPairWithContext is the same as DetachKeyPair with the addition of
// the ability to pass a context and additional request options.
//
// See DetachKeyPair for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DetachKeyPairWithContext(ctx volcstack.Context, input *DetachKeyPairInput, opts ...request.Option) (*DetachKeyPairOutput, error) {
	req, out := c.DetachKeyPairRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInstanceConsoleCommon = "GetInstanceConsole"

// GetInstanceConsoleCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the GetInstanceConsoleCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetInstanceConsoleCommon for more information on using the GetInstanceConsoleCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetInstanceConsoleCommonRequest method.
//    req, resp := client.GetInstanceConsoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) GetInstanceConsoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGetInstanceConsoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// GetInstanceConsoleCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation GetInstanceConsoleCommon for usage and error information.
func (c *ECS) GetInstanceConsoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GetInstanceConsoleCommonRequest(input)
	return out, req.Send()
}

// GetInstanceConsoleCommonWithContext is the same as GetInstanceConsoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceConsoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) GetInstanceConsoleCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GetInstanceConsoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetInstanceConsole = "GetInstanceConsole"

// GetInstanceConsoleRequest generates a "volcstack/request.Request" representing the
// client's request for the GetInstanceConsole operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetInstanceConsole for more information on using the GetInstanceConsole
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetInstanceConsoleRequest method.
//    req, resp := client.GetInstanceConsoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) GetInstanceConsoleRequest(input *GetInstanceConsoleInput) (req *request.Request, output *GetInstanceConsoleOutput) {
	op := &request.Operation{
		Name:       opGetInstanceConsole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetInstanceConsoleInput{}
	}

	output = &GetInstanceConsoleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// GetInstanceConsole API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation GetInstanceConsole for usage and error information.
func (c *ECS) GetInstanceConsole(input *GetInstanceConsoleInput) (*GetInstanceConsoleOutput, error) {
	req, out := c.GetInstanceConsoleRequest(input)
	return out, req.Send()
}

// GetInstanceConsoleWithContext is the same as GetInstanceConsole with the addition of
// the ability to pass a context and additional request options.
//
// See GetInstanceConsole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) GetInstanceConsoleWithContext(ctx volcstack.Context, input *GetInstanceConsoleInput, opts ...request.Option) (*GetInstanceConsoleOutput, error) {
	req, out := c.GetInstanceConsoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opImportKeyPairCommon = "ImportKeyPair"

// ImportKeyPairCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ImportKeyPairCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ImportKeyPairCommon for more information on using the ImportKeyPairCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ImportKeyPairCommonRequest method.
//    req, resp := client.ImportKeyPairCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ImportKeyPairCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opImportKeyPairCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ImportKeyPairCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ImportKeyPairCommon for usage and error information.
func (c *ECS) ImportKeyPairCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ImportKeyPairCommonRequest(input)
	return out, req.Send()
}

// ImportKeyPairCommonWithContext is the same as ImportKeyPairCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ImportKeyPairCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ImportKeyPairCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ImportKeyPairCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opImportKeyPair = "ImportKeyPair"

// ImportKeyPairRequest generates a "volcstack/request.Request" representing the
// client's request for the ImportKeyPair operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ImportKeyPair for more information on using the ImportKeyPair
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ImportKeyPairRequest method.
//    req, resp := client.ImportKeyPairRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ImportKeyPairRequest(input *ImportKeyPairInput) (req *request.Request, output *ImportKeyPairOutput) {
	op := &request.Operation{
		Name:       opImportKeyPair,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ImportKeyPairInput{}
	}

	output = &ImportKeyPairOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ImportKeyPair API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ImportKeyPair for usage and error information.
func (c *ECS) ImportKeyPair(input *ImportKeyPairInput) (*ImportKeyPairOutput, error) {
	req, out := c.ImportKeyPairRequest(input)
	return out, req.Send()
}

// ImportKeyPairWithContext is the same as ImportKeyPair with the addition of
// the ability to pass a context and additional request options.
//
// See ImportKeyPair for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ImportKeyPairWithContext(ctx volcstack.Context, input *ImportKeyPairInput, opts ...request.Option) (*ImportKeyPairOutput, error) {
	req, out := c.ImportKeyPairRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolumeCommon = "InnerReplaceSystemVolume"

// InnerReplaceSystemVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolumeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolumeCommon for more information on using the InnerReplaceSystemVolumeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumeCommonRequest method.
//    req, resp := client.InnerReplaceSystemVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolumeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolumeCommon for usage and error information.
func (c *ECS) InnerReplaceSystemVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumeCommonRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumeCommonWithContext is the same as InnerReplaceSystemVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolume = "InnerReplaceSystemVolume"

// InnerReplaceSystemVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolume operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolume for more information on using the InnerReplaceSystemVolume
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumeRequest method.
//    req, resp := client.InnerReplaceSystemVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumeRequest(input *InnerReplaceSystemVolumeInput) (req *request.Request, output *InnerReplaceSystemVolumeOutput) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &InnerReplaceSystemVolumeInput{}
	}

	output = &InnerReplaceSystemVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolume API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolume for usage and error information.
func (c *ECS) InnerReplaceSystemVolume(input *InnerReplaceSystemVolumeInput) (*InnerReplaceSystemVolumeOutput, error) {
	req, out := c.InnerReplaceSystemVolumeRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumeWithContext is the same as InnerReplaceSystemVolume with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumeWithContext(ctx volcstack.Context, input *InnerReplaceSystemVolumeInput, opts ...request.Option) (*InnerReplaceSystemVolumeOutput, error) {
	req, out := c.InnerReplaceSystemVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolumesCommon = "InnerReplaceSystemVolumes"

// InnerReplaceSystemVolumesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolumesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolumesCommon for more information on using the InnerReplaceSystemVolumesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumesCommonRequest method.
//    req, resp := client.InnerReplaceSystemVolumesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolumesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolumesCommon for usage and error information.
func (c *ECS) InnerReplaceSystemVolumesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumesCommonRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumesCommonWithContext is the same as InnerReplaceSystemVolumesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.InnerReplaceSystemVolumesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opInnerReplaceSystemVolumes = "InnerReplaceSystemVolumes"

// InnerReplaceSystemVolumesRequest generates a "volcstack/request.Request" representing the
// client's request for the InnerReplaceSystemVolumes operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See InnerReplaceSystemVolumes for more information on using the InnerReplaceSystemVolumes
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the InnerReplaceSystemVolumesRequest method.
//    req, resp := client.InnerReplaceSystemVolumesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) InnerReplaceSystemVolumesRequest(input *InnerReplaceSystemVolumesInput) (req *request.Request, output *InnerReplaceSystemVolumesOutput) {
	op := &request.Operation{
		Name:       opInnerReplaceSystemVolumes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &InnerReplaceSystemVolumesInput{}
	}

	output = &InnerReplaceSystemVolumesOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// InnerReplaceSystemVolumes API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation InnerReplaceSystemVolumes for usage and error information.
func (c *ECS) InnerReplaceSystemVolumes(input *InnerReplaceSystemVolumesInput) (*InnerReplaceSystemVolumesOutput, error) {
	req, out := c.InnerReplaceSystemVolumesRequest(input)
	return out, req.Send()
}

// InnerReplaceSystemVolumesWithContext is the same as InnerReplaceSystemVolumes with the addition of
// the ability to pass a context and additional request options.
//
// See InnerReplaceSystemVolumes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) InnerReplaceSystemVolumesWithContext(ctx volcstack.Context, input *InnerReplaceSystemVolumesInput, opts ...request.Option) (*InnerReplaceSystemVolumesOutput, error) {
	req, out := c.InnerReplaceSystemVolumesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAssumeRolesCommon = "ListAssumeRoles"

// ListAssumeRolesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ListAssumeRolesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListAssumeRolesCommon for more information on using the ListAssumeRolesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListAssumeRolesCommonRequest method.
//    req, resp := client.ListAssumeRolesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ListAssumeRolesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAssumeRolesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListAssumeRolesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ListAssumeRolesCommon for usage and error information.
func (c *ECS) ListAssumeRolesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAssumeRolesCommonRequest(input)
	return out, req.Send()
}

// ListAssumeRolesCommonWithContext is the same as ListAssumeRolesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAssumeRolesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ListAssumeRolesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAssumeRolesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAssumeRoles = "ListAssumeRoles"

// ListAssumeRolesRequest generates a "volcstack/request.Request" representing the
// client's request for the ListAssumeRoles operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ListAssumeRoles for more information on using the ListAssumeRoles
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ListAssumeRolesRequest method.
//    req, resp := client.ListAssumeRolesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ListAssumeRolesRequest(input *ListAssumeRolesInput) (req *request.Request, output *ListAssumeRolesOutput) {
	op := &request.Operation{
		Name:       opListAssumeRoles,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAssumeRolesInput{}
	}

	output = &ListAssumeRolesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListAssumeRoles API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ListAssumeRoles for usage and error information.
func (c *ECS) ListAssumeRoles(input *ListAssumeRolesInput) (*ListAssumeRolesOutput, error) {
	req, out := c.ListAssumeRolesRequest(input)
	return out, req.Send()
}

// ListAssumeRolesWithContext is the same as ListAssumeRoles with the addition of
// the ability to pass a context and additional request options.
//
// See ListAssumeRoles for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ListAssumeRolesWithContext(ctx volcstack.Context, input *ListAssumeRolesInput, opts ...request.Option) (*ListAssumeRolesOutput, error) {
	req, out := c.ListAssumeRolesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDeploymentSetAttributeCommon = "ModifyDeploymentSetAttribute"

// ModifyDeploymentSetAttributeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDeploymentSetAttributeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyDeploymentSetAttributeCommon for more information on using the ModifyDeploymentSetAttributeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyDeploymentSetAttributeCommonRequest method.
//    req, resp := client.ModifyDeploymentSetAttributeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyDeploymentSetAttributeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDeploymentSetAttributeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyDeploymentSetAttributeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyDeploymentSetAttributeCommon for usage and error information.
func (c *ECS) ModifyDeploymentSetAttributeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDeploymentSetAttributeCommonRequest(input)
	return out, req.Send()
}

// ModifyDeploymentSetAttributeCommonWithContext is the same as ModifyDeploymentSetAttributeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDeploymentSetAttributeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyDeploymentSetAttributeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDeploymentSetAttributeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDeploymentSetAttribute = "ModifyDeploymentSetAttribute"

// ModifyDeploymentSetAttributeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyDeploymentSetAttribute operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyDeploymentSetAttribute for more information on using the ModifyDeploymentSetAttribute
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyDeploymentSetAttributeRequest method.
//    req, resp := client.ModifyDeploymentSetAttributeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyDeploymentSetAttributeRequest(input *ModifyDeploymentSetAttributeInput) (req *request.Request, output *ModifyDeploymentSetAttributeOutput) {
	op := &request.Operation{
		Name:       opModifyDeploymentSetAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDeploymentSetAttributeInput{}
	}

	output = &ModifyDeploymentSetAttributeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyDeploymentSetAttribute API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyDeploymentSetAttribute for usage and error information.
func (c *ECS) ModifyDeploymentSetAttribute(input *ModifyDeploymentSetAttributeInput) (*ModifyDeploymentSetAttributeOutput, error) {
	req, out := c.ModifyDeploymentSetAttributeRequest(input)
	return out, req.Send()
}

// ModifyDeploymentSetAttributeWithContext is the same as ModifyDeploymentSetAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDeploymentSetAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyDeploymentSetAttributeWithContext(ctx volcstack.Context, input *ModifyDeploymentSetAttributeInput, opts ...request.Option) (*ModifyDeploymentSetAttributeOutput, error) {
	req, out := c.ModifyDeploymentSetAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceAttributeCommon = "ModifyInstanceAttribute"

// ModifyInstanceAttributeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceAttributeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceAttributeCommon for more information on using the ModifyInstanceAttributeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceAttributeCommonRequest method.
//    req, resp := client.ModifyInstanceAttributeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceAttributeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceAttributeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceAttributeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceAttributeCommon for usage and error information.
func (c *ECS) ModifyInstanceAttributeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceAttributeCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceAttributeCommonWithContext is the same as ModifyInstanceAttributeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceAttributeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceAttributeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceAttributeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceAttribute = "ModifyInstanceAttribute"

// ModifyInstanceAttributeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceAttribute operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceAttribute for more information on using the ModifyInstanceAttribute
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceAttributeRequest method.
//    req, resp := client.ModifyInstanceAttributeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceAttributeRequest(input *ModifyInstanceAttributeInput) (req *request.Request, output *ModifyInstanceAttributeOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceAttributeInput{}
	}

	output = &ModifyInstanceAttributeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceAttribute API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceAttribute for usage and error information.
func (c *ECS) ModifyInstanceAttribute(input *ModifyInstanceAttributeInput) (*ModifyInstanceAttributeOutput, error) {
	req, out := c.ModifyInstanceAttributeRequest(input)
	return out, req.Send()
}

// ModifyInstanceAttributeWithContext is the same as ModifyInstanceAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceAttributeWithContext(ctx volcstack.Context, input *ModifyInstanceAttributeInput, opts ...request.Option) (*ModifyInstanceAttributeOutput, error) {
	req, out := c.ModifyInstanceAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceChargeTypeCommon = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceChargeTypeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceChargeTypeCommon for more information on using the ModifyInstanceChargeTypeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceChargeTypeCommonRequest method.
//    req, resp := client.ModifyInstanceChargeTypeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceChargeTypeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeTypeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceChargeTypeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceChargeTypeCommon for usage and error information.
func (c *ECS) ModifyInstanceChargeTypeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeCommonWithContext is the same as ModifyInstanceChargeTypeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeTypeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceChargeTypeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceChargeType = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceChargeType operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceChargeType for more information on using the ModifyInstanceChargeType
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceChargeTypeRequest method.
//    req, resp := client.ModifyInstanceChargeTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceChargeTypeRequest(input *ModifyInstanceChargeTypeInput) (req *request.Request, output *ModifyInstanceChargeTypeOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeType,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceChargeTypeInput{}
	}

	output = &ModifyInstanceChargeTypeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceChargeType API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceChargeType for usage and error information.
func (c *ECS) ModifyInstanceChargeType(input *ModifyInstanceChargeTypeInput) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeWithContext is the same as ModifyInstanceChargeType with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceChargeTypeWithContext(ctx volcstack.Context, input *ModifyInstanceChargeTypeInput, opts ...request.Option) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceDeploymentCommon = "ModifyInstanceDeployment"

// ModifyInstanceDeploymentCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceDeploymentCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceDeploymentCommon for more information on using the ModifyInstanceDeploymentCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceDeploymentCommonRequest method.
//    req, resp := client.ModifyInstanceDeploymentCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceDeploymentCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceDeploymentCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceDeploymentCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceDeploymentCommon for usage and error information.
func (c *ECS) ModifyInstanceDeploymentCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceDeploymentCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceDeploymentCommonWithContext is the same as ModifyInstanceDeploymentCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceDeploymentCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceDeploymentCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceDeploymentCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceDeployment = "ModifyInstanceDeployment"

// ModifyInstanceDeploymentRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceDeployment operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceDeployment for more information on using the ModifyInstanceDeployment
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceDeploymentRequest method.
//    req, resp := client.ModifyInstanceDeploymentRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceDeploymentRequest(input *ModifyInstanceDeploymentInput) (req *request.Request, output *ModifyInstanceDeploymentOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceDeployment,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceDeploymentInput{}
	}

	output = &ModifyInstanceDeploymentOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceDeployment API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceDeployment for usage and error information.
func (c *ECS) ModifyInstanceDeployment(input *ModifyInstanceDeploymentInput) (*ModifyInstanceDeploymentOutput, error) {
	req, out := c.ModifyInstanceDeploymentRequest(input)
	return out, req.Send()
}

// ModifyInstanceDeploymentWithContext is the same as ModifyInstanceDeployment with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceDeployment for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceDeploymentWithContext(ctx volcstack.Context, input *ModifyInstanceDeploymentInput, opts ...request.Option) (*ModifyInstanceDeploymentOutput, error) {
	req, out := c.ModifyInstanceDeploymentRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceSpecCommon = "ModifyInstanceSpec"

// ModifyInstanceSpecCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceSpecCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceSpecCommon for more information on using the ModifyInstanceSpecCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceSpecCommonRequest method.
//    req, resp := client.ModifyInstanceSpecCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceSpecCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceSpecCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceSpecCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceSpecCommon for usage and error information.
func (c *ECS) ModifyInstanceSpecCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceSpecCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceSpecCommonWithContext is the same as ModifyInstanceSpecCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceSpecCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceSpecCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceSpecCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceSpec = "ModifyInstanceSpec"

// ModifyInstanceSpecRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceSpec operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyInstanceSpec for more information on using the ModifyInstanceSpec
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyInstanceSpecRequest method.
//    req, resp := client.ModifyInstanceSpecRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceSpecRequest(input *ModifyInstanceSpecInput) (req *request.Request, output *ModifyInstanceSpecOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceSpec,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceSpecInput{}
	}

	output = &ModifyInstanceSpecOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceSpec API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceSpec for usage and error information.
func (c *ECS) ModifyInstanceSpec(input *ModifyInstanceSpecInput) (*ModifyInstanceSpecOutput, error) {
	req, out := c.ModifyInstanceSpecRequest(input)
	return out, req.Send()
}

// ModifyInstanceSpecWithContext is the same as ModifyInstanceSpec with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceSpec for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceSpecWithContext(ctx volcstack.Context, input *ModifyInstanceSpecInput, opts ...request.Option) (*ModifyInstanceSpecOutput, error) {
	req, out := c.ModifyInstanceSpecRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyKeyPairAttributeCommon = "ModifyKeyPairAttribute"

// ModifyKeyPairAttributeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyKeyPairAttributeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyKeyPairAttributeCommon for more information on using the ModifyKeyPairAttributeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyKeyPairAttributeCommonRequest method.
//    req, resp := client.ModifyKeyPairAttributeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyKeyPairAttributeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyKeyPairAttributeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyKeyPairAttributeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyKeyPairAttributeCommon for usage and error information.
func (c *ECS) ModifyKeyPairAttributeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyKeyPairAttributeCommonRequest(input)
	return out, req.Send()
}

// ModifyKeyPairAttributeCommonWithContext is the same as ModifyKeyPairAttributeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyKeyPairAttributeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyKeyPairAttributeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyKeyPairAttributeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyKeyPairAttribute = "ModifyKeyPairAttribute"

// ModifyKeyPairAttributeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyKeyPairAttribute operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyKeyPairAttribute for more information on using the ModifyKeyPairAttribute
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyKeyPairAttributeRequest method.
//    req, resp := client.ModifyKeyPairAttributeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyKeyPairAttributeRequest(input *ModifyKeyPairAttributeInput) (req *request.Request, output *ModifyKeyPairAttributeOutput) {
	op := &request.Operation{
		Name:       opModifyKeyPairAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyKeyPairAttributeInput{}
	}

	output = &ModifyKeyPairAttributeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyKeyPairAttribute API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyKeyPairAttribute for usage and error information.
func (c *ECS) ModifyKeyPairAttribute(input *ModifyKeyPairAttributeInput) (*ModifyKeyPairAttributeOutput, error) {
	req, out := c.ModifyKeyPairAttributeRequest(input)
	return out, req.Send()
}

// ModifyKeyPairAttributeWithContext is the same as ModifyKeyPairAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyKeyPairAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyKeyPairAttributeWithContext(ctx volcstack.Context, input *ModifyKeyPairAttributeInput, opts ...request.Option) (*ModifyKeyPairAttributeOutput, error) {
	req, out := c.ModifyKeyPairAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstanceCommon = "RebootInstance"

// RebootInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootInstanceCommon for more information on using the RebootInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootInstanceCommonRequest method.
//    req, resp := client.RebootInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRebootInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// RebootInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstanceCommon for usage and error information.
func (c *ECS) RebootInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RebootInstanceCommonRequest(input)
	return out, req.Send()
}

// RebootInstanceCommonWithContext is the same as RebootInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RebootInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstance = "RebootInstance"

// RebootInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootInstance for more information on using the RebootInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootInstanceRequest method.
//    req, resp := client.RebootInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstanceRequest(input *RebootInstanceInput) (req *request.Request, output *RebootInstanceOutput) {
	op := &request.Operation{
		Name:       opRebootInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RebootInstanceInput{}
	}

	output = &RebootInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// RebootInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstance for usage and error information.
func (c *ECS) RebootInstance(input *RebootInstanceInput) (*RebootInstanceOutput, error) {
	req, out := c.RebootInstanceRequest(input)
	return out, req.Send()
}

// RebootInstanceWithContext is the same as RebootInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstanceWithContext(ctx volcstack.Context, input *RebootInstanceInput, opts ...request.Option) (*RebootInstanceOutput, error) {
	req, out := c.RebootInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewInstanceCommon = "RenewInstance"

// RenewInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RenewInstanceCommon for more information on using the RenewInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RenewInstanceCommonRequest method.
//    req, resp := client.RenewInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RenewInstanceCommon for usage and error information.
func (c *ECS) RenewInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewInstanceCommonRequest(input)
	return out, req.Send()
}

// RenewInstanceCommonWithContext is the same as RenewInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewInstance = "RenewInstance"

// RenewInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RenewInstance for more information on using the RenewInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RenewInstanceRequest method.
//    req, resp := client.RenewInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewInstanceRequest(input *RenewInstanceInput) (req *request.Request, output *RenewInstanceOutput) {
	op := &request.Operation{
		Name:       opRenewInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewInstanceInput{}
	}

	output = &RenewInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RenewInstance for usage and error information.
func (c *ECS) RenewInstance(input *RenewInstanceInput) (*RenewInstanceOutput, error) {
	req, out := c.RenewInstanceRequest(input)
	return out, req.Send()
}

// RenewInstanceWithContext is the same as RenewInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RenewInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewInstanceWithContext(ctx volcstack.Context, input *RenewInstanceInput, opts ...request.Option) (*RenewInstanceOutput, error) {
	req, out := c.RenewInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemVolumeCommon = "ReplaceSystemVolume"

// ReplaceSystemVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemVolumeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemVolumeCommon for more information on using the ReplaceSystemVolumeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemVolumeCommonRequest method.
//    req, resp := client.ReplaceSystemVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReplaceSystemVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemVolumeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemVolumeCommon for usage and error information.
func (c *ECS) ReplaceSystemVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemVolumeCommonRequest(input)
	return out, req.Send()
}

// ReplaceSystemVolumeCommonWithContext is the same as ReplaceSystemVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemVolume = "ReplaceSystemVolume"

// ReplaceSystemVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemVolume operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemVolume for more information on using the ReplaceSystemVolume
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemVolumeRequest method.
//    req, resp := client.ReplaceSystemVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemVolumeRequest(input *ReplaceSystemVolumeInput) (req *request.Request, output *ReplaceSystemVolumeOutput) {
	op := &request.Operation{
		Name:       opReplaceSystemVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ReplaceSystemVolumeInput{}
	}

	output = &ReplaceSystemVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemVolume API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemVolume for usage and error information.
func (c *ECS) ReplaceSystemVolume(input *ReplaceSystemVolumeInput) (*ReplaceSystemVolumeOutput, error) {
	req, out := c.ReplaceSystemVolumeRequest(input)
	return out, req.Send()
}

// ReplaceSystemVolumeWithContext is the same as ReplaceSystemVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemVolumeWithContext(ctx volcstack.Context, input *ReplaceSystemVolumeInput, opts ...request.Option) (*ReplaceSystemVolumeOutput, error) {
	req, out := c.ReplaceSystemVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemsVolumeCommon = "ReplaceSystemsVolume"

// ReplaceSystemsVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemsVolumeCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemsVolumeCommon for more information on using the ReplaceSystemsVolumeCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemsVolumeCommonRequest method.
//    req, resp := client.ReplaceSystemsVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemsVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReplaceSystemsVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemsVolumeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemsVolumeCommon for usage and error information.
func (c *ECS) ReplaceSystemsVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemsVolumeCommonRequest(input)
	return out, req.Send()
}

// ReplaceSystemsVolumeCommonWithContext is the same as ReplaceSystemsVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemsVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemsVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemsVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemsVolume = "ReplaceSystemsVolume"

// ReplaceSystemsVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemsVolume operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ReplaceSystemsVolume for more information on using the ReplaceSystemsVolume
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ReplaceSystemsVolumeRequest method.
//    req, resp := client.ReplaceSystemsVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemsVolumeRequest(input *ReplaceSystemsVolumeInput) (req *request.Request, output *ReplaceSystemsVolumeOutput) {
	op := &request.Operation{
		Name:       opReplaceSystemsVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ReplaceSystemsVolumeInput{}
	}

	output = &ReplaceSystemsVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ReplaceSystemsVolume API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemsVolume for usage and error information.
func (c *ECS) ReplaceSystemsVolume(input *ReplaceSystemsVolumeInput) (*ReplaceSystemsVolumeOutput, error) {
	req, out := c.ReplaceSystemsVolumeRequest(input)
	return out, req.Send()
}

// ReplaceSystemsVolumeWithContext is the same as ReplaceSystemsVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemsVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemsVolumeWithContext(ctx volcstack.Context, input *ReplaceSystemsVolumeInput, opts ...request.Option) (*ReplaceSystemsVolumeOutput, error) {
	req, out := c.ReplaceSystemsVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetAuthenticationCommon = "ResetAuthentication"

// ResetAuthenticationCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetAuthenticationCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResetAuthenticationCommon for more information on using the ResetAuthenticationCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResetAuthenticationCommonRequest method.
//    req, resp := client.ResetAuthenticationCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResetAuthenticationCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResetAuthenticationCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResetAuthenticationCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResetAuthenticationCommon for usage and error information.
func (c *ECS) ResetAuthenticationCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResetAuthenticationCommonRequest(input)
	return out, req.Send()
}

// ResetAuthenticationCommonWithContext is the same as ResetAuthenticationCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAuthenticationCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResetAuthenticationCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResetAuthenticationCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetAuthentication = "ResetAuthentication"

// ResetAuthenticationRequest generates a "volcstack/request.Request" representing the
// client's request for the ResetAuthentication operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResetAuthentication for more information on using the ResetAuthentication
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResetAuthenticationRequest method.
//    req, resp := client.ResetAuthenticationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResetAuthenticationRequest(input *ResetAuthenticationInput) (req *request.Request, output *ResetAuthenticationOutput) {
	op := &request.Operation{
		Name:       opResetAuthentication,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetAuthenticationInput{}
	}

	output = &ResetAuthenticationOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResetAuthentication API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResetAuthentication for usage and error information.
func (c *ECS) ResetAuthentication(input *ResetAuthenticationInput) (*ResetAuthenticationOutput, error) {
	req, out := c.ResetAuthenticationRequest(input)
	return out, req.Send()
}

// ResetAuthenticationWithContext is the same as ResetAuthentication with the addition of
// the ability to pass a context and additional request options.
//
// See ResetAuthentication for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResetAuthenticationWithContext(ctx volcstack.Context, input *ResetAuthenticationInput, opts ...request.Option) (*ResetAuthenticationOutput, error) {
	req, out := c.ResetAuthenticationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResizeInstanceCommon = "ResizeInstance"

// ResizeInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ResizeInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResizeInstanceCommon for more information on using the ResizeInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResizeInstanceCommonRequest method.
//    req, resp := client.ResizeInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResizeInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opResizeInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResizeInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResizeInstanceCommon for usage and error information.
func (c *ECS) ResizeInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ResizeInstanceCommonRequest(input)
	return out, req.Send()
}

// ResizeInstanceCommonWithContext is the same as ResizeInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ResizeInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResizeInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ResizeInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResizeInstance = "ResizeInstance"

// ResizeInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the ResizeInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResizeInstance for more information on using the ResizeInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResizeInstanceRequest method.
//    req, resp := client.ResizeInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ResizeInstanceRequest(input *ResizeInstanceInput) (req *request.Request, output *ResizeInstanceOutput) {
	op := &request.Operation{
		Name:       opResizeInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResizeInstanceInput{}
	}

	output = &ResizeInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ResizeInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ResizeInstance for usage and error information.
func (c *ECS) ResizeInstance(input *ResizeInstanceInput) (*ResizeInstanceOutput, error) {
	req, out := c.ResizeInstanceRequest(input)
	return out, req.Send()
}

// ResizeInstanceWithContext is the same as ResizeInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ResizeInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ResizeInstanceWithContext(ctx volcstack.Context, input *ResizeInstanceInput, opts ...request.Option) (*ResizeInstanceOutput, error) {
	req, out := c.ResizeInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunInstancesCommon = "RunInstances"

// RunInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RunInstancesCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RunInstancesCommon for more information on using the RunInstancesCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RunInstancesCommonRequest method.
//    req, resp := client.RunInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RunInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRunInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RunInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RunInstancesCommon for usage and error information.
func (c *ECS) RunInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RunInstancesCommonRequest(input)
	return out, req.Send()
}

// RunInstancesCommonWithContext is the same as RunInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RunInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RunInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RunInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunInstances = "RunInstances"

// RunInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the RunInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RunInstances for more information on using the RunInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RunInstancesRequest method.
//    req, resp := client.RunInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RunInstancesRequest(input *RunInstancesInput) (req *request.Request, output *RunInstancesOutput) {
	op := &request.Operation{
		Name:       opRunInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RunInstancesInput{}
	}

	output = &RunInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RunInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RunInstances for usage and error information.
func (c *ECS) RunInstances(input *RunInstancesInput) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	return out, req.Send()
}

// RunInstancesWithContext is the same as RunInstances with the addition of
// the ability to pass a context and additional request options.
//
// See RunInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RunInstancesWithContext(ctx volcstack.Context, input *RunInstancesInput, opts ...request.Option) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstanceCommon = "StartInstance"

// StartInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartInstanceCommon for more information on using the StartInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartInstanceCommonRequest method.
//    req, resp := client.StartInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// StartInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstanceCommon for usage and error information.
func (c *ECS) StartInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartInstanceCommonRequest(input)
	return out, req.Send()
}

// StartInstanceCommonWithContext is the same as StartInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstance = "StartInstance"

// StartInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StartInstance for more information on using the StartInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StartInstanceRequest method.
//    req, resp := client.StartInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstanceRequest(input *StartInstanceInput) (req *request.Request, output *StartInstanceOutput) {
	op := &request.Operation{
		Name:       opStartInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartInstanceInput{}
	}

	output = &StartInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// StartInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstance for usage and error information.
func (c *ECS) StartInstance(input *StartInstanceInput) (*StartInstanceOutput, error) {
	req, out := c.StartInstanceRequest(input)
	return out, req.Send()
}

// StartInstanceWithContext is the same as StartInstance with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstanceWithContext(ctx volcstack.Context, input *StartInstanceInput, opts ...request.Option) (*StartInstanceOutput, error) {
	req, out := c.StartInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstanceCommon = "StopInstance"

// StopInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstanceCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopInstanceCommon for more information on using the StopInstanceCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StopInstanceCommonRequest method.
//    req, resp := client.StopInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// StopInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstanceCommon for usage and error information.
func (c *ECS) StopInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopInstanceCommonRequest(input)
	return out, req.Send()
}

// StopInstanceCommonWithContext is the same as StopInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstance = "StopInstance"

// StopInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See StopInstance for more information on using the StopInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the StopInstanceRequest method.
//    req, resp := client.StopInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstanceRequest(input *StopInstanceInput) (req *request.Request, output *StopInstanceOutput) {
	op := &request.Operation{
		Name:       opStopInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopInstanceInput{}
	}

	output = &StopInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// StopInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstance for usage and error information.
func (c *ECS) StopInstance(input *StopInstanceInput) (*StopInstanceOutput, error) {
	req, out := c.StopInstanceRequest(input)
	return out, req.Send()
}

// StopInstanceWithContext is the same as StopInstance with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstanceWithContext(ctx volcstack.Context, input *StopInstanceInput, opts ...request.Option) (*StopInstanceOutput, error) {
	req, out := c.StopInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnbindAssumeRoleCommon = "UnbindAssumeRole"

// UnbindAssumeRoleCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the UnbindAssumeRoleCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UnbindAssumeRoleCommon for more information on using the UnbindAssumeRoleCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the UnbindAssumeRoleCommonRequest method.
//    req, resp := client.UnbindAssumeRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UnbindAssumeRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUnbindAssumeRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// UnbindAssumeRoleCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation UnbindAssumeRoleCommon for usage and error information.
func (c *ECS) UnbindAssumeRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UnbindAssumeRoleCommonRequest(input)
	return out, req.Send()
}

// UnbindAssumeRoleCommonWithContext is the same as UnbindAssumeRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindAssumeRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UnbindAssumeRoleCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UnbindAssumeRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUnbindAssumeRole = "UnbindAssumeRole"

// UnbindAssumeRoleRequest generates a "volcstack/request.Request" representing the
// client's request for the UnbindAssumeRole operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See UnbindAssumeRole for more information on using the UnbindAssumeRole
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the UnbindAssumeRoleRequest method.
//    req, resp := client.UnbindAssumeRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) UnbindAssumeRoleRequest(input *UnbindAssumeRoleInput) (req *request.Request, output *UnbindAssumeRoleOutput) {
	op := &request.Operation{
		Name:       opUnbindAssumeRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UnbindAssumeRoleInput{}
	}

	output = &UnbindAssumeRoleOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// UnbindAssumeRole API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation UnbindAssumeRole for usage and error information.
func (c *ECS) UnbindAssumeRole(input *UnbindAssumeRoleInput) (*UnbindAssumeRoleOutput, error) {
	req, out := c.UnbindAssumeRoleRequest(input)
	return out, req.Send()
}

// UnbindAssumeRoleWithContext is the same as UnbindAssumeRole with the addition of
// the ability to pass a context and additional request options.
//
// See UnbindAssumeRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) UnbindAssumeRoleWithContext(ctx volcstack.Context, input *UnbindAssumeRoleInput, opts ...request.Option) (*UnbindAssumeRoleOutput, error) {
	req, out := c.UnbindAssumeRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opV1ListResourceStatisticsCommon = "v1ListResourceStatistics"

// V1ListResourceStatisticsCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the V1ListResourceStatisticsCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See V1ListResourceStatisticsCommon for more information on using the V1ListResourceStatisticsCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the V1ListResourceStatisticsCommonRequest method.
//    req, resp := client.V1ListResourceStatisticsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) V1ListResourceStatisticsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opV1ListResourceStatisticsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// V1ListResourceStatisticsCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation V1ListResourceStatisticsCommon for usage and error information.
func (c *ECS) V1ListResourceStatisticsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.V1ListResourceStatisticsCommonRequest(input)
	return out, req.Send()
}

// V1ListResourceStatisticsCommonWithContext is the same as V1ListResourceStatisticsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See V1ListResourceStatisticsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) V1ListResourceStatisticsCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.V1ListResourceStatisticsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opV1ListResourceStatistics = "v1ListResourceStatistics"

// V1ListResourceStatisticsRequest generates a "volcstack/request.Request" representing the
// client's request for the V1ListResourceStatistics operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See V1ListResourceStatistics for more information on using the V1ListResourceStatistics
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the V1ListResourceStatisticsRequest method.
//    req, resp := client.V1ListResourceStatisticsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) V1ListResourceStatisticsRequest(input *V1ListResourceStatisticsInput) (req *request.Request, output *V1ListResourceStatisticsOutput) {
	op := &request.Operation{
		Name:       opV1ListResourceStatistics,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &V1ListResourceStatisticsInput{}
	}

	output = &V1ListResourceStatisticsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// V1ListResourceStatistics API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation V1ListResourceStatistics for usage and error information.
func (c *ECS) V1ListResourceStatistics(input *V1ListResourceStatisticsInput) (*V1ListResourceStatisticsOutput, error) {
	req, out := c.V1ListResourceStatisticsRequest(input)
	return out, req.Send()
}

// V1ListResourceStatisticsWithContext is the same as V1ListResourceStatistics with the addition of
// the ability to pass a context and additional request options.
//
// See V1ListResourceStatistics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) V1ListResourceStatisticsWithContext(ctx volcstack.Context, input *V1ListResourceStatisticsInput, opts ...request.Option) (*V1ListResourceStatisticsOutput, error) {
	req, out := c.V1ListResourceStatisticsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opV1UpdateStatusCommon = "v1UpdateStatus"

// V1UpdateStatusCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the V1UpdateStatusCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See V1UpdateStatusCommon for more information on using the V1UpdateStatusCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the V1UpdateStatusCommonRequest method.
//    req, resp := client.V1UpdateStatusCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) V1UpdateStatusCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opV1UpdateStatusCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// V1UpdateStatusCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation V1UpdateStatusCommon for usage and error information.
func (c *ECS) V1UpdateStatusCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.V1UpdateStatusCommonRequest(input)
	return out, req.Send()
}

// V1UpdateStatusCommonWithContext is the same as V1UpdateStatusCommon with the addition of
// the ability to pass a context and additional request options.
//
// See V1UpdateStatusCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) V1UpdateStatusCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.V1UpdateStatusCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opV1UpdateStatus = "v1UpdateStatus"

// V1UpdateStatusRequest generates a "volcstack/request.Request" representing the
// client's request for the V1UpdateStatus operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See V1UpdateStatus for more information on using the V1UpdateStatus
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the V1UpdateStatusRequest method.
//    req, resp := client.V1UpdateStatusRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) V1UpdateStatusRequest(input *V1UpdateStatusInput) (req *request.Request, output *V1UpdateStatusOutput) {
	op := &request.Operation{
		Name:       opV1UpdateStatus,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &V1UpdateStatusInput{}
	}

	output = &V1UpdateStatusOutput{}
	req = c.newRequest(op, input, output)

	return
}

// V1UpdateStatus API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation V1UpdateStatus for usage and error information.
func (c *ECS) V1UpdateStatus(input *V1UpdateStatusInput) (*V1UpdateStatusOutput, error) {
	req, out := c.V1UpdateStatusRequest(input)
	return out, req.Send()
}

// V1UpdateStatusWithContext is the same as V1UpdateStatus with the addition of
// the ability to pass a context and additional request options.
//
// See V1UpdateStatus for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) V1UpdateStatusWithContext(ctx volcstack.Context, input *V1UpdateStatusInput, opts ...request.Option) (*V1UpdateStatusOutput, error) {
	req, out := c.V1UpdateStatusRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opVerifyKeyPairNameExistCommon = "VerifyKeyPairNameExist"

// VerifyKeyPairNameExistCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the VerifyKeyPairNameExistCommon operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See VerifyKeyPairNameExistCommon for more information on using the VerifyKeyPairNameExistCommon
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the VerifyKeyPairNameExistCommonRequest method.
//    req, resp := client.VerifyKeyPairNameExistCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) VerifyKeyPairNameExistCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opVerifyKeyPairNameExistCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// VerifyKeyPairNameExistCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation VerifyKeyPairNameExistCommon for usage and error information.
func (c *ECS) VerifyKeyPairNameExistCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.VerifyKeyPairNameExistCommonRequest(input)
	return out, req.Send()
}

// VerifyKeyPairNameExistCommonWithContext is the same as VerifyKeyPairNameExistCommon with the addition of
// the ability to pass a context and additional request options.
//
// See VerifyKeyPairNameExistCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) VerifyKeyPairNameExistCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.VerifyKeyPairNameExistCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opVerifyKeyPairNameExist = "VerifyKeyPairNameExist"

// VerifyKeyPairNameExistRequest generates a "volcstack/request.Request" representing the
// client's request for the VerifyKeyPairNameExist operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See VerifyKeyPairNameExist for more information on using the VerifyKeyPairNameExist
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the VerifyKeyPairNameExistRequest method.
//    req, resp := client.VerifyKeyPairNameExistRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) VerifyKeyPairNameExistRequest(input *VerifyKeyPairNameExistInput) (req *request.Request, output *VerifyKeyPairNameExistOutput) {
	op := &request.Operation{
		Name:       opVerifyKeyPairNameExist,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &VerifyKeyPairNameExistInput{}
	}

	output = &VerifyKeyPairNameExistOutput{}
	req = c.newRequest(op, input, output)

	return
}

// VerifyKeyPairNameExist API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation VerifyKeyPairNameExist for usage and error information.
func (c *ECS) VerifyKeyPairNameExist(input *VerifyKeyPairNameExistInput) (*VerifyKeyPairNameExistOutput, error) {
	req, out := c.VerifyKeyPairNameExistRequest(input)
	return out, req.Send()
}

// VerifyKeyPairNameExistWithContext is the same as VerifyKeyPairNameExist with the addition of
// the ability to pass a context and additional request options.
//
// See VerifyKeyPairNameExist for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) VerifyKeyPairNameExistWithContext(ctx volcstack.Context, input *VerifyKeyPairNameExistInput, opts ...request.Option) (*VerifyKeyPairNameExistOutput, error) {
	req, out := c.VerifyKeyPairNameExistRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccountDistributionForv1ListResourceStatisticsOutput struct {
	_ struct{} `type:"structure"`

	AccountID *string `type:"string"`

	InsOtherNum *int64 `type:"integer"`

	InsRunningNum *int64 `type:"integer"`

	InsStoppedNum *int64 `type:"integer"`

	InsTotalNum *int64 `type:"integer"`

	VolumeNum *int64 `type:"integer"`
}

// String returns the string representation
func (s AccountDistributionForv1ListResourceStatisticsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AccountDistributionForv1ListResourceStatisticsOutput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *AccountDistributionForv1ListResourceStatisticsOutput) SetAccountID(v string) *AccountDistributionForv1ListResourceStatisticsOutput {
	s.AccountID = &v
	return s
}

// SetInsOtherNum sets the InsOtherNum field's value.
func (s *AccountDistributionForv1ListResourceStatisticsOutput) SetInsOtherNum(v int64) *AccountDistributionForv1ListResourceStatisticsOutput {
	s.InsOtherNum = &v
	return s
}

// SetInsRunningNum sets the InsRunningNum field's value.
func (s *AccountDistributionForv1ListResourceStatisticsOutput) SetInsRunningNum(v int64) *AccountDistributionForv1ListResourceStatisticsOutput {
	s.InsRunningNum = &v
	return s
}

// SetInsStoppedNum sets the InsStoppedNum field's value.
func (s *AccountDistributionForv1ListResourceStatisticsOutput) SetInsStoppedNum(v int64) *AccountDistributionForv1ListResourceStatisticsOutput {
	s.InsStoppedNum = &v
	return s
}

// SetInsTotalNum sets the InsTotalNum field's value.
func (s *AccountDistributionForv1ListResourceStatisticsOutput) SetInsTotalNum(v int64) *AccountDistributionForv1ListResourceStatisticsOutput {
	s.InsTotalNum = &v
	return s
}

// SetVolumeNum sets the VolumeNum field's value.
func (s *AccountDistributionForv1ListResourceStatisticsOutput) SetVolumeNum(v int64) *AccountDistributionForv1ListResourceStatisticsOutput {
	s.VolumeNum = &v
	return s
}

type AttachKeyPairInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s AttachKeyPairInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachKeyPairInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *AttachKeyPairInput) SetAccountId(v string) *AttachKeyPairInput {
	s.AccountId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *AttachKeyPairInput) SetInstanceIds(v []*string) *AttachKeyPairInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *AttachKeyPairInput) SetKeyPairId(v string) *AttachKeyPairInput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *AttachKeyPairInput) SetKeyPairName(v string) *AttachKeyPairInput {
	s.KeyPairName = &v
	return s
}

type AttachKeyPairOutput struct {
	_ struct{} `type:"structure"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s AttachKeyPairOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachKeyPairOutput) GoString() string {
	return s.String()
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *AttachKeyPairOutput) SetKeyPairName(v string) *AttachKeyPairOutput {
	s.KeyPairName = &v
	return s
}

type AvailableResourcForDescribeAvailableResourceOutput struct {
	_ struct{} `type:"structure"`

	SupportedResources []*SupportedResourcForDescribeAvailableResourceOutput `type:"list"`

	Type *string `type:"string"`
}

// String returns the string representation
func (s AvailableResourcForDescribeAvailableResourceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AvailableResourcForDescribeAvailableResourceOutput) GoString() string {
	return s.String()
}

// SetSupportedResources sets the SupportedResources field's value.
func (s *AvailableResourcForDescribeAvailableResourceOutput) SetSupportedResources(v []*SupportedResourcForDescribeAvailableResourceOutput) *AvailableResourcForDescribeAvailableResourceOutput {
	s.SupportedResources = v
	return s
}

// SetType sets the Type field's value.
func (s *AvailableResourcForDescribeAvailableResourceOutput) SetType(v string) *AvailableResourcForDescribeAvailableResourceOutput {
	s.Type = &v
	return s
}

type AvailableZonForDescribeAvailableResourceOutput struct {
	_ struct{} `type:"structure"`

	AvailableResources []*AvailableResourcForDescribeAvailableResourceOutput `type:"list"`

	RegionId *string `type:"string"`

	Status *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s AvailableZonForDescribeAvailableResourceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AvailableZonForDescribeAvailableResourceOutput) GoString() string {
	return s.String()
}

// SetAvailableResources sets the AvailableResources field's value.
func (s *AvailableZonForDescribeAvailableResourceOutput) SetAvailableResources(v []*AvailableResourcForDescribeAvailableResourceOutput) *AvailableZonForDescribeAvailableResourceOutput {
	s.AvailableResources = v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *AvailableZonForDescribeAvailableResourceOutput) SetRegionId(v string) *AvailableZonForDescribeAvailableResourceOutput {
	s.RegionId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *AvailableZonForDescribeAvailableResourceOutput) SetStatus(v string) *AvailableZonForDescribeAvailableResourceOutput {
	s.Status = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *AvailableZonForDescribeAvailableResourceOutput) SetZoneId(v string) *AvailableZonForDescribeAvailableResourceOutput {
	s.ZoneId = &v
	return s
}

type BindAssumeRoleInput struct {
	_ struct{} `type:"structure"`

	AssumeRole *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s BindAssumeRoleInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BindAssumeRoleInput) GoString() string {
	return s.String()
}

// SetAssumeRole sets the AssumeRole field's value.
func (s *BindAssumeRoleInput) SetAssumeRole(v string) *BindAssumeRoleInput {
	s.AssumeRole = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *BindAssumeRoleInput) SetInstanceId(v string) *BindAssumeRoleInput {
	s.InstanceId = &v
	return s
}

type BindAssumeRoleOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s BindAssumeRoleOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s BindAssumeRoleOutput) GoString() string {
	return s.String()
}

type CpuOptionsForCreateInstancesInput struct {
	_ struct{} `type:"structure"`

	Numa *int64 `type:"integer"`
}

// String returns the string representation
func (s CpuOptionsForCreateInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CpuOptionsForCreateInstancesInput) GoString() string {
	return s.String()
}

// SetNuma sets the Numa field's value.
func (s *CpuOptionsForCreateInstancesInput) SetNuma(v int64) *CpuOptionsForCreateInstancesInput {
	s.Numa = &v
	return s
}

type CpuOptionsForRunInstancesInput struct {
	_ struct{} `type:"structure"`

	Numa *int64 `type:"integer"`
}

// String returns the string representation
func (s CpuOptionsForRunInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CpuOptionsForRunInstancesInput) GoString() string {
	return s.String()
}

// SetNuma sets the Numa field's value.
func (s *CpuOptionsForRunInstancesInput) SetNuma(v int64) *CpuOptionsForRunInstancesInput {
	s.Numa = &v
	return s
}

type CreateDeploymentSetInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	DeploymentSetName *string `type:"string"`

	Description *string `type:"string"`

	Granularity *string `type:"string"`

	Strategy *string `type:"string"`
}

// String returns the string representation
func (s CreateDeploymentSetInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeploymentSetInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CreateDeploymentSetInput) SetAccountId(v string) *CreateDeploymentSetInput {
	s.AccountId = &v
	return s
}

// SetDeploymentSetName sets the DeploymentSetName field's value.
func (s *CreateDeploymentSetInput) SetDeploymentSetName(v string) *CreateDeploymentSetInput {
	s.DeploymentSetName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateDeploymentSetInput) SetDescription(v string) *CreateDeploymentSetInput {
	s.Description = &v
	return s
}

// SetGranularity sets the Granularity field's value.
func (s *CreateDeploymentSetInput) SetGranularity(v string) *CreateDeploymentSetInput {
	s.Granularity = &v
	return s
}

// SetStrategy sets the Strategy field's value.
func (s *CreateDeploymentSetInput) SetStrategy(v string) *CreateDeploymentSetInput {
	s.Strategy = &v
	return s
}

type CreateDeploymentSetOutput struct {
	_ struct{} `type:"structure"`

	DeploymentSetId *string `type:"string"`
}

// String returns the string representation
func (s CreateDeploymentSetOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDeploymentSetOutput) GoString() string {
	return s.String()
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *CreateDeploymentSetOutput) SetDeploymentSetId(v string) *CreateDeploymentSetOutput {
	s.DeploymentSetId = &v
	return s
}

type CreateHpcClusterInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s CreateHpcClusterInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateHpcClusterInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *CreateHpcClusterInput) SetDescription(v string) *CreateHpcClusterInput {
	s.Description = &v
	return s
}

// SetName sets the Name field's value.
func (s *CreateHpcClusterInput) SetName(v string) *CreateHpcClusterInput {
	s.Name = &v
	return s
}

type CreateHpcClusterOutput struct {
	_ struct{} `type:"structure"`

	HpcClusterId *string `type:"string"`
}

// String returns the string representation
func (s CreateHpcClusterOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateHpcClusterOutput) GoString() string {
	return s.String()
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *CreateHpcClusterOutput) SetHpcClusterId(v string) *CreateHpcClusterOutput {
	s.HpcClusterId = &v
	return s
}

type CreateInstancesInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	AutoRenewPeriod *int64 `type:"integer"`

	Count *int64 `type:"integer"`

	CpuOptions *CpuOptionsForCreateInstancesInput `type:"structure"`

	DeploymentSetId *string `type:"string"`

	Description *string `type:"string"`

	DryRun *bool `type:"boolean"`

	HostName *string `type:"string"`

	HpcClusterId *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	Ipv6Address []*string `type:"list"`

	Ipv6AddressCount *int64 `type:"integer"`

	Kerberos *bool `type:"boolean"`

	KeyPairName *string `type:"string"`

	NetworkInterfaces []*string `type:"list"`

	Password *string `type:"string"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`

	SecurityEnhancementStrategy *string `type:"string"`

	SuffixIndex *int64 `type:"integer"`

	Tag []*string `type:"list"`

	UniqueSuffix *bool `type:"boolean"`

	UserData *string `type:"string"`

	Volumes []*string `type:"list"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s CreateInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInstancesInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *CreateInstancesInput) SetAutoRenew(v bool) *CreateInstancesInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *CreateInstancesInput) SetAutoRenewPeriod(v int64) *CreateInstancesInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetCount sets the Count field's value.
func (s *CreateInstancesInput) SetCount(v int64) *CreateInstancesInput {
	s.Count = &v
	return s
}

// SetCpuOptions sets the CpuOptions field's value.
func (s *CreateInstancesInput) SetCpuOptions(v *CpuOptionsForCreateInstancesInput) *CreateInstancesInput {
	s.CpuOptions = v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *CreateInstancesInput) SetDeploymentSetId(v string) *CreateInstancesInput {
	s.DeploymentSetId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateInstancesInput) SetDescription(v string) *CreateInstancesInput {
	s.Description = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *CreateInstancesInput) SetDryRun(v bool) *CreateInstancesInput {
	s.DryRun = &v
	return s
}

// SetHostName sets the HostName field's value.
func (s *CreateInstancesInput) SetHostName(v string) *CreateInstancesInput {
	s.HostName = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *CreateInstancesInput) SetHpcClusterId(v string) *CreateInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *CreateInstancesInput) SetImageId(v string) *CreateInstancesInput {
	s.ImageId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *CreateInstancesInput) SetInstanceChargeType(v string) *CreateInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *CreateInstancesInput) SetInstanceName(v string) *CreateInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *CreateInstancesInput) SetInstanceType(v string) *CreateInstancesInput {
	s.InstanceType = &v
	return s
}

// SetIpv6Address sets the Ipv6Address field's value.
func (s *CreateInstancesInput) SetIpv6Address(v []*string) *CreateInstancesInput {
	s.Ipv6Address = v
	return s
}

// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
func (s *CreateInstancesInput) SetIpv6AddressCount(v int64) *CreateInstancesInput {
	s.Ipv6AddressCount = &v
	return s
}

// SetKerberos sets the Kerberos field's value.
func (s *CreateInstancesInput) SetKerberos(v bool) *CreateInstancesInput {
	s.Kerberos = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *CreateInstancesInput) SetKeyPairName(v string) *CreateInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfaces sets the NetworkInterfaces field's value.
func (s *CreateInstancesInput) SetNetworkInterfaces(v []*string) *CreateInstancesInput {
	s.NetworkInterfaces = v
	return s
}

// SetPassword sets the Password field's value.
func (s *CreateInstancesInput) SetPassword(v string) *CreateInstancesInput {
	s.Password = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *CreateInstancesInput) SetPeriod(v int64) *CreateInstancesInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *CreateInstancesInput) SetPeriodUnit(v string) *CreateInstancesInput {
	s.PeriodUnit = &v
	return s
}

// SetSecurityEnhancementStrategy sets the SecurityEnhancementStrategy field's value.
func (s *CreateInstancesInput) SetSecurityEnhancementStrategy(v string) *CreateInstancesInput {
	s.SecurityEnhancementStrategy = &v
	return s
}

// SetSuffixIndex sets the SuffixIndex field's value.
func (s *CreateInstancesInput) SetSuffixIndex(v int64) *CreateInstancesInput {
	s.SuffixIndex = &v
	return s
}

// SetTag sets the Tag field's value.
func (s *CreateInstancesInput) SetTag(v []*string) *CreateInstancesInput {
	s.Tag = v
	return s
}

// SetUniqueSuffix sets the UniqueSuffix field's value.
func (s *CreateInstancesInput) SetUniqueSuffix(v bool) *CreateInstancesInput {
	s.UniqueSuffix = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *CreateInstancesInput) SetUserData(v string) *CreateInstancesInput {
	s.UserData = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *CreateInstancesInput) SetVolumes(v []*string) *CreateInstancesInput {
	s.Volumes = v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *CreateInstancesInput) SetZoneId(v string) *CreateInstancesInput {
	s.ZoneId = &v
	return s
}

type CreateInstancesOutput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `type:"list"`
}

// String returns the string representation
func (s CreateInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateInstancesOutput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *CreateInstancesOutput) SetInstanceIds(v []*string) *CreateInstancesOutput {
	s.InstanceIds = v
	return s
}

type CreateKeyPairInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	Description *string `type:"string"`

	KeyPairName *string `type:"string"`

	ProjectName *string `type:"string"`
}

// String returns the string representation
func (s CreateKeyPairInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateKeyPairInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *CreateKeyPairInput) SetAccountId(v string) *CreateKeyPairInput {
	s.AccountId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateKeyPairInput) SetDescription(v string) *CreateKeyPairInput {
	s.Description = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *CreateKeyPairInput) SetKeyPairName(v string) *CreateKeyPairInput {
	s.KeyPairName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *CreateKeyPairInput) SetProjectName(v string) *CreateKeyPairInput {
	s.ProjectName = &v
	return s
}

type CreateKeyPairOutput struct {
	_ struct{} `type:"structure"`

	FingerPrint *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`

	PrivateKey *string `type:"string"`
}

// String returns the string representation
func (s CreateKeyPairOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateKeyPairOutput) GoString() string {
	return s.String()
}

// SetFingerPrint sets the FingerPrint field's value.
func (s *CreateKeyPairOutput) SetFingerPrint(v string) *CreateKeyPairOutput {
	s.FingerPrint = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *CreateKeyPairOutput) SetKeyPairId(v string) *CreateKeyPairOutput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *CreateKeyPairOutput) SetKeyPairName(v string) *CreateKeyPairOutput {
	s.KeyPairName = &v
	return s
}

// SetPrivateKey sets the PrivateKey field's value.
func (s *CreateKeyPairOutput) SetPrivateKey(v string) *CreateKeyPairOutput {
	s.PrivateKey = &v
	return s
}

type DeleteDeploymentSetInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	DeploymentSetId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDeploymentSetInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDeploymentSetInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DeleteDeploymentSetInput) SetAccountId(v string) *DeleteDeploymentSetInput {
	s.AccountId = &v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *DeleteDeploymentSetInput) SetDeploymentSetId(v string) *DeleteDeploymentSetInput {
	s.DeploymentSetId = &v
	return s
}

type DeleteDeploymentSetOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDeploymentSetOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDeploymentSetOutput) GoString() string {
	return s.String()
}

type DeleteHpcClusterInput struct {
	_ struct{} `type:"structure"`

	HpcClusterId *string `type:"string"`
}

// String returns the string representation
func (s DeleteHpcClusterInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteHpcClusterInput) GoString() string {
	return s.String()
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DeleteHpcClusterInput) SetHpcClusterId(v string) *DeleteHpcClusterInput {
	s.HpcClusterId = &v
	return s
}

type DeleteHpcClusterOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteHpcClusterOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteHpcClusterOutput) GoString() string {
	return s.String()
}

type DeleteInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	Force *bool `type:"boolean"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *DeleteInstanceInput) SetDryRun(v bool) *DeleteInstanceInput {
	s.DryRun = &v
	return s
}

// SetForce sets the Force field's value.
func (s *DeleteInstanceInput) SetForce(v bool) *DeleteInstanceInput {
	s.Force = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteInstanceInput) SetInstanceId(v string) *DeleteInstanceInput {
	s.InstanceId = &v
	return s
}

type DeleteInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstanceOutput) GoString() string {
	return s.String()
}

type DeleteKeyPairInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s DeleteKeyPairInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DeleteKeyPairInput) SetAccountId(v string) *DeleteKeyPairInput {
	s.AccountId = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *DeleteKeyPairInput) SetKeyPairId(v string) *DeleteKeyPairInput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DeleteKeyPairInput) SetKeyPairName(v string) *DeleteKeyPairInput {
	s.KeyPairName = &v
	return s
}

type DeleteKeyPairOutput struct {
	_ struct{} `type:"structure"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s DeleteKeyPairOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairOutput) GoString() string {
	return s.String()
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DeleteKeyPairOutput) SetKeyPairName(v string) *DeleteKeyPairOutput {
	s.KeyPairName = &v
	return s
}

type DeleteKeyPairsInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	KeyPairIds []*string `type:"list"`

	KeyPairNames []*string `type:"list"`
}

// String returns the string representation
func (s DeleteKeyPairsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairsInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DeleteKeyPairsInput) SetAccountId(v string) *DeleteKeyPairsInput {
	s.AccountId = &v
	return s
}

// SetKeyPairIds sets the KeyPairIds field's value.
func (s *DeleteKeyPairsInput) SetKeyPairIds(v []*string) *DeleteKeyPairsInput {
	s.KeyPairIds = v
	return s
}

// SetKeyPairNames sets the KeyPairNames field's value.
func (s *DeleteKeyPairsInput) SetKeyPairNames(v []*string) *DeleteKeyPairsInput {
	s.KeyPairNames = v
	return s
}

type DeleteKeyPairsOutput struct {
	_ struct{} `type:"structure"`

	KeyPairNames []*string `type:"list"`
}

// String returns the string representation
func (s DeleteKeyPairsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairsOutput) GoString() string {
	return s.String()
}

// SetKeyPairNames sets the KeyPairNames field's value.
func (s *DeleteKeyPairsOutput) SetKeyPairNames(v []*string) *DeleteKeyPairsOutput {
	s.KeyPairNames = v
	return s
}

type DeploymentSetForDescribeDeploymentSetsOutput struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	DeploymentSetDescription *string `type:"string"`

	DeploymentSetId *string `type:"string"`

	DeploymentSetName *string `type:"string"`

	Granularity *string `type:"string"`

	InstanceAmount *int64 `type:"integer"`

	InstanceIds []*string `type:"list"`

	Quota *int64 `type:"integer"`

	QuotaUsed []*QuotaUsedForDescribeDeploymentSetsOutput `type:"list"`

	Strategy *string `type:"string"`
}

// String returns the string representation
func (s DeploymentSetForDescribeDeploymentSetsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeploymentSetForDescribeDeploymentSetsOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetCreatedAt(v string) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.CreatedAt = &v
	return s
}

// SetDeploymentSetDescription sets the DeploymentSetDescription field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetDeploymentSetDescription(v string) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.DeploymentSetDescription = &v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetDeploymentSetId(v string) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.DeploymentSetId = &v
	return s
}

// SetDeploymentSetName sets the DeploymentSetName field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetDeploymentSetName(v string) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.DeploymentSetName = &v
	return s
}

// SetGranularity sets the Granularity field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetGranularity(v string) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.Granularity = &v
	return s
}

// SetInstanceAmount sets the InstanceAmount field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetInstanceAmount(v int64) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.InstanceAmount = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetInstanceIds(v []*string) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.InstanceIds = v
	return s
}

// SetQuota sets the Quota field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetQuota(v int64) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.Quota = &v
	return s
}

// SetQuotaUsed sets the QuotaUsed field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetQuotaUsed(v []*QuotaUsedForDescribeDeploymentSetsOutput) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.QuotaUsed = v
	return s
}

// SetStrategy sets the Strategy field's value.
func (s *DeploymentSetForDescribeDeploymentSetsOutput) SetStrategy(v string) *DeploymentSetForDescribeDeploymentSetsOutput {
	s.Strategy = &v
	return s
}

type DescribeAvailableResourceInput struct {
	_ struct{} `type:"structure"`

	DestinationResource *string `type:"string"`

	InstanceType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeAvailableResourceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableResourceInput) GoString() string {
	return s.String()
}

// SetDestinationResource sets the DestinationResource field's value.
func (s *DescribeAvailableResourceInput) SetDestinationResource(v string) *DescribeAvailableResourceInput {
	s.DestinationResource = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeAvailableResourceInput) SetInstanceType(v string) *DescribeAvailableResourceInput {
	s.InstanceType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeAvailableResourceInput) SetZoneId(v string) *DescribeAvailableResourceInput {
	s.ZoneId = &v
	return s
}

type DescribeAvailableResourceOutput struct {
	_ struct{} `type:"structure"`

	AvailableZones []*AvailableZonForDescribeAvailableResourceOutput `type:"list"`
}

// String returns the string representation
func (s DescribeAvailableResourceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableResourceOutput) GoString() string {
	return s.String()
}

// SetAvailableZones sets the AvailableZones field's value.
func (s *DescribeAvailableResourceOutput) SetAvailableZones(v []*AvailableZonForDescribeAvailableResourceOutput) *DescribeAvailableResourceOutput {
	s.AvailableZones = v
	return s
}

type DescribeDeploymentSetSupportedInstanceTypeFamilyInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DescribeDeploymentSetSupportedInstanceTypeFamilyInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDeploymentSetSupportedInstanceTypeFamilyInput) GoString() string {
	return s.String()
}

type DescribeDeploymentSetSupportedInstanceTypeFamilyOutput struct {
	_ struct{} `type:"structure"`

	DpsCreateInstanceTypeFamilies []*string `type:"list"`

	DpsModifyInstanceTypeFamilies []*string `type:"list"`
}

// String returns the string representation
func (s DescribeDeploymentSetSupportedInstanceTypeFamilyOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDeploymentSetSupportedInstanceTypeFamilyOutput) GoString() string {
	return s.String()
}

// SetDpsCreateInstanceTypeFamilies sets the DpsCreateInstanceTypeFamilies field's value.
func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyOutput) SetDpsCreateInstanceTypeFamilies(v []*string) *DescribeDeploymentSetSupportedInstanceTypeFamilyOutput {
	s.DpsCreateInstanceTypeFamilies = v
	return s
}

// SetDpsModifyInstanceTypeFamilies sets the DpsModifyInstanceTypeFamilies field's value.
func (s *DescribeDeploymentSetSupportedInstanceTypeFamilyOutput) SetDpsModifyInstanceTypeFamilies(v []*string) *DescribeDeploymentSetSupportedInstanceTypeFamilyOutput {
	s.DpsModifyInstanceTypeFamilies = v
	return s
}

type DescribeDeploymentSetsInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	DeploymentSetIds []*string `type:"list"`

	DeploymentSetName *string `type:"string"`

	Granularity *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	Strategy *string `type:"string"`
}

// String returns the string representation
func (s DescribeDeploymentSetsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDeploymentSetsInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeDeploymentSetsInput) SetAccountId(v string) *DescribeDeploymentSetsInput {
	s.AccountId = &v
	return s
}

// SetDeploymentSetIds sets the DeploymentSetIds field's value.
func (s *DescribeDeploymentSetsInput) SetDeploymentSetIds(v []*string) *DescribeDeploymentSetsInput {
	s.DeploymentSetIds = v
	return s
}

// SetDeploymentSetName sets the DeploymentSetName field's value.
func (s *DescribeDeploymentSetsInput) SetDeploymentSetName(v string) *DescribeDeploymentSetsInput {
	s.DeploymentSetName = &v
	return s
}

// SetGranularity sets the Granularity field's value.
func (s *DescribeDeploymentSetsInput) SetGranularity(v string) *DescribeDeploymentSetsInput {
	s.Granularity = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDeploymentSetsInput) SetPageNumber(v int64) *DescribeDeploymentSetsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDeploymentSetsInput) SetPageSize(v int64) *DescribeDeploymentSetsInput {
	s.PageSize = &v
	return s
}

// SetStrategy sets the Strategy field's value.
func (s *DescribeDeploymentSetsInput) SetStrategy(v string) *DescribeDeploymentSetsInput {
	s.Strategy = &v
	return s
}

type DescribeDeploymentSetsOutput struct {
	_ struct{} `type:"structure"`

	DeploymentSets []*DeploymentSetForDescribeDeploymentSetsOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeDeploymentSetsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDeploymentSetsOutput) GoString() string {
	return s.String()
}

// SetDeploymentSets sets the DeploymentSets field's value.
func (s *DescribeDeploymentSetsOutput) SetDeploymentSets(v []*DeploymentSetForDescribeDeploymentSetsOutput) *DescribeDeploymentSetsOutput {
	s.DeploymentSets = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeDeploymentSetsOutput) SetPageNumber(v int64) *DescribeDeploymentSetsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeDeploymentSetsOutput) SetPageSize(v int64) *DescribeDeploymentSetsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeDeploymentSetsOutput) SetTotalCount(v int64) *DescribeDeploymentSetsOutput {
	s.TotalCount = &v
	return s
}

type DescribeHpcClusterInput struct {
	_ struct{} `type:"structure"`

	HpcClusterId *string `type:"string"`
}

// String returns the string representation
func (s DescribeHpcClusterInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcClusterInput) GoString() string {
	return s.String()
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DescribeHpcClusterInput) SetHpcClusterId(v string) *DescribeHpcClusterInput {
	s.HpcClusterId = &v
	return s
}

type DescribeHpcClusterOutput struct {
	_ struct{} `type:"structure"`

	AccountID *string `type:"string"`

	CreatedAt *string `type:"string"`

	Description *string `type:"string"`

	HpcClusterId *string `type:"string"`

	Name *string `type:"string"`

	ProjectName *string `type:"string"`

	UpdatedAt *string `type:"string"`

	VpcId *string `type:"string"`

	VpcName *string `type:"string"`
}

// String returns the string representation
func (s DescribeHpcClusterOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcClusterOutput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *DescribeHpcClusterOutput) SetAccountID(v string) *DescribeHpcClusterOutput {
	s.AccountID = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *DescribeHpcClusterOutput) SetCreatedAt(v string) *DescribeHpcClusterOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeHpcClusterOutput) SetDescription(v string) *DescribeHpcClusterOutput {
	s.Description = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DescribeHpcClusterOutput) SetHpcClusterId(v string) *DescribeHpcClusterOutput {
	s.HpcClusterId = &v
	return s
}

// SetName sets the Name field's value.
func (s *DescribeHpcClusterOutput) SetName(v string) *DescribeHpcClusterOutput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeHpcClusterOutput) SetProjectName(v string) *DescribeHpcClusterOutput {
	s.ProjectName = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *DescribeHpcClusterOutput) SetUpdatedAt(v string) *DescribeHpcClusterOutput {
	s.UpdatedAt = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeHpcClusterOutput) SetVpcId(v string) *DescribeHpcClusterOutput {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *DescribeHpcClusterOutput) SetVpcName(v string) *DescribeHpcClusterOutput {
	s.VpcName = &v
	return s
}

type DescribeHpcClustersInput struct {
	_ struct{} `type:"structure"`

	AccountID *string `type:"string"`

	EndTime *string `type:"string"`

	Filter *string `type:"string"`

	Name *string `type:"string"`

	OrderBy *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	ProjectName *string `type:"string"`

	StartTime *string `type:"string"`

	UserID *string `type:"string"`
}

// String returns the string representation
func (s DescribeHpcClustersInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcClustersInput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *DescribeHpcClustersInput) SetAccountID(v string) *DescribeHpcClustersInput {
	s.AccountID = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeHpcClustersInput) SetEndTime(v string) *DescribeHpcClustersInput {
	s.EndTime = &v
	return s
}

// SetFilter sets the Filter field's value.
func (s *DescribeHpcClustersInput) SetFilter(v string) *DescribeHpcClustersInput {
	s.Filter = &v
	return s
}

// SetName sets the Name field's value.
func (s *DescribeHpcClustersInput) SetName(v string) *DescribeHpcClustersInput {
	s.Name = &v
	return s
}

// SetOrderBy sets the OrderBy field's value.
func (s *DescribeHpcClustersInput) SetOrderBy(v string) *DescribeHpcClustersInput {
	s.OrderBy = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeHpcClustersInput) SetPageNumber(v int64) *DescribeHpcClustersInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeHpcClustersInput) SetPageSize(v int64) *DescribeHpcClustersInput {
	s.PageSize = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeHpcClustersInput) SetProjectName(v string) *DescribeHpcClustersInput {
	s.ProjectName = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeHpcClustersInput) SetStartTime(v string) *DescribeHpcClustersInput {
	s.StartTime = &v
	return s
}

// SetUserID sets the UserID field's value.
func (s *DescribeHpcClustersInput) SetUserID(v string) *DescribeHpcClustersInput {
	s.UserID = &v
	return s
}

type DescribeHpcClustersOutput struct {
	_ struct{} `type:"structure"`

	HpcClusters []*HpcClusterForDescribeHpcClustersOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeHpcClustersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeHpcClustersOutput) GoString() string {
	return s.String()
}

// SetHpcClusters sets the HpcClusters field's value.
func (s *DescribeHpcClustersOutput) SetHpcClusters(v []*HpcClusterForDescribeHpcClustersOutput) *DescribeHpcClustersOutput {
	s.HpcClusters = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeHpcClustersOutput) SetPageNumber(v int64) *DescribeHpcClustersOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeHpcClustersOutput) SetPageSize(v int64) *DescribeHpcClustersOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeHpcClustersOutput) SetTotalCount(v int64) *DescribeHpcClustersOutput {
	s.TotalCount = &v
	return s
}

type DescribeInstanceECSTerminalUrlInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceECSTerminalUrlInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceECSTerminalUrlInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceECSTerminalUrlInput) SetInstanceId(v string) *DescribeInstanceECSTerminalUrlInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceECSTerminalUrlOutput struct {
	_ struct{} `type:"structure"`

	EcsTerminalUrl *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceECSTerminalUrlOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceECSTerminalUrlOutput) GoString() string {
	return s.String()
}

// SetEcsTerminalUrl sets the EcsTerminalUrl field's value.
func (s *DescribeInstanceECSTerminalUrlOutput) SetEcsTerminalUrl(v string) *DescribeInstanceECSTerminalUrlOutput {
	s.EcsTerminalUrl = &v
	return s
}

type DescribeInstanceTypeFamiliesInput struct {
	_ struct{} `type:"structure"`

	Generation *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceTypeFamiliesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceTypeFamiliesInput) GoString() string {
	return s.String()
}

// SetGeneration sets the Generation field's value.
func (s *DescribeInstanceTypeFamiliesInput) SetGeneration(v string) *DescribeInstanceTypeFamiliesInput {
	s.Generation = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeInstanceTypeFamiliesInput) SetZoneId(v string) *DescribeInstanceTypeFamiliesInput {
	s.ZoneId = &v
	return s
}

type DescribeInstanceTypeFamiliesOutput struct {
	_ struct{} `type:"structure"`

	InstanceTypeFamilies []*InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeInstanceTypeFamiliesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceTypeFamiliesOutput) GoString() string {
	return s.String()
}

// SetInstanceTypeFamilies sets the InstanceTypeFamilies field's value.
func (s *DescribeInstanceTypeFamiliesOutput) SetInstanceTypeFamilies(v []*InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput) *DescribeInstanceTypeFamiliesOutput {
	s.InstanceTypeFamilies = v
	return s
}

type DescribeInstanceTypesInput struct {
	_ struct{} `type:"structure"`

	InstanceTypeFamily *string `type:"string"`

	InstanceTypes []*string `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceTypesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceTypesInput) GoString() string {
	return s.String()
}

// SetInstanceTypeFamily sets the InstanceTypeFamily field's value.
func (s *DescribeInstanceTypesInput) SetInstanceTypeFamily(v string) *DescribeInstanceTypesInput {
	s.InstanceTypeFamily = &v
	return s
}

// SetInstanceTypes sets the InstanceTypes field's value.
func (s *DescribeInstanceTypesInput) SetInstanceTypes(v []*string) *DescribeInstanceTypesInput {
	s.InstanceTypes = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstanceTypesInput) SetPageNumber(v int64) *DescribeInstanceTypesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstanceTypesInput) SetPageSize(v int64) *DescribeInstanceTypesInput {
	s.PageSize = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeInstanceTypesInput) SetZoneId(v string) *DescribeInstanceTypesInput {
	s.ZoneId = &v
	return s
}

type DescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	InstanceTypes []*InstanceTypForDescribeInstanceTypesOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetInstanceTypes sets the InstanceTypes field's value.
func (s *DescribeInstanceTypesOutput) SetInstanceTypes(v []*InstanceTypForDescribeInstanceTypesOutput) *DescribeInstanceTypesOutput {
	s.InstanceTypes = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstanceTypesOutput) SetPageNumber(v int64) *DescribeInstanceTypesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstanceTypesOutput) SetPageSize(v int64) *DescribeInstanceTypesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeInstanceTypesOutput) SetTotalCount(v int64) *DescribeInstanceTypesOutput {
	s.TotalCount = &v
	return s
}

type DescribeInstanceVncUrlInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceVncUrlInput) SetInstanceId(v string) *DescribeInstanceVncUrlInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceVncUrlOutput struct {
	_ struct{} `type:"structure"`

	VncUrl *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlOutput) GoString() string {
	return s.String()
}

// SetVncUrl sets the VncUrl field's value.
func (s *DescribeInstanceVncUrlOutput) SetVncUrl(v string) *DescribeInstanceVncUrlOutput {
	s.VncUrl = &v
	return s
}

type DescribeInstancesInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	DeploymentSetIds []*string `type:"list"`

	HpcClusterId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceIds []*string `type:"list"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	KeyPairName *string `type:"string"`

	NetworkInterfacesId *string `type:"string"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	PrimaryIpAddress *string `type:"string"`

	ProjectName *string `type:"string"`

	Status *string `type:"string"`

	Tag []*string `type:"list"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeInstancesInput) SetAccountId(v string) *DescribeInstancesInput {
	s.AccountId = &v
	return s
}

// SetDeploymentSetIds sets the DeploymentSetIds field's value.
func (s *DescribeInstancesInput) SetDeploymentSetIds(v []*string) *DescribeInstancesInput {
	s.DeploymentSetIds = v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DescribeInstancesInput) SetHpcClusterId(v string) *DescribeInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *DescribeInstancesInput) SetInstanceChargeType(v string) *DescribeInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DescribeInstancesInput) SetInstanceIds(v []*string) *DescribeInstancesInput {
	s.InstanceIds = v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *DescribeInstancesInput) SetInstanceName(v string) *DescribeInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeInstancesInput) SetInstanceType(v string) *DescribeInstancesInput {
	s.InstanceType = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DescribeInstancesInput) SetKeyPairName(v string) *DescribeInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfacesId sets the NetworkInterfacesId field's value.
func (s *DescribeInstancesInput) SetNetworkInterfacesId(v string) *DescribeInstancesInput {
	s.NetworkInterfacesId = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstancesInput) SetPageNumber(v int64) *DescribeInstancesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstancesInput) SetPageSize(v int64) *DescribeInstancesInput {
	s.PageSize = &v
	return s
}

// SetPrimaryIpAddress sets the PrimaryIpAddress field's value.
func (s *DescribeInstancesInput) SetPrimaryIpAddress(v string) *DescribeInstancesInput {
	s.PrimaryIpAddress = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeInstancesInput) SetProjectName(v string) *DescribeInstancesInput {
	s.ProjectName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeInstancesInput) SetStatus(v string) *DescribeInstancesInput {
	s.Status = &v
	return s
}

// SetTag sets the Tag field's value.
func (s *DescribeInstancesInput) SetTag(v []*string) *DescribeInstancesInput {
	s.Tag = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeInstancesInput) SetVpcId(v string) *DescribeInstancesInput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeInstancesInput) SetZoneId(v string) *DescribeInstancesInput {
	s.ZoneId = &v
	return s
}

type DescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	Instances []*InstancForDescribeInstancesOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetInstances sets the Instances field's value.
func (s *DescribeInstancesOutput) SetInstances(v []*InstancForDescribeInstancesOutput) *DescribeInstancesOutput {
	s.Instances = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstancesOutput) SetPageNumber(v int64) *DescribeInstancesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstancesOutput) SetPageSize(v int64) *DescribeInstancesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeInstancesOutput) SetTotalCount(v int64) *DescribeInstancesOutput {
	s.TotalCount = &v
	return s
}

type DescribeKeyPairInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s DescribeKeyPairInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeKeyPairInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeKeyPairInput) SetAccountId(v string) *DescribeKeyPairInput {
	s.AccountId = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *DescribeKeyPairInput) SetKeyPairId(v string) *DescribeKeyPairInput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DescribeKeyPairInput) SetKeyPairName(v string) *DescribeKeyPairInput {
	s.KeyPairName = &v
	return s
}

type DescribeKeyPairOutput struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	Description *string `type:"string"`

	FingerPrint *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`

	ProjectName *string `type:"string"`

	UpdatedAt *string `type:"string"`
}

// String returns the string representation
func (s DescribeKeyPairOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeKeyPairOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *DescribeKeyPairOutput) SetCreatedAt(v string) *DescribeKeyPairOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DescribeKeyPairOutput) SetDescription(v string) *DescribeKeyPairOutput {
	s.Description = &v
	return s
}

// SetFingerPrint sets the FingerPrint field's value.
func (s *DescribeKeyPairOutput) SetFingerPrint(v string) *DescribeKeyPairOutput {
	s.FingerPrint = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *DescribeKeyPairOutput) SetKeyPairId(v string) *DescribeKeyPairOutput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DescribeKeyPairOutput) SetKeyPairName(v string) *DescribeKeyPairOutput {
	s.KeyPairName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeKeyPairOutput) SetProjectName(v string) *DescribeKeyPairOutput {
	s.ProjectName = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *DescribeKeyPairOutput) SetUpdatedAt(v string) *DescribeKeyPairOutput {
	s.UpdatedAt = &v
	return s
}

type DescribeKeyPairsInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	FingerPrint *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairIds []*string `type:"list"`

	KeyPairName *string `type:"string"`

	KeyPairNames []*string `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	ProjectName *string `type:"string"`
}

// String returns the string representation
func (s DescribeKeyPairsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeKeyPairsInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DescribeKeyPairsInput) SetAccountId(v string) *DescribeKeyPairsInput {
	s.AccountId = &v
	return s
}

// SetFingerPrint sets the FingerPrint field's value.
func (s *DescribeKeyPairsInput) SetFingerPrint(v string) *DescribeKeyPairsInput {
	s.FingerPrint = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *DescribeKeyPairsInput) SetKeyPairId(v string) *DescribeKeyPairsInput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairIds sets the KeyPairIds field's value.
func (s *DescribeKeyPairsInput) SetKeyPairIds(v []*string) *DescribeKeyPairsInput {
	s.KeyPairIds = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DescribeKeyPairsInput) SetKeyPairName(v string) *DescribeKeyPairsInput {
	s.KeyPairName = &v
	return s
}

// SetKeyPairNames sets the KeyPairNames field's value.
func (s *DescribeKeyPairsInput) SetKeyPairNames(v []*string) *DescribeKeyPairsInput {
	s.KeyPairNames = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeKeyPairsInput) SetPageNumber(v int64) *DescribeKeyPairsInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeKeyPairsInput) SetPageSize(v int64) *DescribeKeyPairsInput {
	s.PageSize = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *DescribeKeyPairsInput) SetProjectName(v string) *DescribeKeyPairsInput {
	s.ProjectName = &v
	return s
}

type DescribeKeyPairsOutput struct {
	_ struct{} `type:"structure"`

	KeyPairs []*KeyPairForDescribeKeyPairsOutput `type:"list"`

	PageNumber *int64 `type:"integer"`

	PageSize *int64 `type:"integer"`

	TotalCount *int64 `type:"integer"`
}

// String returns the string representation
func (s DescribeKeyPairsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeKeyPairsOutput) GoString() string {
	return s.String()
}

// SetKeyPairs sets the KeyPairs field's value.
func (s *DescribeKeyPairsOutput) SetKeyPairs(v []*KeyPairForDescribeKeyPairsOutput) *DescribeKeyPairsOutput {
	s.KeyPairs = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeKeyPairsOutput) SetPageNumber(v int64) *DescribeKeyPairsOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeKeyPairsOutput) SetPageSize(v int64) *DescribeKeyPairsOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeKeyPairsOutput) SetTotalCount(v int64) *DescribeKeyPairsOutput {
	s.TotalCount = &v
	return s
}

type DescribeUserDataInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeUserDataInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeUserDataInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeUserDataInput) SetInstanceId(v string) *DescribeUserDataInput {
	s.InstanceId = &v
	return s
}

type DescribeUserDataOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s DescribeUserDataOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeUserDataOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeUserDataOutput) SetInstanceId(v string) *DescribeUserDataOutput {
	s.InstanceId = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *DescribeUserDataOutput) SetUserData(v string) *DescribeUserDataOutput {
	s.UserData = &v
	return s
}

type DescribeZonesInput struct {
	_ struct{} `type:"structure"`

	ZoneIds []*string `type:"list"`
}

// String returns the string representation
func (s DescribeZonesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeZonesInput) GoString() string {
	return s.String()
}

// SetZoneIds sets the ZoneIds field's value.
func (s *DescribeZonesInput) SetZoneIds(v []*string) *DescribeZonesInput {
	s.ZoneIds = v
	return s
}

type DescribeZonesOutput struct {
	_ struct{} `type:"structure"`

	Zones []*ZonForDescribeZonesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeZonesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeZonesOutput) GoString() string {
	return s.String()
}

// SetZones sets the Zones field's value.
func (s *DescribeZonesOutput) SetZones(v []*ZonForDescribeZonesOutput) *DescribeZonesOutput {
	s.Zones = v
	return s
}

type DetachKeyPairInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s DetachKeyPairInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachKeyPairInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *DetachKeyPairInput) SetAccountId(v string) *DetachKeyPairInput {
	s.AccountId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DetachKeyPairInput) SetInstanceIds(v []*string) *DetachKeyPairInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *DetachKeyPairInput) SetKeyPairId(v string) *DetachKeyPairInput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DetachKeyPairInput) SetKeyPairName(v string) *DetachKeyPairInput {
	s.KeyPairName = &v
	return s
}

type DetachKeyPairOutput struct {
	_ struct{} `type:"structure"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s DetachKeyPairOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachKeyPairOutput) GoString() string {
	return s.String()
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DetachKeyPairOutput) SetKeyPairName(v string) *DetachKeyPairOutput {
	s.KeyPairName = &v
	return s
}

type DistributionForv1ListResourceStatisticsOutput struct {
	_ struct{} `type:"structure"`

	AccountDistribution []*AccountDistributionForv1ListResourceStatisticsOutput `type:"list"`

	FlavorDistribution []*FlavorDistributionForv1ListResourceStatisticsOutput `type:"list"`

	ProjectDistribution []*ProjectDistributionForv1ListResourceStatisticsOutput `type:"list"`

	ZoneDistribution []*ZoneDistributionForv1ListResourceStatisticsOutput `type:"list"`
}

// String returns the string representation
func (s DistributionForv1ListResourceStatisticsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DistributionForv1ListResourceStatisticsOutput) GoString() string {
	return s.String()
}

// SetAccountDistribution sets the AccountDistribution field's value.
func (s *DistributionForv1ListResourceStatisticsOutput) SetAccountDistribution(v []*AccountDistributionForv1ListResourceStatisticsOutput) *DistributionForv1ListResourceStatisticsOutput {
	s.AccountDistribution = v
	return s
}

// SetFlavorDistribution sets the FlavorDistribution field's value.
func (s *DistributionForv1ListResourceStatisticsOutput) SetFlavorDistribution(v []*FlavorDistributionForv1ListResourceStatisticsOutput) *DistributionForv1ListResourceStatisticsOutput {
	s.FlavorDistribution = v
	return s
}

// SetProjectDistribution sets the ProjectDistribution field's value.
func (s *DistributionForv1ListResourceStatisticsOutput) SetProjectDistribution(v []*ProjectDistributionForv1ListResourceStatisticsOutput) *DistributionForv1ListResourceStatisticsOutput {
	s.ProjectDistribution = v
	return s
}

// SetZoneDistribution sets the ZoneDistribution field's value.
func (s *DistributionForv1ListResourceStatisticsOutput) SetZoneDistribution(v []*ZoneDistributionForv1ListResourceStatisticsOutput) *DistributionForv1ListResourceStatisticsOutput {
	s.ZoneDistribution = v
	return s
}

type FlavorDistributionForv1ListResourceStatisticsOutput struct {
	_ struct{} `type:"structure"`

	InsTotalNum *int64 `type:"integer"`

	Name *string `type:"string"`
}

// String returns the string representation
func (s FlavorDistributionForv1ListResourceStatisticsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s FlavorDistributionForv1ListResourceStatisticsOutput) GoString() string {
	return s.String()
}

// SetInsTotalNum sets the InsTotalNum field's value.
func (s *FlavorDistributionForv1ListResourceStatisticsOutput) SetInsTotalNum(v int64) *FlavorDistributionForv1ListResourceStatisticsOutput {
	s.InsTotalNum = &v
	return s
}

// SetName sets the Name field's value.
func (s *FlavorDistributionForv1ListResourceStatisticsOutput) SetName(v string) *FlavorDistributionForv1ListResourceStatisticsOutput {
	s.Name = &v
	return s
}

type GetInstanceConsoleInput struct {
	_ struct{} `type:"structure"`

	Id *string `type:"string"`

	Type *string `type:"string"`
}

// String returns the string representation
func (s GetInstanceConsoleInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceConsoleInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *GetInstanceConsoleInput) SetId(v string) *GetInstanceConsoleInput {
	s.Id = &v
	return s
}

// SetType sets the Type field's value.
func (s *GetInstanceConsoleInput) SetType(v string) *GetInstanceConsoleInput {
	s.Type = &v
	return s
}

type GetInstanceConsoleOutput struct {
	_ struct{} `type:"structure"`

	ConsoleType *string `type:"string"`

	ConsoleURL *string `type:"string"`
}

// String returns the string representation
func (s GetInstanceConsoleOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GetInstanceConsoleOutput) GoString() string {
	return s.String()
}

// SetConsoleType sets the ConsoleType field's value.
func (s *GetInstanceConsoleOutput) SetConsoleType(v string) *GetInstanceConsoleOutput {
	s.ConsoleType = &v
	return s
}

// SetConsoleURL sets the ConsoleURL field's value.
func (s *GetInstanceConsoleOutput) SetConsoleURL(v string) *GetInstanceConsoleOutput {
	s.ConsoleURL = &v
	return s
}

type GpuDevicForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	Count *int64 `type:"integer"`

	Mem *int64 `type:"integer"`

	Memory *MemoryForDescribeInstanceTypesOutput `type:"structure"`

	Model *string `type:"string"`

	ProductName *string `type:"string"`
}

// String returns the string representation
func (s GpuDevicForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GpuDevicForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetCount sets the Count field's value.
func (s *GpuDevicForDescribeInstanceTypesOutput) SetCount(v int64) *GpuDevicForDescribeInstanceTypesOutput {
	s.Count = &v
	return s
}

// SetMem sets the Mem field's value.
func (s *GpuDevicForDescribeInstanceTypesOutput) SetMem(v int64) *GpuDevicForDescribeInstanceTypesOutput {
	s.Mem = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *GpuDevicForDescribeInstanceTypesOutput) SetMemory(v *MemoryForDescribeInstanceTypesOutput) *GpuDevicForDescribeInstanceTypesOutput {
	s.Memory = v
	return s
}

// SetModel sets the Model field's value.
func (s *GpuDevicForDescribeInstanceTypesOutput) SetModel(v string) *GpuDevicForDescribeInstanceTypesOutput {
	s.Model = &v
	return s
}

// SetProductName sets the ProductName field's value.
func (s *GpuDevicForDescribeInstanceTypesOutput) SetProductName(v string) *GpuDevicForDescribeInstanceTypesOutput {
	s.ProductName = &v
	return s
}

type GpuForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	GpuDevices []*GpuDevicForDescribeInstanceTypesOutput `type:"list"`

	TotalCount *int64 `type:"integer"`

	TotalMem *int64 `type:"integer"`
}

// String returns the string representation
func (s GpuForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s GpuForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetGpuDevices sets the GpuDevices field's value.
func (s *GpuForDescribeInstanceTypesOutput) SetGpuDevices(v []*GpuDevicForDescribeInstanceTypesOutput) *GpuForDescribeInstanceTypesOutput {
	s.GpuDevices = v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *GpuForDescribeInstanceTypesOutput) SetTotalCount(v int64) *GpuForDescribeInstanceTypesOutput {
	s.TotalCount = &v
	return s
}

// SetTotalMem sets the TotalMem field's value.
func (s *GpuForDescribeInstanceTypesOutput) SetTotalMem(v int64) *GpuForDescribeInstanceTypesOutput {
	s.TotalMem = &v
	return s
}

type HpcClusterForDescribeHpcClustersOutput struct {
	_ struct{} `type:"structure"`

	AccountID *string `type:"string"`

	CreatedAt *string `type:"string"`

	Description *string `type:"string"`

	HpcClusterId *string `type:"string"`

	Name *string `type:"string"`

	ProjectName *string `type:"string"`

	UpdatedAt *string `type:"string"`

	VpcId *string `type:"string"`

	VpcName *string `type:"string"`
}

// String returns the string representation
func (s HpcClusterForDescribeHpcClustersOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s HpcClusterForDescribeHpcClustersOutput) GoString() string {
	return s.String()
}

// SetAccountID sets the AccountID field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetAccountID(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.AccountID = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetCreatedAt(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetDescription(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.Description = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetHpcClusterId(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.HpcClusterId = &v
	return s
}

// SetName sets the Name field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetName(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.Name = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetProjectName(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.ProjectName = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetUpdatedAt(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.UpdatedAt = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetVpcId(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *HpcClusterForDescribeHpcClustersOutput) SetVpcName(v string) *HpcClusterForDescribeHpcClustersOutput {
	s.VpcName = &v
	return s
}

type ImportKeyPairInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	Description *string `type:"string"`

	KeyPairName *string `type:"string"`

	ProjectName *string `type:"string"`

	PublicKey *string `type:"string"`
}

// String returns the string representation
func (s ImportKeyPairInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ImportKeyPairInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *ImportKeyPairInput) SetAccountId(v string) *ImportKeyPairInput {
	s.AccountId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ImportKeyPairInput) SetDescription(v string) *ImportKeyPairInput {
	s.Description = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ImportKeyPairInput) SetKeyPairName(v string) *ImportKeyPairInput {
	s.KeyPairName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *ImportKeyPairInput) SetProjectName(v string) *ImportKeyPairInput {
	s.ProjectName = &v
	return s
}

// SetPublicKey sets the PublicKey field's value.
func (s *ImportKeyPairInput) SetPublicKey(v string) *ImportKeyPairInput {
	s.PublicKey = &v
	return s
}

type ImportKeyPairOutput struct {
	_ struct{} `type:"structure"`

	FingerPrint *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s ImportKeyPairOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ImportKeyPairOutput) GoString() string {
	return s.String()
}

// SetFingerPrint sets the FingerPrint field's value.
func (s *ImportKeyPairOutput) SetFingerPrint(v string) *ImportKeyPairOutput {
	s.FingerPrint = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *ImportKeyPairOutput) SetKeyPairId(v string) *ImportKeyPairOutput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ImportKeyPairOutput) SetKeyPairName(v string) *ImportKeyPairOutput {
	s.KeyPairName = &v
	return s
}

type InnerReplaceSystemVolumeInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceId *string `type:"string"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumeInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *InnerReplaceSystemVolumeInput) SetImageId(v string) *InnerReplaceSystemVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *InnerReplaceSystemVolumeInput) SetInstanceId(v string) *InnerReplaceSystemVolumeInput {
	s.InstanceId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *InnerReplaceSystemVolumeInput) SetKeyPairName(v string) *InnerReplaceSystemVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *InnerReplaceSystemVolumeInput) SetPassword(v string) *InnerReplaceSystemVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *InnerReplaceSystemVolumeInput) SetSize(v string) *InnerReplaceSystemVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *InnerReplaceSystemVolumeInput) SetUserData(v string) *InnerReplaceSystemVolumeInput {
	s.UserData = &v
	return s
}

type InnerReplaceSystemVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumeOutput) GoString() string {
	return s.String()
}

type InnerReplaceSystemVolumesInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumesInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *InnerReplaceSystemVolumesInput) SetImageId(v string) *InnerReplaceSystemVolumesInput {
	s.ImageId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *InnerReplaceSystemVolumesInput) SetInstanceIds(v []*string) *InnerReplaceSystemVolumesInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *InnerReplaceSystemVolumesInput) SetKeyPairName(v string) *InnerReplaceSystemVolumesInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *InnerReplaceSystemVolumesInput) SetPassword(v string) *InnerReplaceSystemVolumesInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *InnerReplaceSystemVolumesInput) SetSize(v string) *InnerReplaceSystemVolumesInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *InnerReplaceSystemVolumesInput) SetUserData(v string) *InnerReplaceSystemVolumesInput {
	s.UserData = &v
	return s
}

type InnerReplaceSystemVolumesOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s InnerReplaceSystemVolumesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InnerReplaceSystemVolumesOutput) GoString() string {
	return s.String()
}

type InstancForDescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	DeploymentSetId *string `type:"string"`

	Description *string `type:"string"`

	HostName *string `type:"string"`

	Id *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *InstanceTypeForDescribeInstancesOutput `type:"structure"`

	InstanceTypeId *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`

	NetworkInterfaces []*NetworkInterfacForDescribeInstancesOutput `type:"list"`

	RdmaIpAddresses []*string `type:"list"`

	Status *string `type:"string"`

	StoppedMode *string `type:"string"`

	Tags []*TagForDescribeInstancesOutput `type:"list"`

	UpdatedAt *string `type:"string"`

	UserData *string `type:"string"`

	Volumes []*VolumForDescribeInstancesOutput `type:"list"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s InstancForDescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstancForDescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *InstancForDescribeInstancesOutput) SetCreatedAt(v string) *InstancForDescribeInstancesOutput {
	s.CreatedAt = &v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *InstancForDescribeInstancesOutput) SetDeploymentSetId(v string) *InstancForDescribeInstancesOutput {
	s.DeploymentSetId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *InstancForDescribeInstancesOutput) SetDescription(v string) *InstancForDescribeInstancesOutput {
	s.Description = &v
	return s
}

// SetHostName sets the HostName field's value.
func (s *InstancForDescribeInstancesOutput) SetHostName(v string) *InstancForDescribeInstancesOutput {
	s.HostName = &v
	return s
}

// SetId sets the Id field's value.
func (s *InstancForDescribeInstancesOutput) SetId(v string) *InstancForDescribeInstancesOutput {
	s.Id = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *InstancForDescribeInstancesOutput) SetImageId(v string) *InstancForDescribeInstancesOutput {
	s.ImageId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *InstancForDescribeInstancesOutput) SetInstanceChargeType(v string) *InstancForDescribeInstancesOutput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *InstancForDescribeInstancesOutput) SetInstanceName(v string) *InstancForDescribeInstancesOutput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *InstancForDescribeInstancesOutput) SetInstanceType(v *InstanceTypeForDescribeInstancesOutput) *InstancForDescribeInstancesOutput {
	s.InstanceType = v
	return s
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *InstancForDescribeInstancesOutput) SetInstanceTypeId(v string) *InstancForDescribeInstancesOutput {
	s.InstanceTypeId = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *InstancForDescribeInstancesOutput) SetKeyPairId(v string) *InstancForDescribeInstancesOutput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *InstancForDescribeInstancesOutput) SetKeyPairName(v string) *InstancForDescribeInstancesOutput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfaces sets the NetworkInterfaces field's value.
func (s *InstancForDescribeInstancesOutput) SetNetworkInterfaces(v []*NetworkInterfacForDescribeInstancesOutput) *InstancForDescribeInstancesOutput {
	s.NetworkInterfaces = v
	return s
}

// SetRdmaIpAddresses sets the RdmaIpAddresses field's value.
func (s *InstancForDescribeInstancesOutput) SetRdmaIpAddresses(v []*string) *InstancForDescribeInstancesOutput {
	s.RdmaIpAddresses = v
	return s
}

// SetStatus sets the Status field's value.
func (s *InstancForDescribeInstancesOutput) SetStatus(v string) *InstancForDescribeInstancesOutput {
	s.Status = &v
	return s
}

// SetStoppedMode sets the StoppedMode field's value.
func (s *InstancForDescribeInstancesOutput) SetStoppedMode(v string) *InstancForDescribeInstancesOutput {
	s.StoppedMode = &v
	return s
}

// SetTags sets the Tags field's value.
func (s *InstancForDescribeInstancesOutput) SetTags(v []*TagForDescribeInstancesOutput) *InstancForDescribeInstancesOutput {
	s.Tags = v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *InstancForDescribeInstancesOutput) SetUpdatedAt(v string) *InstancForDescribeInstancesOutput {
	s.UpdatedAt = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *InstancForDescribeInstancesOutput) SetUserData(v string) *InstancForDescribeInstancesOutput {
	s.UserData = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *InstancForDescribeInstancesOutput) SetVolumes(v []*VolumForDescribeInstancesOutput) *InstancForDescribeInstancesOutput {
	s.Volumes = v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *InstancForDescribeInstancesOutput) SetVpcId(v string) *InstancForDescribeInstancesOutput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *InstancForDescribeInstancesOutput) SetZoneId(v string) *InstancForDescribeInstancesOutput {
	s.ZoneId = &v
	return s
}

type InstanceTypForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	Architecture *string `type:"string"`

	Cpu *int64 `type:"integer"`

	Gpu *GpuForDescribeInstanceTypesOutput `type:"structure"`

	Id *string `type:"string"`

	InstanceTypeFamily *string `type:"string"`

	InstanceTypeId *string `type:"string"`

	LocalVolumes []*LocalVolumForDescribeInstanceTypesOutput `type:"list"`

	Mem *int64 `type:"integer"`

	Memory *MemoryForDescribeInstanceTypesOutput `type:"structure"`

	NetKppsQuota *int64 `type:"integer"`

	NetMbpsQuota *int64 `type:"integer"`

	NetSessionQuota *int64 `type:"integer"`

	NetworkInterfaceNumQuota *int64 `type:"integer"`

	PrivateIpQuota *int64 `type:"integer"`

	Processor *ProcessorForDescribeInstanceTypesOutput `type:"structure"`

	Rdma *RdmaForDescribeInstanceTypesOutput `type:"structure"`

	Type *string `type:"string"`

	VolumeTypes []*string `type:"list"`
}

// String returns the string representation
func (s InstanceTypForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceTypForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetArchitecture sets the Architecture field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetArchitecture(v string) *InstanceTypForDescribeInstanceTypesOutput {
	s.Architecture = &v
	return s
}

// SetCpu sets the Cpu field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetCpu(v int64) *InstanceTypForDescribeInstanceTypesOutput {
	s.Cpu = &v
	return s
}

// SetGpu sets the Gpu field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetGpu(v *GpuForDescribeInstanceTypesOutput) *InstanceTypForDescribeInstanceTypesOutput {
	s.Gpu = v
	return s
}

// SetId sets the Id field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetId(v string) *InstanceTypForDescribeInstanceTypesOutput {
	s.Id = &v
	return s
}

// SetInstanceTypeFamily sets the InstanceTypeFamily field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetInstanceTypeFamily(v string) *InstanceTypForDescribeInstanceTypesOutput {
	s.InstanceTypeFamily = &v
	return s
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetInstanceTypeId(v string) *InstanceTypForDescribeInstanceTypesOutput {
	s.InstanceTypeId = &v
	return s
}

// SetLocalVolumes sets the LocalVolumes field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetLocalVolumes(v []*LocalVolumForDescribeInstanceTypesOutput) *InstanceTypForDescribeInstanceTypesOutput {
	s.LocalVolumes = v
	return s
}

// SetMem sets the Mem field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetMem(v int64) *InstanceTypForDescribeInstanceTypesOutput {
	s.Mem = &v
	return s
}

// SetMemory sets the Memory field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetMemory(v *MemoryForDescribeInstanceTypesOutput) *InstanceTypForDescribeInstanceTypesOutput {
	s.Memory = v
	return s
}

// SetNetKppsQuota sets the NetKppsQuota field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetNetKppsQuota(v int64) *InstanceTypForDescribeInstanceTypesOutput {
	s.NetKppsQuota = &v
	return s
}

// SetNetMbpsQuota sets the NetMbpsQuota field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetNetMbpsQuota(v int64) *InstanceTypForDescribeInstanceTypesOutput {
	s.NetMbpsQuota = &v
	return s
}

// SetNetSessionQuota sets the NetSessionQuota field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetNetSessionQuota(v int64) *InstanceTypForDescribeInstanceTypesOutput {
	s.NetSessionQuota = &v
	return s
}

// SetNetworkInterfaceNumQuota sets the NetworkInterfaceNumQuota field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetNetworkInterfaceNumQuota(v int64) *InstanceTypForDescribeInstanceTypesOutput {
	s.NetworkInterfaceNumQuota = &v
	return s
}

// SetPrivateIpQuota sets the PrivateIpQuota field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetPrivateIpQuota(v int64) *InstanceTypForDescribeInstanceTypesOutput {
	s.PrivateIpQuota = &v
	return s
}

// SetProcessor sets the Processor field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetProcessor(v *ProcessorForDescribeInstanceTypesOutput) *InstanceTypForDescribeInstanceTypesOutput {
	s.Processor = v
	return s
}

// SetRdma sets the Rdma field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetRdma(v *RdmaForDescribeInstanceTypesOutput) *InstanceTypForDescribeInstanceTypesOutput {
	s.Rdma = v
	return s
}

// SetType sets the Type field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetType(v string) *InstanceTypForDescribeInstanceTypesOutput {
	s.Type = &v
	return s
}

// SetVolumeTypes sets the VolumeTypes field's value.
func (s *InstanceTypForDescribeInstanceTypesOutput) SetVolumeTypes(v []*string) *InstanceTypForDescribeInstanceTypesOutput {
	s.VolumeTypes = v
	return s
}

type InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput struct {
	_ struct{} `type:"structure"`

	Generation *string `type:"string"`

	InstanceTypeFamily *string `type:"string"`

	ZoneIds []*string `type:"list"`
}

// String returns the string representation
func (s InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput) GoString() string {
	return s.String()
}

// SetGeneration sets the Generation field's value.
func (s *InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput) SetGeneration(v string) *InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput {
	s.Generation = &v
	return s
}

// SetInstanceTypeFamily sets the InstanceTypeFamily field's value.
func (s *InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput) SetInstanceTypeFamily(v string) *InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput {
	s.InstanceTypeFamily = &v
	return s
}

// SetZoneIds sets the ZoneIds field's value.
func (s *InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput) SetZoneIds(v []*string) *InstanceTypeFamilyForDescribeInstanceTypeFamiliesOutput {
	s.ZoneIds = v
	return s
}

type InstanceTypeForDescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	Architecture *string `type:"string"`

	Cpu *int64 `type:"integer"`

	Id *string `type:"string"`

	InstanceTypeFamily *string `type:"string"`

	Mem *int64 `type:"integer"`

	NetKppsQuota *int64 `type:"integer"`

	NetMbpsQuota *int64 `type:"integer"`

	NetSessionQuota *int64 `type:"integer"`

	NetworkInterfaceNumQuota *int64 `type:"integer"`

	PrivateIpQuota *int64 `type:"integer"`

	VolumeTypes []*string `type:"list"`
}

// String returns the string representation
func (s InstanceTypeForDescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceTypeForDescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetArchitecture sets the Architecture field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetArchitecture(v string) *InstanceTypeForDescribeInstancesOutput {
	s.Architecture = &v
	return s
}

// SetCpu sets the Cpu field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetCpu(v int64) *InstanceTypeForDescribeInstancesOutput {
	s.Cpu = &v
	return s
}

// SetId sets the Id field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetId(v string) *InstanceTypeForDescribeInstancesOutput {
	s.Id = &v
	return s
}

// SetInstanceTypeFamily sets the InstanceTypeFamily field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetInstanceTypeFamily(v string) *InstanceTypeForDescribeInstancesOutput {
	s.InstanceTypeFamily = &v
	return s
}

// SetMem sets the Mem field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetMem(v int64) *InstanceTypeForDescribeInstancesOutput {
	s.Mem = &v
	return s
}

// SetNetKppsQuota sets the NetKppsQuota field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetNetKppsQuota(v int64) *InstanceTypeForDescribeInstancesOutput {
	s.NetKppsQuota = &v
	return s
}

// SetNetMbpsQuota sets the NetMbpsQuota field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetNetMbpsQuota(v int64) *InstanceTypeForDescribeInstancesOutput {
	s.NetMbpsQuota = &v
	return s
}

// SetNetSessionQuota sets the NetSessionQuota field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetNetSessionQuota(v int64) *InstanceTypeForDescribeInstancesOutput {
	s.NetSessionQuota = &v
	return s
}

// SetNetworkInterfaceNumQuota sets the NetworkInterfaceNumQuota field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetNetworkInterfaceNumQuota(v int64) *InstanceTypeForDescribeInstancesOutput {
	s.NetworkInterfaceNumQuota = &v
	return s
}

// SetPrivateIpQuota sets the PrivateIpQuota field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetPrivateIpQuota(v int64) *InstanceTypeForDescribeInstancesOutput {
	s.PrivateIpQuota = &v
	return s
}

// SetVolumeTypes sets the VolumeTypes field's value.
func (s *InstanceTypeForDescribeInstancesOutput) SetVolumeTypes(v []*string) *InstanceTypeForDescribeInstancesOutput {
	s.VolumeTypes = v
	return s
}

type KeyPairForDescribeKeyPairsOutput struct {
	_ struct{} `type:"structure"`

	CreatedAt *string `type:"string"`

	Description *string `type:"string"`

	FingerPrint *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`

	ProjectName *string `type:"string"`

	UpdatedAt *string `type:"string"`
}

// String returns the string representation
func (s KeyPairForDescribeKeyPairsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s KeyPairForDescribeKeyPairsOutput) GoString() string {
	return s.String()
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *KeyPairForDescribeKeyPairsOutput) SetCreatedAt(v string) *KeyPairForDescribeKeyPairsOutput {
	s.CreatedAt = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *KeyPairForDescribeKeyPairsOutput) SetDescription(v string) *KeyPairForDescribeKeyPairsOutput {
	s.Description = &v
	return s
}

// SetFingerPrint sets the FingerPrint field's value.
func (s *KeyPairForDescribeKeyPairsOutput) SetFingerPrint(v string) *KeyPairForDescribeKeyPairsOutput {
	s.FingerPrint = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *KeyPairForDescribeKeyPairsOutput) SetKeyPairId(v string) *KeyPairForDescribeKeyPairsOutput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *KeyPairForDescribeKeyPairsOutput) SetKeyPairName(v string) *KeyPairForDescribeKeyPairsOutput {
	s.KeyPairName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *KeyPairForDescribeKeyPairsOutput) SetProjectName(v string) *KeyPairForDescribeKeyPairsOutput {
	s.ProjectName = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *KeyPairForDescribeKeyPairsOutput) SetUpdatedAt(v string) *KeyPairForDescribeKeyPairsOutput {
	s.UpdatedAt = &v
	return s
}

type ListAssumeRolesInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ListAssumeRolesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAssumeRolesInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ListAssumeRolesInput) SetInstanceId(v string) *ListAssumeRolesInput {
	s.InstanceId = &v
	return s
}

type ListAssumeRolesOutput struct {
	_ struct{} `type:"structure"`

	AssumeRoles []*string `type:"list"`
}

// String returns the string representation
func (s ListAssumeRolesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAssumeRolesOutput) GoString() string {
	return s.String()
}

// SetAssumeRoles sets the AssumeRoles field's value.
func (s *ListAssumeRolesOutput) SetAssumeRoles(v []*string) *ListAssumeRolesOutput {
	s.AssumeRoles = v
	return s
}

type LocalVolumForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	Count *int64 `type:"integer"`

	Size *int64 `type:"integer"`

	VolumeType *string `type:"string"`
}

// String returns the string representation
func (s LocalVolumForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s LocalVolumForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetCount sets the Count field's value.
func (s *LocalVolumForDescribeInstanceTypesOutput) SetCount(v int64) *LocalVolumForDescribeInstanceTypesOutput {
	s.Count = &v
	return s
}

// SetSize sets the Size field's value.
func (s *LocalVolumForDescribeInstanceTypesOutput) SetSize(v int64) *LocalVolumForDescribeInstanceTypesOutput {
	s.Size = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *LocalVolumForDescribeInstanceTypesOutput) SetVolumeType(v string) *LocalVolumForDescribeInstanceTypesOutput {
	s.VolumeType = &v
	return s
}

type MemoryForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	Size *int64 `type:"integer"`
}

// String returns the string representation
func (s MemoryForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s MemoryForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetSize sets the Size field's value.
func (s *MemoryForDescribeInstanceTypesOutput) SetSize(v int64) *MemoryForDescribeInstanceTypesOutput {
	s.Size = &v
	return s
}

type ModifyDeploymentSetAttributeInput struct {
	_ struct{} `type:"structure"`

	DeploymentSetId *string `type:"string"`

	DeploymentSetName *string `type:"string"`

	Description *string `type:"string"`
}

// String returns the string representation
func (s ModifyDeploymentSetAttributeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDeploymentSetAttributeInput) GoString() string {
	return s.String()
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *ModifyDeploymentSetAttributeInput) SetDeploymentSetId(v string) *ModifyDeploymentSetAttributeInput {
	s.DeploymentSetId = &v
	return s
}

// SetDeploymentSetName sets the DeploymentSetName field's value.
func (s *ModifyDeploymentSetAttributeInput) SetDeploymentSetName(v string) *ModifyDeploymentSetAttributeInput {
	s.DeploymentSetName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyDeploymentSetAttributeInput) SetDescription(v string) *ModifyDeploymentSetAttributeInput {
	s.Description = &v
	return s
}

type ModifyDeploymentSetAttributeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyDeploymentSetAttributeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDeploymentSetAttributeOutput) GoString() string {
	return s.String()
}

type ModifyInstanceAttributeInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	Password *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceAttributeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceAttributeInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *ModifyInstanceAttributeInput) SetDescription(v string) *ModifyInstanceAttributeInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceAttributeInput) SetInstanceId(v string) *ModifyInstanceAttributeInput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *ModifyInstanceAttributeInput) SetInstanceName(v string) *ModifyInstanceAttributeInput {
	s.InstanceName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ModifyInstanceAttributeInput) SetPassword(v string) *ModifyInstanceAttributeInput {
	s.Password = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ModifyInstanceAttributeInput) SetUserData(v string) *ModifyInstanceAttributeInput {
	s.UserData = &v
	return s
}

type ModifyInstanceAttributeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyInstanceAttributeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceAttributeOutput) GoString() string {
	return s.String()
}

type ModifyInstanceChargeTypeInput struct {
	_ struct{} `type:"structure"`

	AutoPay *bool `type:"boolean"`

	IncludeDataVolumes *bool `type:"boolean"`

	InstanceChargeType *string `type:"string"`

	InstanceIds []*string `type:"list"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeInput) GoString() string {
	return s.String()
}

// SetAutoPay sets the AutoPay field's value.
func (s *ModifyInstanceChargeTypeInput) SetAutoPay(v bool) *ModifyInstanceChargeTypeInput {
	s.AutoPay = &v
	return s
}

// SetIncludeDataVolumes sets the IncludeDataVolumes field's value.
func (s *ModifyInstanceChargeTypeInput) SetIncludeDataVolumes(v bool) *ModifyInstanceChargeTypeInput {
	s.IncludeDataVolumes = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *ModifyInstanceChargeTypeInput) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ModifyInstanceChargeTypeInput) SetInstanceIds(v []*string) *ModifyInstanceChargeTypeInput {
	s.InstanceIds = v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ModifyInstanceChargeTypeInput) SetPeriod(v int64) *ModifyInstanceChargeTypeInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ModifyInstanceChargeTypeInput) SetPeriodUnit(v string) *ModifyInstanceChargeTypeInput {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceChargeTypeOutput struct {
	_ struct{} `type:"structure"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *ModifyInstanceChargeTypeOutput) SetOrderId(v string) *ModifyInstanceChargeTypeOutput {
	s.OrderId = &v
	return s
}

type ModifyInstanceDeploymentInput struct {
	_ struct{} `type:"structure"`

	DeploymentSetId *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceDeploymentInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceDeploymentInput) GoString() string {
	return s.String()
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *ModifyInstanceDeploymentInput) SetDeploymentSetId(v string) *ModifyInstanceDeploymentInput {
	s.DeploymentSetId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceDeploymentInput) SetInstanceId(v string) *ModifyInstanceDeploymentInput {
	s.InstanceId = &v
	return s
}

type ModifyInstanceDeploymentOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyInstanceDeploymentOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceDeploymentOutput) GoString() string {
	return s.String()
}

type ModifyInstanceSpecInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	InstanceType *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceSpecInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceSpecInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *ModifyInstanceSpecInput) SetDryRun(v bool) *ModifyInstanceSpecInput {
	s.DryRun = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceSpecInput) SetInstanceId(v string) *ModifyInstanceSpecInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ModifyInstanceSpecInput) SetInstanceType(v string) *ModifyInstanceSpecInput {
	s.InstanceType = &v
	return s
}

type ModifyInstanceSpecOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyInstanceSpecOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceSpecOutput) GoString() string {
	return s.String()
}

type ModifyKeyPairAttributeInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	Description *string `type:"string"`

	KeyPairId *string `type:"string"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s ModifyKeyPairAttributeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyKeyPairAttributeInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *ModifyKeyPairAttributeInput) SetAccountId(v string) *ModifyKeyPairAttributeInput {
	s.AccountId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyKeyPairAttributeInput) SetDescription(v string) *ModifyKeyPairAttributeInput {
	s.Description = &v
	return s
}

// SetKeyPairId sets the KeyPairId field's value.
func (s *ModifyKeyPairAttributeInput) SetKeyPairId(v string) *ModifyKeyPairAttributeInput {
	s.KeyPairId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ModifyKeyPairAttributeInput) SetKeyPairName(v string) *ModifyKeyPairAttributeInput {
	s.KeyPairName = &v
	return s
}

type ModifyKeyPairAttributeOutput struct {
	_ struct{} `type:"structure"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s ModifyKeyPairAttributeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyKeyPairAttributeOutput) GoString() string {
	return s.String()
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ModifyKeyPairAttributeOutput) SetKeyPairName(v string) *ModifyKeyPairAttributeOutput {
	s.KeyPairName = &v
	return s
}

type NetworkInterfacForDescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	EipAddress *string `type:"string"`

	Ipv6Sets []*string `type:"list"`

	MacAddress *string `type:"string"`

	NetworkInterfaceId *string `type:"string"`

	NetworkInterfaceName *string `type:"string"`

	PrimaryIpAddress *string `type:"string"`

	PrivateIpAddresses []*string `type:"list"`

	SecurityGroupIds []*string `type:"list"`

	Status *string `type:"string"`

	SubnetId *string `type:"string"`

	Type *string `type:"string"`

	VpcId *string `type:"string"`

	VpcName *string `type:"string"`
}

// String returns the string representation
func (s NetworkInterfacForDescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NetworkInterfacForDescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetEipAddress sets the EipAddress field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetEipAddress(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.EipAddress = &v
	return s
}

// SetIpv6Sets sets the Ipv6Sets field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetIpv6Sets(v []*string) *NetworkInterfacForDescribeInstancesOutput {
	s.Ipv6Sets = v
	return s
}

// SetMacAddress sets the MacAddress field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetMacAddress(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.MacAddress = &v
	return s
}

// SetNetworkInterfaceId sets the NetworkInterfaceId field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetNetworkInterfaceId(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.NetworkInterfaceId = &v
	return s
}

// SetNetworkInterfaceName sets the NetworkInterfaceName field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetNetworkInterfaceName(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.NetworkInterfaceName = &v
	return s
}

// SetPrimaryIpAddress sets the PrimaryIpAddress field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetPrimaryIpAddress(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.PrimaryIpAddress = &v
	return s
}

// SetPrivateIpAddresses sets the PrivateIpAddresses field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetPrivateIpAddresses(v []*string) *NetworkInterfacForDescribeInstancesOutput {
	s.PrivateIpAddresses = v
	return s
}

// SetSecurityGroupIds sets the SecurityGroupIds field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetSecurityGroupIds(v []*string) *NetworkInterfacForDescribeInstancesOutput {
	s.SecurityGroupIds = v
	return s
}

// SetStatus sets the Status field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetStatus(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.Status = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetSubnetId(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.SubnetId = &v
	return s
}

// SetType sets the Type field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetType(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.Type = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetVpcId(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.VpcId = &v
	return s
}

// SetVpcName sets the VpcName field's value.
func (s *NetworkInterfacForDescribeInstancesOutput) SetVpcName(v string) *NetworkInterfacForDescribeInstancesOutput {
	s.VpcName = &v
	return s
}

type ProcessorForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	Architecture *string `type:"string"`

	Cpus *int64 `type:"integer"`
}

// String returns the string representation
func (s ProcessorForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ProcessorForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetArchitecture sets the Architecture field's value.
func (s *ProcessorForDescribeInstanceTypesOutput) SetArchitecture(v string) *ProcessorForDescribeInstanceTypesOutput {
	s.Architecture = &v
	return s
}

// SetCpus sets the Cpus field's value.
func (s *ProcessorForDescribeInstanceTypesOutput) SetCpus(v int64) *ProcessorForDescribeInstanceTypesOutput {
	s.Cpus = &v
	return s
}

type ProjectDistributionForv1ListResourceStatisticsOutput struct {
	_ struct{} `type:"structure"`

	InsOtherNum *int64 `type:"integer"`

	InsRunningNum *int64 `type:"integer"`

	InsStoppedNum *int64 `type:"integer"`

	InsTotalNum *int64 `type:"integer"`

	Name *string `type:"string"`

	VolumeNum *int64 `type:"integer"`
}

// String returns the string representation
func (s ProjectDistributionForv1ListResourceStatisticsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ProjectDistributionForv1ListResourceStatisticsOutput) GoString() string {
	return s.String()
}

// SetInsOtherNum sets the InsOtherNum field's value.
func (s *ProjectDistributionForv1ListResourceStatisticsOutput) SetInsOtherNum(v int64) *ProjectDistributionForv1ListResourceStatisticsOutput {
	s.InsOtherNum = &v
	return s
}

// SetInsRunningNum sets the InsRunningNum field's value.
func (s *ProjectDistributionForv1ListResourceStatisticsOutput) SetInsRunningNum(v int64) *ProjectDistributionForv1ListResourceStatisticsOutput {
	s.InsRunningNum = &v
	return s
}

// SetInsStoppedNum sets the InsStoppedNum field's value.
func (s *ProjectDistributionForv1ListResourceStatisticsOutput) SetInsStoppedNum(v int64) *ProjectDistributionForv1ListResourceStatisticsOutput {
	s.InsStoppedNum = &v
	return s
}

// SetInsTotalNum sets the InsTotalNum field's value.
func (s *ProjectDistributionForv1ListResourceStatisticsOutput) SetInsTotalNum(v int64) *ProjectDistributionForv1ListResourceStatisticsOutput {
	s.InsTotalNum = &v
	return s
}

// SetName sets the Name field's value.
func (s *ProjectDistributionForv1ListResourceStatisticsOutput) SetName(v string) *ProjectDistributionForv1ListResourceStatisticsOutput {
	s.Name = &v
	return s
}

// SetVolumeNum sets the VolumeNum field's value.
func (s *ProjectDistributionForv1ListResourceStatisticsOutput) SetVolumeNum(v int64) *ProjectDistributionForv1ListResourceStatisticsOutput {
	s.VolumeNum = &v
	return s
}

type QuotaUsedForDescribeDeploymentSetsOutput struct {
	_ struct{} `type:"structure"`

	Count *int64 `type:"integer"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s QuotaUsedForDescribeDeploymentSetsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s QuotaUsedForDescribeDeploymentSetsOutput) GoString() string {
	return s.String()
}

// SetCount sets the Count field's value.
func (s *QuotaUsedForDescribeDeploymentSetsOutput) SetCount(v int64) *QuotaUsedForDescribeDeploymentSetsOutput {
	s.Count = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *QuotaUsedForDescribeDeploymentSetsOutput) SetZoneId(v string) *QuotaUsedForDescribeDeploymentSetsOutput {
	s.ZoneId = &v
	return s
}

type RdmaForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	RdmaEniBandwidth *string `type:"string"`

	RdmaEniCount *int64 `type:"integer"`

	RdmaNetworkInterfaces *int64 `type:"integer"`
}

// String returns the string representation
func (s RdmaForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RdmaForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetRdmaEniBandwidth sets the RdmaEniBandwidth field's value.
func (s *RdmaForDescribeInstanceTypesOutput) SetRdmaEniBandwidth(v string) *RdmaForDescribeInstanceTypesOutput {
	s.RdmaEniBandwidth = &v
	return s
}

// SetRdmaEniCount sets the RdmaEniCount field's value.
func (s *RdmaForDescribeInstanceTypesOutput) SetRdmaEniCount(v int64) *RdmaForDescribeInstanceTypesOutput {
	s.RdmaEniCount = &v
	return s
}

// SetRdmaNetworkInterfaces sets the RdmaNetworkInterfaces field's value.
func (s *RdmaForDescribeInstanceTypesOutput) SetRdmaNetworkInterfaces(v int64) *RdmaForDescribeInstanceTypesOutput {
	s.RdmaNetworkInterfaces = &v
	return s
}

type RebootInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ForceStop *bool `type:"boolean"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s RebootInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *RebootInstanceInput) SetDryRun(v bool) *RebootInstanceInput {
	s.DryRun = &v
	return s
}

// SetForceStop sets the ForceStop field's value.
func (s *RebootInstanceInput) SetForceStop(v bool) *RebootInstanceInput {
	s.ForceStop = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RebootInstanceInput) SetInstanceId(v string) *RebootInstanceInput {
	s.InstanceId = &v
	return s
}

type RebootInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s RebootInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstanceOutput) GoString() string {
	return s.String()
}

type RenewInstanceInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	InstanceId *string `type:"string"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s RenewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewInstanceInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *RenewInstanceInput) SetClientToken(v string) *RenewInstanceInput {
	s.ClientToken = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RenewInstanceInput) SetInstanceId(v string) *RenewInstanceInput {
	s.InstanceId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RenewInstanceInput) SetPeriod(v int64) *RenewInstanceInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewInstanceInput) SetPeriodUnit(v string) *RenewInstanceInput {
	s.PeriodUnit = &v
	return s
}

type RenewInstanceOutput struct {
	_ struct{} `type:"structure"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s RenewInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewInstanceOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *RenewInstanceOutput) SetOrderId(v string) *RenewInstanceOutput {
	s.OrderId = &v
	return s
}

type ReplaceSystemVolumeInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ImageId *string `type:"string"`

	InstanceId *string `type:"string"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ReplaceSystemVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemVolumeInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *ReplaceSystemVolumeInput) SetDryRun(v bool) *ReplaceSystemVolumeInput {
	s.DryRun = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *ReplaceSystemVolumeInput) SetImageId(v string) *ReplaceSystemVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ReplaceSystemVolumeInput) SetInstanceId(v string) *ReplaceSystemVolumeInput {
	s.InstanceId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ReplaceSystemVolumeInput) SetKeyPairName(v string) *ReplaceSystemVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ReplaceSystemVolumeInput) SetPassword(v string) *ReplaceSystemVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *ReplaceSystemVolumeInput) SetSize(v string) *ReplaceSystemVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ReplaceSystemVolumeInput) SetUserData(v string) *ReplaceSystemVolumeInput {
	s.UserData = &v
	return s
}

type ReplaceSystemVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ReplaceSystemVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemVolumeOutput) GoString() string {
	return s.String()
}

type ReplaceSystemsVolumeInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	InstanceIds []*string `type:"list"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ReplaceSystemsVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemsVolumeInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *ReplaceSystemsVolumeInput) SetImageId(v string) *ReplaceSystemsVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ReplaceSystemsVolumeInput) SetInstanceIds(v []*string) *ReplaceSystemsVolumeInput {
	s.InstanceIds = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ReplaceSystemsVolumeInput) SetKeyPairName(v string) *ReplaceSystemsVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ReplaceSystemsVolumeInput) SetPassword(v string) *ReplaceSystemsVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *ReplaceSystemsVolumeInput) SetSize(v string) *ReplaceSystemsVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ReplaceSystemsVolumeInput) SetUserData(v string) *ReplaceSystemsVolumeInput {
	s.UserData = &v
	return s
}

type ReplaceSystemsVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ReplaceSystemsVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemsVolumeOutput) GoString() string {
	return s.String()
}

type ResetAuthenticationInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	Password *string `type:"string"`

	Pubkey *string `type:"string"`
}

// String returns the string representation
func (s ResetAuthenticationInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAuthenticationInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResetAuthenticationInput) SetInstanceId(v string) *ResetAuthenticationInput {
	s.InstanceId = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ResetAuthenticationInput) SetPassword(v string) *ResetAuthenticationInput {
	s.Password = &v
	return s
}

// SetPubkey sets the Pubkey field's value.
func (s *ResetAuthenticationInput) SetPubkey(v string) *ResetAuthenticationInput {
	s.Pubkey = &v
	return s
}

type ResetAuthenticationOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ResetAuthenticationOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetAuthenticationOutput) GoString() string {
	return s.String()
}

type ResizeInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	InstanceType *string `type:"string"`
}

// String returns the string representation
func (s ResizeInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResizeInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *ResizeInstanceInput) SetDryRun(v bool) *ResizeInstanceInput {
	s.DryRun = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ResizeInstanceInput) SetInstanceId(v string) *ResizeInstanceInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ResizeInstanceInput) SetInstanceType(v string) *ResizeInstanceInput {
	s.InstanceType = &v
	return s
}

type ResizeInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ResizeInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ResizeInstanceOutput) GoString() string {
	return s.String()
}

type RunInstancesInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	AutoRenewPeriod *int64 `type:"integer"`

	Count *int64 `type:"integer"`

	CpuOptions *CpuOptionsForRunInstancesInput `type:"structure"`

	DeploymentSetId *string `type:"string"`

	Description *string `type:"string"`

	DryRun *bool `type:"boolean"`

	HostName *string `type:"string"`

	HpcClusterId *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	Ipv6Address []*string `type:"list"`

	Ipv6AddressCount *int64 `type:"integer"`

	Kerberos *bool `type:"boolean"`

	KeyPairName *string `type:"string"`

	NetworkInterfaces []*string `type:"list"`

	Password *string `type:"string"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string"`

	SecurityEnhancementStrategy *string `type:"string"`

	SuffixIndex *int64 `type:"integer"`

	Tag []*string `type:"list"`

	UniqueSuffix *bool `type:"boolean"`

	UserData *string `type:"string"`

	Volumes []*string `type:"list"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s RunInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *RunInstancesInput) SetAutoRenew(v bool) *RunInstancesInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *RunInstancesInput) SetAutoRenewPeriod(v int64) *RunInstancesInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetCount sets the Count field's value.
func (s *RunInstancesInput) SetCount(v int64) *RunInstancesInput {
	s.Count = &v
	return s
}

// SetCpuOptions sets the CpuOptions field's value.
func (s *RunInstancesInput) SetCpuOptions(v *CpuOptionsForRunInstancesInput) *RunInstancesInput {
	s.CpuOptions = v
	return s
}

// SetDeploymentSetId sets the DeploymentSetId field's value.
func (s *RunInstancesInput) SetDeploymentSetId(v string) *RunInstancesInput {
	s.DeploymentSetId = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *RunInstancesInput) SetDescription(v string) *RunInstancesInput {
	s.Description = &v
	return s
}

// SetDryRun sets the DryRun field's value.
func (s *RunInstancesInput) SetDryRun(v bool) *RunInstancesInput {
	s.DryRun = &v
	return s
}

// SetHostName sets the HostName field's value.
func (s *RunInstancesInput) SetHostName(v string) *RunInstancesInput {
	s.HostName = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *RunInstancesInput) SetHpcClusterId(v string) *RunInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *RunInstancesInput) SetImageId(v string) *RunInstancesInput {
	s.ImageId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *RunInstancesInput) SetInstanceChargeType(v string) *RunInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *RunInstancesInput) SetInstanceName(v string) *RunInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *RunInstancesInput) SetInstanceType(v string) *RunInstancesInput {
	s.InstanceType = &v
	return s
}

// SetIpv6Address sets the Ipv6Address field's value.
func (s *RunInstancesInput) SetIpv6Address(v []*string) *RunInstancesInput {
	s.Ipv6Address = v
	return s
}

// SetIpv6AddressCount sets the Ipv6AddressCount field's value.
func (s *RunInstancesInput) SetIpv6AddressCount(v int64) *RunInstancesInput {
	s.Ipv6AddressCount = &v
	return s
}

// SetKerberos sets the Kerberos field's value.
func (s *RunInstancesInput) SetKerberos(v bool) *RunInstancesInput {
	s.Kerberos = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *RunInstancesInput) SetKeyPairName(v string) *RunInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfaces sets the NetworkInterfaces field's value.
func (s *RunInstancesInput) SetNetworkInterfaces(v []*string) *RunInstancesInput {
	s.NetworkInterfaces = v
	return s
}

// SetPassword sets the Password field's value.
func (s *RunInstancesInput) SetPassword(v string) *RunInstancesInput {
	s.Password = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RunInstancesInput) SetPeriod(v int64) *RunInstancesInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RunInstancesInput) SetPeriodUnit(v string) *RunInstancesInput {
	s.PeriodUnit = &v
	return s
}

// SetSecurityEnhancementStrategy sets the SecurityEnhancementStrategy field's value.
func (s *RunInstancesInput) SetSecurityEnhancementStrategy(v string) *RunInstancesInput {
	s.SecurityEnhancementStrategy = &v
	return s
}

// SetSuffixIndex sets the SuffixIndex field's value.
func (s *RunInstancesInput) SetSuffixIndex(v int64) *RunInstancesInput {
	s.SuffixIndex = &v
	return s
}

// SetTag sets the Tag field's value.
func (s *RunInstancesInput) SetTag(v []*string) *RunInstancesInput {
	s.Tag = v
	return s
}

// SetUniqueSuffix sets the UniqueSuffix field's value.
func (s *RunInstancesInput) SetUniqueSuffix(v bool) *RunInstancesInput {
	s.UniqueSuffix = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *RunInstancesInput) SetUserData(v string) *RunInstancesInput {
	s.UserData = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *RunInstancesInput) SetVolumes(v []*string) *RunInstancesInput {
	s.Volumes = v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *RunInstancesInput) SetZoneId(v string) *RunInstancesInput {
	s.ZoneId = &v
	return s
}

type RunInstancesOutput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `type:"list"`
}

// String returns the string representation
func (s RunInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesOutput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *RunInstancesOutput) SetInstanceIds(v []*string) *RunInstancesOutput {
	s.InstanceIds = v
	return s
}

type StartInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s StartInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *StartInstanceInput) SetDryRun(v bool) *StartInstanceInput {
	s.DryRun = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *StartInstanceInput) SetInstanceId(v string) *StartInstanceInput {
	s.InstanceId = &v
	return s
}

type StartInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s StartInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstanceOutput) GoString() string {
	return s.String()
}

type StatisticsForv1ListResourceStatisticsOutput struct {
	_ struct{} `type:"structure"`

	InsOtherNum *int64 `type:"integer"`

	InsRunningNum *int64 `type:"integer"`

	InsStoppedNum *int64 `type:"integer"`

	InsTotalNum *int64 `type:"integer"`

	VolumeNum *int64 `type:"integer"`
}

// String returns the string representation
func (s StatisticsForv1ListResourceStatisticsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StatisticsForv1ListResourceStatisticsOutput) GoString() string {
	return s.String()
}

// SetInsOtherNum sets the InsOtherNum field's value.
func (s *StatisticsForv1ListResourceStatisticsOutput) SetInsOtherNum(v int64) *StatisticsForv1ListResourceStatisticsOutput {
	s.InsOtherNum = &v
	return s
}

// SetInsRunningNum sets the InsRunningNum field's value.
func (s *StatisticsForv1ListResourceStatisticsOutput) SetInsRunningNum(v int64) *StatisticsForv1ListResourceStatisticsOutput {
	s.InsRunningNum = &v
	return s
}

// SetInsStoppedNum sets the InsStoppedNum field's value.
func (s *StatisticsForv1ListResourceStatisticsOutput) SetInsStoppedNum(v int64) *StatisticsForv1ListResourceStatisticsOutput {
	s.InsStoppedNum = &v
	return s
}

// SetInsTotalNum sets the InsTotalNum field's value.
func (s *StatisticsForv1ListResourceStatisticsOutput) SetInsTotalNum(v int64) *StatisticsForv1ListResourceStatisticsOutput {
	s.InsTotalNum = &v
	return s
}

// SetVolumeNum sets the VolumeNum field's value.
func (s *StatisticsForv1ListResourceStatisticsOutput) SetVolumeNum(v int64) *StatisticsForv1ListResourceStatisticsOutput {
	s.VolumeNum = &v
	return s
}

type StopInstanceInput struct {
	_ struct{} `type:"structure"`

	DryRun *bool `type:"boolean"`

	ForceStop *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	StoppedMode *string `type:"string"`
}

// String returns the string representation
func (s StopInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstanceInput) GoString() string {
	return s.String()
}

// SetDryRun sets the DryRun field's value.
func (s *StopInstanceInput) SetDryRun(v bool) *StopInstanceInput {
	s.DryRun = &v
	return s
}

// SetForceStop sets the ForceStop field's value.
func (s *StopInstanceInput) SetForceStop(v bool) *StopInstanceInput {
	s.ForceStop = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *StopInstanceInput) SetInstanceId(v string) *StopInstanceInput {
	s.InstanceId = &v
	return s
}

// SetStoppedMode sets the StoppedMode field's value.
func (s *StopInstanceInput) SetStoppedMode(v string) *StopInstanceInput {
	s.StoppedMode = &v
	return s
}

type StopInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s StopInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstanceOutput) GoString() string {
	return s.String()
}

type SupportedResourcForDescribeAvailableResourceOutput struct {
	_ struct{} `type:"structure"`

	Status *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s SupportedResourcForDescribeAvailableResourceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s SupportedResourcForDescribeAvailableResourceOutput) GoString() string {
	return s.String()
}

// SetStatus sets the Status field's value.
func (s *SupportedResourcForDescribeAvailableResourceOutput) SetStatus(v string) *SupportedResourcForDescribeAvailableResourceOutput {
	s.Status = &v
	return s
}

// SetValue sets the Value field's value.
func (s *SupportedResourcForDescribeAvailableResourceOutput) SetValue(v string) *SupportedResourcForDescribeAvailableResourceOutput {
	s.Value = &v
	return s
}

type TagForDescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	Key *string `type:"string"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s TagForDescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s TagForDescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetKey sets the Key field's value.
func (s *TagForDescribeInstancesOutput) SetKey(v string) *TagForDescribeInstancesOutput {
	s.Key = &v
	return s
}

// SetValue sets the Value field's value.
func (s *TagForDescribeInstancesOutput) SetValue(v string) *TagForDescribeInstancesOutput {
	s.Value = &v
	return s
}

type UnbindAssumeRoleInput struct {
	_ struct{} `type:"structure"`

	AssumeRole *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s UnbindAssumeRoleInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindAssumeRoleInput) GoString() string {
	return s.String()
}

// SetAssumeRole sets the AssumeRole field's value.
func (s *UnbindAssumeRoleInput) SetAssumeRole(v string) *UnbindAssumeRoleInput {
	s.AssumeRole = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *UnbindAssumeRoleInput) SetInstanceId(v string) *UnbindAssumeRoleInput {
	s.InstanceId = &v
	return s
}

type UnbindAssumeRoleOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s UnbindAssumeRoleOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s UnbindAssumeRoleOutput) GoString() string {
	return s.String()
}

type V1ListResourceStatisticsInput struct {
	_ struct{} `type:"structure"`

	AccountIDs []*string `type:"list"`

	ProjectNames []*string `type:"list"`
}

// String returns the string representation
func (s V1ListResourceStatisticsInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s V1ListResourceStatisticsInput) GoString() string {
	return s.String()
}

// SetAccountIDs sets the AccountIDs field's value.
func (s *V1ListResourceStatisticsInput) SetAccountIDs(v []*string) *V1ListResourceStatisticsInput {
	s.AccountIDs = v
	return s
}

// SetProjectNames sets the ProjectNames field's value.
func (s *V1ListResourceStatisticsInput) SetProjectNames(v []*string) *V1ListResourceStatisticsInput {
	s.ProjectNames = v
	return s
}

type V1ListResourceStatisticsOutput struct {
	_ struct{} `type:"structure"`

	Distribution *DistributionForv1ListResourceStatisticsOutput `type:"structure"`

	Statistics *StatisticsForv1ListResourceStatisticsOutput `type:"structure"`
}

// String returns the string representation
func (s V1ListResourceStatisticsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s V1ListResourceStatisticsOutput) GoString() string {
	return s.String()
}

// SetDistribution sets the Distribution field's value.
func (s *V1ListResourceStatisticsOutput) SetDistribution(v *DistributionForv1ListResourceStatisticsOutput) *V1ListResourceStatisticsOutput {
	s.Distribution = v
	return s
}

// SetStatistics sets the Statistics field's value.
func (s *V1ListResourceStatisticsOutput) SetStatistics(v *StatisticsForv1ListResourceStatisticsOutput) *V1ListResourceStatisticsOutput {
	s.Statistics = v
	return s
}

type V1UpdateStatusInput struct {
	_ struct{} `type:"structure"`

	ResourceId *string `type:"string"`

	ResourceType *string `type:"string"`

	State *string `type:"string"`
}

// String returns the string representation
func (s V1UpdateStatusInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s V1UpdateStatusInput) GoString() string {
	return s.String()
}

// SetResourceId sets the ResourceId field's value.
func (s *V1UpdateStatusInput) SetResourceId(v string) *V1UpdateStatusInput {
	s.ResourceId = &v
	return s
}

// SetResourceType sets the ResourceType field's value.
func (s *V1UpdateStatusInput) SetResourceType(v string) *V1UpdateStatusInput {
	s.ResourceType = &v
	return s
}

// SetState sets the State field's value.
func (s *V1UpdateStatusInput) SetState(v string) *V1UpdateStatusInput {
	s.State = &v
	return s
}

type V1UpdateStatusOutput struct {
	_ struct{} `type:"structure"`

	ReqId *string `type:"string"`
}

// String returns the string representation
func (s V1UpdateStatusOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s V1UpdateStatusOutput) GoString() string {
	return s.String()
}

// SetReqId sets the ReqId field's value.
func (s *V1UpdateStatusOutput) SetReqId(v string) *V1UpdateStatusOutput {
	s.ReqId = &v
	return s
}

type VerifyKeyPairNameExistInput struct {
	_ struct{} `type:"structure"`

	AccountId *string `type:"string"`

	KeyPairName *string `type:"string"`

	ProjectName *string `type:"string"`
}

// String returns the string representation
func (s VerifyKeyPairNameExistInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s VerifyKeyPairNameExistInput) GoString() string {
	return s.String()
}

// SetAccountId sets the AccountId field's value.
func (s *VerifyKeyPairNameExistInput) SetAccountId(v string) *VerifyKeyPairNameExistInput {
	s.AccountId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *VerifyKeyPairNameExistInput) SetKeyPairName(v string) *VerifyKeyPairNameExistInput {
	s.KeyPairName = &v
	return s
}

// SetProjectName sets the ProjectName field's value.
func (s *VerifyKeyPairNameExistInput) SetProjectName(v string) *VerifyKeyPairNameExistInput {
	s.ProjectName = &v
	return s
}

type VerifyKeyPairNameExistOutput struct {
	_ struct{} `type:"structure"`

	IsExist *bool `type:"boolean"`
}

// String returns the string representation
func (s VerifyKeyPairNameExistOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s VerifyKeyPairNameExistOutput) GoString() string {
	return s.String()
}

// SetIsExist sets the IsExist field's value.
func (s *VerifyKeyPairNameExistOutput) SetIsExist(v bool) *VerifyKeyPairNameExistOutput {
	s.IsExist = &v
	return s
}

type VolumForDescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	Kind *string `type:"string"`

	Size *string `type:"string"`

	Status *string `type:"string"`

	VolumeId *string `type:"string"`

	VolumeName *string `type:"string"`

	VolumeType *string `type:"string"`
}

// String returns the string representation
func (s VolumForDescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s VolumForDescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *VolumForDescribeInstancesOutput) SetImageId(v string) *VolumForDescribeInstancesOutput {
	s.ImageId = &v
	return s
}

// SetKind sets the Kind field's value.
func (s *VolumForDescribeInstancesOutput) SetKind(v string) *VolumForDescribeInstancesOutput {
	s.Kind = &v
	return s
}

// SetSize sets the Size field's value.
func (s *VolumForDescribeInstancesOutput) SetSize(v string) *VolumForDescribeInstancesOutput {
	s.Size = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *VolumForDescribeInstancesOutput) SetStatus(v string) *VolumForDescribeInstancesOutput {
	s.Status = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *VolumForDescribeInstancesOutput) SetVolumeId(v string) *VolumForDescribeInstancesOutput {
	s.VolumeId = &v
	return s
}

// SetVolumeName sets the VolumeName field's value.
func (s *VolumForDescribeInstancesOutput) SetVolumeName(v string) *VolumForDescribeInstancesOutput {
	s.VolumeName = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *VolumForDescribeInstancesOutput) SetVolumeType(v string) *VolumForDescribeInstancesOutput {
	s.VolumeType = &v
	return s
}

type ZonForDescribeZonesOutput struct {
	_ struct{} `type:"structure"`

	InstanceTypes []*string `type:"list"`

	VolumeTypes []*string `type:"list"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s ZonForDescribeZonesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ZonForDescribeZonesOutput) GoString() string {
	return s.String()
}

// SetInstanceTypes sets the InstanceTypes field's value.
func (s *ZonForDescribeZonesOutput) SetInstanceTypes(v []*string) *ZonForDescribeZonesOutput {
	s.InstanceTypes = v
	return s
}

// SetVolumeTypes sets the VolumeTypes field's value.
func (s *ZonForDescribeZonesOutput) SetVolumeTypes(v []*string) *ZonForDescribeZonesOutput {
	s.VolumeTypes = v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *ZonForDescribeZonesOutput) SetZoneId(v string) *ZonForDescribeZonesOutput {
	s.ZoneId = &v
	return s
}

type ZoneDistributionForv1ListResourceStatisticsOutput struct {
	_ struct{} `type:"structure"`

	InsTotalNum *int64 `type:"integer"`

	Name *string `type:"string"`

	ZoneID *string `type:"string"`
}

// String returns the string representation
func (s ZoneDistributionForv1ListResourceStatisticsOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ZoneDistributionForv1ListResourceStatisticsOutput) GoString() string {
	return s.String()
}

// SetInsTotalNum sets the InsTotalNum field's value.
func (s *ZoneDistributionForv1ListResourceStatisticsOutput) SetInsTotalNum(v int64) *ZoneDistributionForv1ListResourceStatisticsOutput {
	s.InsTotalNum = &v
	return s
}

// SetName sets the Name field's value.
func (s *ZoneDistributionForv1ListResourceStatisticsOutput) SetName(v string) *ZoneDistributionForv1ListResourceStatisticsOutput {
	s.Name = &v
	return s
}

// SetZoneID sets the ZoneID field's value.
func (s *ZoneDistributionForv1ListResourceStatisticsOutput) SetZoneID(v string) *ZoneDistributionForv1ListResourceStatisticsOutput {
	s.ZoneID = &v
	return s
}

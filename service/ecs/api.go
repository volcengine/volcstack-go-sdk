// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcstack-go-sdk/private/protocol"
	"github.com/volcengine/volcstack-go-sdk/private/protocol/volcstackquery"
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opCreateImageCommon = "CreateImage"

// CreateImageCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateImageCommon operation. The "output" return
// value will be populated with the CreateImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateImageCommon Send returns without error.
//
// See CreateImageCommon for more information on using the CreateImageCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateImageCommonRequest method.
//    req, resp := client.CreateImageCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateImageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateImageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateImageCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateImageCommon for usage and error information.
func (c *ECS) CreateImageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateImageCommonRequest(input)
	return out, req.Send()
}

// CreateImageCommonWithContext is the same as CreateImageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateImageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateImageCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateImageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateImage = "CreateImage"

// CreateImageRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateImage operation. The "output" return
// value will be populated with the CreateImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateImageCommon Send returns without error.
//
// See CreateImage for more information on using the CreateImage
// API call, and error handling.
//
//    // Example sending a request using the CreateImageRequest method.
//    req, resp := client.CreateImageRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) CreateImageRequest(input *CreateImageInput) (req *request.Request, output *CreateImageOutput) {
	op := &request.Operation{
		Name:       opCreateImage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateImageInput{}
	}

	output = &CreateImageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateImage API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation CreateImage for usage and error information.
func (c *ECS) CreateImage(input *CreateImageInput) (*CreateImageOutput, error) {
	req, out := c.CreateImageRequest(input)
	return out, req.Send()
}

// CreateImageWithContext is the same as CreateImage with the addition of
// the ability to pass a context and additional request options.
//
// See CreateImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) CreateImageWithContext(ctx volcstack.Context, input *CreateImageInput, opts ...request.Option) (*CreateImageOutput, error) {
	req, out := c.CreateImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstanceCommon = "DeleteInstance"

// DeleteInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstanceCommon operation. The "output" return
// value will be populated with the DeleteInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteInstanceCommon Send returns without error.
//
// See DeleteInstanceCommon for more information on using the DeleteInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteInstanceCommonRequest method.
//    req, resp := client.DeleteInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstanceCommon for usage and error information.
func (c *ECS) DeleteInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceCommonRequest(input)
	return out, req.Send()
}

// DeleteInstanceCommonWithContext is the same as DeleteInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteInstance = "DeleteInstance"

// DeleteInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteInstance operation. The "output" return
// value will be populated with the DeleteInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteInstanceCommon Send returns without error.
//
// See DeleteInstance for more information on using the DeleteInstance
// API call, and error handling.
//
//    // Example sending a request using the DeleteInstanceRequest method.
//    req, resp := client.DeleteInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DeleteInstanceRequest(input *DeleteInstanceInput) (req *request.Request, output *DeleteInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteInstanceInput{}
	}

	output = &DeleteInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DeleteInstance for usage and error information.
func (c *ECS) DeleteInstance(input *DeleteInstanceInput) (*DeleteInstanceOutput, error) {
	req, out := c.DeleteInstanceRequest(input)
	return out, req.Send()
}

// DeleteInstanceWithContext is the same as DeleteInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteInstanceWithContext(ctx volcstack.Context, input *DeleteInstanceInput, opts ...request.Option) (*DeleteInstanceOutput, error) {
	req, out := c.DeleteInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailableResourceCommon = "DescribeAvailableResource"

// DescribeAvailableResourceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAvailableResourceCommon operation. The "output" return
// value will be populated with the DescribeAvailableResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailableResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailableResourceCommon Send returns without error.
//
// See DescribeAvailableResourceCommon for more information on using the DescribeAvailableResourceCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailableResourceCommonRequest method.
//    req, resp := client.DescribeAvailableResourceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeAvailableResourceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeAvailableResourceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAvailableResourceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeAvailableResourceCommon for usage and error information.
func (c *ECS) DescribeAvailableResourceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableResourceCommonRequest(input)
	return out, req.Send()
}

// DescribeAvailableResourceCommonWithContext is the same as DescribeAvailableResourceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableResourceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeAvailableResourceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeAvailableResourceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeAvailableResource = "DescribeAvailableResource"

// DescribeAvailableResourceRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeAvailableResource operation. The "output" return
// value will be populated with the DescribeAvailableResourceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeAvailableResourceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeAvailableResourceCommon Send returns without error.
//
// See DescribeAvailableResource for more information on using the DescribeAvailableResource
// API call, and error handling.
//
//    // Example sending a request using the DescribeAvailableResourceRequest method.
//    req, resp := client.DescribeAvailableResourceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeAvailableResourceRequest(input *DescribeAvailableResourceInput) (req *request.Request, output *DescribeAvailableResourceOutput) {
	op := &request.Operation{
		Name:       opDescribeAvailableResource,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeAvailableResourceInput{}
	}

	output = &DescribeAvailableResourceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeAvailableResource API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeAvailableResource for usage and error information.
func (c *ECS) DescribeAvailableResource(input *DescribeAvailableResourceInput) (*DescribeAvailableResourceOutput, error) {
	req, out := c.DescribeAvailableResourceRequest(input)
	return out, req.Send()
}

// DescribeAvailableResourceWithContext is the same as DescribeAvailableResource with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeAvailableResource for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeAvailableResourceWithContext(ctx volcstack.Context, input *DescribeAvailableResourceInput, opts ...request.Option) (*DescribeAvailableResourceOutput, error) {
	req, out := c.DescribeAvailableResourceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeImagesCommon = "DescribeImages"

// DescribeImagesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeImagesCommon operation. The "output" return
// value will be populated with the DescribeImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeImagesCommon Send returns without error.
//
// See DescribeImagesCommon for more information on using the DescribeImagesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeImagesCommonRequest method.
//    req, resp := client.DescribeImagesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeImagesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeImagesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeImagesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeImagesCommon for usage and error information.
func (c *ECS) DescribeImagesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeImagesCommonRequest(input)
	return out, req.Send()
}

// DescribeImagesCommonWithContext is the same as DescribeImagesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeImagesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeImagesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeImagesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeImages = "DescribeImages"

// DescribeImagesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeImages operation. The "output" return
// value will be populated with the DescribeImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeImagesCommon Send returns without error.
//
// See DescribeImages for more information on using the DescribeImages
// API call, and error handling.
//
//    // Example sending a request using the DescribeImagesRequest method.
//    req, resp := client.DescribeImagesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeImagesRequest(input *DescribeImagesInput) (req *request.Request, output *DescribeImagesOutput) {
	op := &request.Operation{
		Name:       opDescribeImages,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeImagesInput{}
	}

	output = &DescribeImagesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeImages API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeImages for usage and error information.
func (c *ECS) DescribeImages(input *DescribeImagesInput) (*DescribeImagesOutput, error) {
	req, out := c.DescribeImagesRequest(input)
	return out, req.Send()
}

// DescribeImagesWithContext is the same as DescribeImages with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeImagesWithContext(ctx volcstack.Context, input *DescribeImagesInput, opts ...request.Option) (*DescribeImagesOutput, error) {
	req, out := c.DescribeImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceTypesCommon = "DescribeInstanceTypes"

// DescribeInstanceTypesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceTypesCommon operation. The "output" return
// value will be populated with the DescribeInstanceTypesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceTypesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceTypesCommon Send returns without error.
//
// See DescribeInstanceTypesCommon for more information on using the DescribeInstanceTypesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceTypesCommonRequest method.
//    req, resp := client.DescribeInstanceTypesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceTypesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceTypesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceTypesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceTypesCommon for usage and error information.
func (c *ECS) DescribeInstanceTypesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTypesCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceTypesCommonWithContext is the same as DescribeInstanceTypesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceTypesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceTypesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceTypesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceTypes = "DescribeInstanceTypes"

// DescribeInstanceTypesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceTypes operation. The "output" return
// value will be populated with the DescribeInstanceTypesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceTypesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceTypesCommon Send returns without error.
//
// See DescribeInstanceTypes for more information on using the DescribeInstanceTypes
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceTypesRequest method.
//    req, resp := client.DescribeInstanceTypesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceTypesRequest(input *DescribeInstanceTypesInput) (req *request.Request, output *DescribeInstanceTypesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceTypes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceTypesInput{}
	}

	output = &DescribeInstanceTypesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceTypes API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceTypes for usage and error information.
func (c *ECS) DescribeInstanceTypes(input *DescribeInstanceTypesInput) (*DescribeInstanceTypesOutput, error) {
	req, out := c.DescribeInstanceTypesRequest(input)
	return out, req.Send()
}

// DescribeInstanceTypesWithContext is the same as DescribeInstanceTypes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceTypes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceTypesWithContext(ctx volcstack.Context, input *DescribeInstanceTypesInput, opts ...request.Option) (*DescribeInstanceTypesOutput, error) {
	req, out := c.DescribeInstanceTypesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceVncUrlCommon = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrlCommon operation. The "output" return
// value will be populated with the DescribeInstanceVncUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceVncUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceVncUrlCommon Send returns without error.
//
// See DescribeInstanceVncUrlCommon for more information on using the DescribeInstanceVncUrlCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceVncUrlCommonRequest method.
//    req, resp := client.DescribeInstanceVncUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrlCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrlCommon for usage and error information.
func (c *ECS) DescribeInstanceVncUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlCommonWithContext is the same as DescribeInstanceVncUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceVncUrl = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrl operation. The "output" return
// value will be populated with the DescribeInstanceVncUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceVncUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceVncUrlCommon Send returns without error.
//
// See DescribeInstanceVncUrl for more information on using the DescribeInstanceVncUrl
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceVncUrlRequest method.
//    req, resp := client.DescribeInstanceVncUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlRequest(input *DescribeInstanceVncUrlInput) (req *request.Request, output *DescribeInstanceVncUrlOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceVncUrlInput{}
	}

	output = &DescribeInstanceVncUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrl API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrl for usage and error information.
func (c *ECS) DescribeInstanceVncUrl(input *DescribeInstanceVncUrlInput) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlWithContext is the same as DescribeInstanceVncUrl with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlWithContext(ctx volcstack.Context, input *DescribeInstanceVncUrlInput, opts ...request.Option) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstancesCommon = "DescribeInstances"

// DescribeInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstancesCommon operation. The "output" return
// value will be populated with the DescribeInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstancesCommon Send returns without error.
//
// See DescribeInstancesCommon for more information on using the DescribeInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstancesCommonRequest method.
//    req, resp := client.DescribeInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstancesCommon for usage and error information.
func (c *ECS) DescribeInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancesCommonRequest(input)
	return out, req.Send()
}

// DescribeInstancesCommonWithContext is the same as DescribeInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstances = "DescribeInstances"

// DescribeInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstances operation. The "output" return
// value will be populated with the DescribeInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstancesCommon Send returns without error.
//
// See DescribeInstances for more information on using the DescribeInstances
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstancesRequest method.
//    req, resp := client.DescribeInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstancesRequest(input *DescribeInstancesInput) (req *request.Request, output *DescribeInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstancesInput{}
	}

	output = &DescribeInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstances for usage and error information.
func (c *ECS) DescribeInstances(input *DescribeInstancesInput) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	return out, req.Send()
}

// DescribeInstancesWithContext is the same as DescribeInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstancesWithContext(ctx volcstack.Context, input *DescribeInstancesInput, opts ...request.Option) (*DescribeInstancesOutput, error) {
	req, out := c.DescribeInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeUserDataCommon = "DescribeUserData"

// DescribeUserDataCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeUserDataCommon operation. The "output" return
// value will be populated with the DescribeUserDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeUserDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeUserDataCommon Send returns without error.
//
// See DescribeUserDataCommon for more information on using the DescribeUserDataCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeUserDataCommonRequest method.
//    req, resp := client.DescribeUserDataCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeUserDataCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeUserDataCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeUserDataCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeUserDataCommon for usage and error information.
func (c *ECS) DescribeUserDataCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeUserDataCommonRequest(input)
	return out, req.Send()
}

// DescribeUserDataCommonWithContext is the same as DescribeUserDataCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeUserDataCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeUserDataCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeUserDataCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeUserData = "DescribeUserData"

// DescribeUserDataRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeUserData operation. The "output" return
// value will be populated with the DescribeUserDataCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeUserDataCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeUserDataCommon Send returns without error.
//
// See DescribeUserData for more information on using the DescribeUserData
// API call, and error handling.
//
//    // Example sending a request using the DescribeUserDataRequest method.
//    req, resp := client.DescribeUserDataRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeUserDataRequest(input *DescribeUserDataInput) (req *request.Request, output *DescribeUserDataOutput) {
	op := &request.Operation{
		Name:       opDescribeUserData,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeUserDataInput{}
	}

	output = &DescribeUserDataOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeUserData API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeUserData for usage and error information.
func (c *ECS) DescribeUserData(input *DescribeUserDataInput) (*DescribeUserDataOutput, error) {
	req, out := c.DescribeUserDataRequest(input)
	return out, req.Send()
}

// DescribeUserDataWithContext is the same as DescribeUserData with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeUserData for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeUserDataWithContext(ctx volcstack.Context, input *DescribeUserDataInput, opts ...request.Option) (*DescribeUserDataOutput, error) {
	req, out := c.DescribeUserDataRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceAttributeCommon = "ModifyInstanceAttribute"

// ModifyInstanceAttributeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceAttributeCommon operation. The "output" return
// value will be populated with the ModifyInstanceAttributeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceAttributeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceAttributeCommon Send returns without error.
//
// See ModifyInstanceAttributeCommon for more information on using the ModifyInstanceAttributeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceAttributeCommonRequest method.
//    req, resp := client.ModifyInstanceAttributeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceAttributeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceAttributeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceAttributeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceAttributeCommon for usage and error information.
func (c *ECS) ModifyInstanceAttributeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceAttributeCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceAttributeCommonWithContext is the same as ModifyInstanceAttributeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceAttributeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceAttributeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceAttributeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceAttribute = "ModifyInstanceAttribute"

// ModifyInstanceAttributeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceAttribute operation. The "output" return
// value will be populated with the ModifyInstanceAttributeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceAttributeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceAttributeCommon Send returns without error.
//
// See ModifyInstanceAttribute for more information on using the ModifyInstanceAttribute
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceAttributeRequest method.
//    req, resp := client.ModifyInstanceAttributeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceAttributeRequest(input *ModifyInstanceAttributeInput) (req *request.Request, output *ModifyInstanceAttributeOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceAttributeInput{}
	}

	output = &ModifyInstanceAttributeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceAttribute API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceAttribute for usage and error information.
func (c *ECS) ModifyInstanceAttribute(input *ModifyInstanceAttributeInput) (*ModifyInstanceAttributeOutput, error) {
	req, out := c.ModifyInstanceAttributeRequest(input)
	return out, req.Send()
}

// ModifyInstanceAttributeWithContext is the same as ModifyInstanceAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceAttributeWithContext(ctx volcstack.Context, input *ModifyInstanceAttributeInput, opts ...request.Option) (*ModifyInstanceAttributeOutput, error) {
	req, out := c.ModifyInstanceAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceChargeTypeCommon = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceChargeTypeCommon operation. The "output" return
// value will be populated with the ModifyInstanceChargeTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceChargeTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceChargeTypeCommon Send returns without error.
//
// See ModifyInstanceChargeTypeCommon for more information on using the ModifyInstanceChargeTypeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceChargeTypeCommonRequest method.
//    req, resp := client.ModifyInstanceChargeTypeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceChargeTypeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeTypeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceChargeTypeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceChargeTypeCommon for usage and error information.
func (c *ECS) ModifyInstanceChargeTypeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeCommonWithContext is the same as ModifyInstanceChargeTypeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeTypeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceChargeTypeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceChargeTypeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceChargeType = "ModifyInstanceChargeType"

// ModifyInstanceChargeTypeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceChargeType operation. The "output" return
// value will be populated with the ModifyInstanceChargeTypeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceChargeTypeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceChargeTypeCommon Send returns without error.
//
// See ModifyInstanceChargeType for more information on using the ModifyInstanceChargeType
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceChargeTypeRequest method.
//    req, resp := client.ModifyInstanceChargeTypeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceChargeTypeRequest(input *ModifyInstanceChargeTypeInput) (req *request.Request, output *ModifyInstanceChargeTypeOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceChargeType,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceChargeTypeInput{}
	}

	output = &ModifyInstanceChargeTypeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceChargeType API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceChargeType for usage and error information.
func (c *ECS) ModifyInstanceChargeType(input *ModifyInstanceChargeTypeInput) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	return out, req.Send()
}

// ModifyInstanceChargeTypeWithContext is the same as ModifyInstanceChargeType with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceChargeType for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceChargeTypeWithContext(ctx volcstack.Context, input *ModifyInstanceChargeTypeInput, opts ...request.Option) (*ModifyInstanceChargeTypeOutput, error) {
	req, out := c.ModifyInstanceChargeTypeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceSpecCommon = "ModifyInstanceSpec"

// ModifyInstanceSpecCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceSpecCommon operation. The "output" return
// value will be populated with the ModifyInstanceSpecCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceSpecCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceSpecCommon Send returns without error.
//
// See ModifyInstanceSpecCommon for more information on using the ModifyInstanceSpecCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceSpecCommonRequest method.
//    req, resp := client.ModifyInstanceSpecCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceSpecCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyInstanceSpecCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyInstanceSpecCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceSpecCommon for usage and error information.
func (c *ECS) ModifyInstanceSpecCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceSpecCommonRequest(input)
	return out, req.Send()
}

// ModifyInstanceSpecCommonWithContext is the same as ModifyInstanceSpecCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceSpecCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceSpecCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyInstanceSpecCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyInstanceSpec = "ModifyInstanceSpec"

// ModifyInstanceSpecRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyInstanceSpec operation. The "output" return
// value will be populated with the ModifyInstanceSpecCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyInstanceSpecCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyInstanceSpecCommon Send returns without error.
//
// See ModifyInstanceSpec for more information on using the ModifyInstanceSpec
// API call, and error handling.
//
//    // Example sending a request using the ModifyInstanceSpecRequest method.
//    req, resp := client.ModifyInstanceSpecRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ModifyInstanceSpecRequest(input *ModifyInstanceSpecInput) (req *request.Request, output *ModifyInstanceSpecOutput) {
	op := &request.Operation{
		Name:       opModifyInstanceSpec,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyInstanceSpecInput{}
	}

	output = &ModifyInstanceSpecOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyInstanceSpec API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ModifyInstanceSpec for usage and error information.
func (c *ECS) ModifyInstanceSpec(input *ModifyInstanceSpecInput) (*ModifyInstanceSpecOutput, error) {
	req, out := c.ModifyInstanceSpecRequest(input)
	return out, req.Send()
}

// ModifyInstanceSpecWithContext is the same as ModifyInstanceSpec with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyInstanceSpec for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ModifyInstanceSpecWithContext(ctx volcstack.Context, input *ModifyInstanceSpecInput, opts ...request.Option) (*ModifyInstanceSpecOutput, error) {
	req, out := c.ModifyInstanceSpecRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstanceCommon = "RebootInstance"

// RebootInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstanceCommon operation. The "output" return
// value will be populated with the RebootInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RebootInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RebootInstanceCommon Send returns without error.
//
// See RebootInstanceCommon for more information on using the RebootInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RebootInstanceCommonRequest method.
//    req, resp := client.RebootInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRebootInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RebootInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstanceCommon for usage and error information.
func (c *ECS) RebootInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RebootInstanceCommonRequest(input)
	return out, req.Send()
}

// RebootInstanceCommonWithContext is the same as RebootInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RebootInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootInstance = "RebootInstance"

// RebootInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RebootInstance operation. The "output" return
// value will be populated with the RebootInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RebootInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RebootInstanceCommon Send returns without error.
//
// See RebootInstance for more information on using the RebootInstance
// API call, and error handling.
//
//    // Example sending a request using the RebootInstanceRequest method.
//    req, resp := client.RebootInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RebootInstanceRequest(input *RebootInstanceInput) (req *request.Request, output *RebootInstanceOutput) {
	op := &request.Operation{
		Name:       opRebootInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RebootInstanceInput{}
	}

	output = &RebootInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// RebootInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RebootInstance for usage and error information.
func (c *ECS) RebootInstance(input *RebootInstanceInput) (*RebootInstanceOutput, error) {
	req, out := c.RebootInstanceRequest(input)
	return out, req.Send()
}

// RebootInstanceWithContext is the same as RebootInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RebootInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RebootInstanceWithContext(ctx volcstack.Context, input *RebootInstanceInput, opts ...request.Option) (*RebootInstanceOutput, error) {
	req, out := c.RebootInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewInstanceCommon = "RenewInstance"

// RenewInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewInstanceCommon operation. The "output" return
// value will be populated with the RenewInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewInstanceCommon Send returns without error.
//
// See RenewInstanceCommon for more information on using the RenewInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewInstanceCommonRequest method.
//    req, resp := client.RenewInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RenewInstanceCommon for usage and error information.
func (c *ECS) RenewInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewInstanceCommonRequest(input)
	return out, req.Send()
}

// RenewInstanceCommonWithContext is the same as RenewInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewInstance = "RenewInstance"

// RenewInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewInstance operation. The "output" return
// value will be populated with the RenewInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewInstanceCommon Send returns without error.
//
// See RenewInstance for more information on using the RenewInstance
// API call, and error handling.
//
//    // Example sending a request using the RenewInstanceRequest method.
//    req, resp := client.RenewInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RenewInstanceRequest(input *RenewInstanceInput) (req *request.Request, output *RenewInstanceOutput) {
	op := &request.Operation{
		Name:       opRenewInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewInstanceInput{}
	}

	output = &RenewInstanceOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RenewInstance for usage and error information.
func (c *ECS) RenewInstance(input *RenewInstanceInput) (*RenewInstanceOutput, error) {
	req, out := c.RenewInstanceRequest(input)
	return out, req.Send()
}

// RenewInstanceWithContext is the same as RenewInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RenewInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RenewInstanceWithContext(ctx volcstack.Context, input *RenewInstanceInput, opts ...request.Option) (*RenewInstanceOutput, error) {
	req, out := c.RenewInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunInstancesCommon = "RunInstances"

// RunInstancesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RunInstancesCommon operation. The "output" return
// value will be populated with the RunInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RunInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after RunInstancesCommon Send returns without error.
//
// See RunInstancesCommon for more information on using the RunInstancesCommon
// API call, and error handling.
//
//    // Example sending a request using the RunInstancesCommonRequest method.
//    req, resp := client.RunInstancesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RunInstancesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRunInstancesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RunInstancesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RunInstancesCommon for usage and error information.
func (c *ECS) RunInstancesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RunInstancesCommonRequest(input)
	return out, req.Send()
}

// RunInstancesCommonWithContext is the same as RunInstancesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RunInstancesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RunInstancesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RunInstancesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRunInstances = "RunInstances"

// RunInstancesRequest generates a "volcstack/request.Request" representing the
// client's request for the RunInstances operation. The "output" return
// value will be populated with the RunInstancesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RunInstancesCommon Request to send the API call to the service.
// the "output" return value is not valid until after RunInstancesCommon Send returns without error.
//
// See RunInstances for more information on using the RunInstances
// API call, and error handling.
//
//    // Example sending a request using the RunInstancesRequest method.
//    req, resp := client.RunInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) RunInstancesRequest(input *RunInstancesInput) (req *request.Request, output *RunInstancesOutput) {
	op := &request.Operation{
		Name:       opRunInstances,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RunInstancesInput{}
	}

	output = &RunInstancesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RunInstances API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation RunInstances for usage and error information.
func (c *ECS) RunInstances(input *RunInstancesInput) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	return out, req.Send()
}

// RunInstancesWithContext is the same as RunInstances with the addition of
// the ability to pass a context and additional request options.
//
// See RunInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) RunInstancesWithContext(ctx volcstack.Context, input *RunInstancesInput, opts ...request.Option) (*RunInstancesOutput, error) {
	req, out := c.RunInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstanceCommon = "StartInstance"

// StartInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstanceCommon operation. The "output" return
// value will be populated with the StartInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartInstanceCommon Send returns without error.
//
// See StartInstanceCommon for more information on using the StartInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the StartInstanceCommonRequest method.
//    req, resp := client.StartInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStartInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StartInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstanceCommon for usage and error information.
func (c *ECS) StartInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StartInstanceCommonRequest(input)
	return out, req.Send()
}

// StartInstanceCommonWithContext is the same as StartInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StartInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStartInstance = "StartInstance"

// StartInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the StartInstance operation. The "output" return
// value will be populated with the StartInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StartInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StartInstanceCommon Send returns without error.
//
// See StartInstance for more information on using the StartInstance
// API call, and error handling.
//
//    // Example sending a request using the StartInstanceRequest method.
//    req, resp := client.StartInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StartInstanceRequest(input *StartInstanceInput) (req *request.Request, output *StartInstanceOutput) {
	op := &request.Operation{
		Name:       opStartInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StartInstanceInput{}
	}

	output = &StartInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// StartInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StartInstance for usage and error information.
func (c *ECS) StartInstance(input *StartInstanceInput) (*StartInstanceOutput, error) {
	req, out := c.StartInstanceRequest(input)
	return out, req.Send()
}

// StartInstanceWithContext is the same as StartInstance with the addition of
// the ability to pass a context and additional request options.
//
// See StartInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StartInstanceWithContext(ctx volcstack.Context, input *StartInstanceInput, opts ...request.Option) (*StartInstanceOutput, error) {
	req, out := c.StartInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstanceCommon = "StopInstance"

// StopInstanceCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstanceCommon operation. The "output" return
// value will be populated with the StopInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopInstanceCommon Send returns without error.
//
// See StopInstanceCommon for more information on using the StopInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the StopInstanceCommonRequest method.
//    req, resp := client.StopInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opStopInstanceCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// StopInstanceCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstanceCommon for usage and error information.
func (c *ECS) StopInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.StopInstanceCommonRequest(input)
	return out, req.Send()
}

// StopInstanceCommonWithContext is the same as StopInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstanceCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.StopInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opStopInstance = "StopInstance"

// StopInstanceRequest generates a "volcstack/request.Request" representing the
// client's request for the StopInstance operation. The "output" return
// value will be populated with the StopInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned StopInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after StopInstanceCommon Send returns without error.
//
// See StopInstance for more information on using the StopInstance
// API call, and error handling.
//
//    // Example sending a request using the StopInstanceRequest method.
//    req, resp := client.StopInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) StopInstanceRequest(input *StopInstanceInput) (req *request.Request, output *StopInstanceOutput) {
	op := &request.Operation{
		Name:       opStopInstance,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &StopInstanceInput{}
	}

	output = &StopInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// StopInstance API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation StopInstance for usage and error information.
func (c *ECS) StopInstance(input *StopInstanceInput) (*StopInstanceOutput, error) {
	req, out := c.StopInstanceRequest(input)
	return out, req.Send()
}

// StopInstanceWithContext is the same as StopInstance with the addition of
// the ability to pass a context and additional request options.
//
// See StopInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) StopInstanceWithContext(ctx volcstack.Context, input *StopInstanceInput, opts ...request.Option) (*StopInstanceOutput, error) {
	req, out := c.StopInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AvailableZoneForDescribeAvailableResourceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s AvailableZoneForDescribeAvailableResourceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AvailableZoneForDescribeAvailableResourceOutput) GoString() string {
	return s.String()
}

type CreateImageInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	ImageName *string `type:"string"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s CreateImageInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateImageInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *CreateImageInput) SetDescription(v string) *CreateImageInput {
	s.Description = &v
	return s
}

// SetImageName sets the ImageName field's value.
func (s *CreateImageInput) SetImageName(v string) *CreateImageInput {
	s.ImageName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateImageInput) SetInstanceId(v string) *CreateImageInput {
	s.InstanceId = &v
	return s
}

type CreateImageOutput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`
}

// String returns the string representation
func (s CreateImageOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateImageOutput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *CreateImageOutput) SetImageId(v string) *CreateImageOutput {
	s.ImageId = &v
	return s
}

type DeleteInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DeleteInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DeleteInstanceInput) SetInstanceId(v string) *DeleteInstanceInput {
	s.InstanceId = &v
	return s
}

type DeleteInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteInstanceOutput) GoString() string {
	return s.String()
}

type DescribeAvailableResourceInput struct {
	_ struct{} `type:"structure"`

	DestinationResource *string `type:"string"`

	InstanceType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeAvailableResourceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableResourceInput) GoString() string {
	return s.String()
}

// SetDestinationResource sets the DestinationResource field's value.
func (s *DescribeAvailableResourceInput) SetDestinationResource(v string) *DescribeAvailableResourceInput {
	s.DestinationResource = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DescribeAvailableResourceInput) SetInstanceType(v string) *DescribeAvailableResourceInput {
	s.InstanceType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeAvailableResourceInput) SetZoneId(v string) *DescribeAvailableResourceInput {
	s.ZoneId = &v
	return s
}

type DescribeAvailableResourceOutput struct {
	_ struct{} `type:"structure"`

	AvailableZones []*AvailableZoneForDescribeAvailableResourceOutput `type:"list"`
}

// String returns the string representation
func (s DescribeAvailableResourceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeAvailableResourceOutput) GoString() string {
	return s.String()
}

// SetAvailableZones sets the AvailableZones field's value.
func (s *DescribeAvailableResourceOutput) SetAvailableZones(v []*AvailableZoneForDescribeAvailableResourceOutput) *DescribeAvailableResourceOutput {
	s.AvailableZones = v
	return s
}

type DescribeImagesInput struct {
	_ struct{} `type:"structure"`

	ImageIds []*string `type:"list"`

	ImageStatus *string `type:"string"`

	InstanceTypeId *string `type:"string"`

	IsSupportCloudInit *bool `type:"boolean"`

	OsType *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	Visibility *string `type:"string"`
}

// String returns the string representation
func (s DescribeImagesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeImagesInput) GoString() string {
	return s.String()
}

// SetImageIds sets the ImageIds field's value.
func (s *DescribeImagesInput) SetImageIds(v []*string) *DescribeImagesInput {
	s.ImageIds = v
	return s
}

// SetImageStatus sets the ImageStatus field's value.
func (s *DescribeImagesInput) SetImageStatus(v string) *DescribeImagesInput {
	s.ImageStatus = &v
	return s
}

// SetInstanceTypeId sets the InstanceTypeId field's value.
func (s *DescribeImagesInput) SetInstanceTypeId(v string) *DescribeImagesInput {
	s.InstanceTypeId = &v
	return s
}

// SetIsSupportCloudInit sets the IsSupportCloudInit field's value.
func (s *DescribeImagesInput) SetIsSupportCloudInit(v bool) *DescribeImagesInput {
	s.IsSupportCloudInit = &v
	return s
}

// SetOsType sets the OsType field's value.
func (s *DescribeImagesInput) SetOsType(v string) *DescribeImagesInput {
	s.OsType = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeImagesInput) SetPageNumber(v int32) *DescribeImagesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeImagesInput) SetPageSize(v int32) *DescribeImagesInput {
	s.PageSize = &v
	return s
}

// SetVisibility sets the Visibility field's value.
func (s *DescribeImagesInput) SetVisibility(v string) *DescribeImagesInput {
	s.Visibility = &v
	return s
}

type DescribeImagesOutput struct {
	_ struct{} `type:"structure"`

	Images []*ImageForDescribeImagesOutput `type:"list"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeImagesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeImagesOutput) GoString() string {
	return s.String()
}

// SetImages sets the Images field's value.
func (s *DescribeImagesOutput) SetImages(v []*ImageForDescribeImagesOutput) *DescribeImagesOutput {
	s.Images = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeImagesOutput) SetPageNumber(v int32) *DescribeImagesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeImagesOutput) SetPageSize(v int32) *DescribeImagesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeImagesOutput) SetTotalCount(v int32) *DescribeImagesOutput {
	s.TotalCount = &v
	return s
}

type DescribeInstanceTypesInput struct {
	_ struct{} `type:"structure"`

	InstanceTypes []*string `type:"list"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeInstanceTypesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceTypesInput) GoString() string {
	return s.String()
}

// SetInstanceTypes sets the InstanceTypes field's value.
func (s *DescribeInstanceTypesInput) SetInstanceTypes(v []*string) *DescribeInstanceTypesInput {
	s.InstanceTypes = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstanceTypesInput) SetPageNumber(v int32) *DescribeInstanceTypesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstanceTypesInput) SetPageSize(v int32) *DescribeInstanceTypesInput {
	s.PageSize = &v
	return s
}

type DescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`

	InstanceTypes []*InstanceTypeForDescribeInstanceTypesOutput `type:"list"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

// SetInstanceTypes sets the InstanceTypes field's value.
func (s *DescribeInstanceTypesOutput) SetInstanceTypes(v []*InstanceTypeForDescribeInstanceTypesOutput) *DescribeInstanceTypesOutput {
	s.InstanceTypes = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstanceTypesOutput) SetPageNumber(v int32) *DescribeInstanceTypesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstanceTypesOutput) SetPageSize(v int32) *DescribeInstanceTypesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeInstanceTypesOutput) SetTotalCount(v int32) *DescribeInstanceTypesOutput {
	s.TotalCount = &v
	return s
}

type DescribeInstanceVncUrlInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceVncUrlInput) SetInstanceId(v string) *DescribeInstanceVncUrlInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceVncUrlOutput struct {
	_ struct{} `type:"structure"`

	VncUrl *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlOutput) GoString() string {
	return s.String()
}

// SetVncUrl sets the VncUrl field's value.
func (s *DescribeInstanceVncUrlOutput) SetVncUrl(v string) *DescribeInstanceVncUrlOutput {
	s.VncUrl = &v
	return s
}

type DescribeInstancesInput struct {
	_ struct{} `type:"structure"`

	HpcClusterId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceIds []*string `type:"list"`

	InstanceName *string `type:"string"`

	KeyPairName *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	PrimaryIpAddress *string `type:"string"`

	Status *string `type:"string"`

	VpcId *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesInput) GoString() string {
	return s.String()
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *DescribeInstancesInput) SetHpcClusterId(v string) *DescribeInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *DescribeInstancesInput) SetInstanceChargeType(v string) *DescribeInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *DescribeInstancesInput) SetInstanceIds(v []*string) *DescribeInstancesInput {
	s.InstanceIds = v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *DescribeInstancesInput) SetInstanceName(v string) *DescribeInstancesInput {
	s.InstanceName = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *DescribeInstancesInput) SetKeyPairName(v string) *DescribeInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstancesInput) SetPageNumber(v int32) *DescribeInstancesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstancesInput) SetPageSize(v int32) *DescribeInstancesInput {
	s.PageSize = &v
	return s
}

// SetPrimaryIpAddress sets the PrimaryIpAddress field's value.
func (s *DescribeInstancesInput) SetPrimaryIpAddress(v string) *DescribeInstancesInput {
	s.PrimaryIpAddress = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DescribeInstancesInput) SetStatus(v string) *DescribeInstancesInput {
	s.Status = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *DescribeInstancesInput) SetVpcId(v string) *DescribeInstancesInput {
	s.VpcId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeInstancesInput) SetZoneId(v string) *DescribeInstancesInput {
	s.ZoneId = &v
	return s
}

type DescribeInstancesOutput struct {
	_ struct{} `type:"structure"`

	Instances []*InstanceForDescribeInstancesOutput `type:"list"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TotalCount *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstancesOutput) GoString() string {
	return s.String()
}

// SetInstances sets the Instances field's value.
func (s *DescribeInstancesOutput) SetInstances(v []*InstanceForDescribeInstancesOutput) *DescribeInstancesOutput {
	s.Instances = v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeInstancesOutput) SetPageNumber(v int32) *DescribeInstancesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeInstancesOutput) SetPageSize(v int32) *DescribeInstancesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeInstancesOutput) SetTotalCount(v int32) *DescribeInstancesOutput {
	s.TotalCount = &v
	return s
}

type DescribeUserDataInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeUserDataInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeUserDataInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeUserDataInput) SetInstanceId(v string) *DescribeUserDataInput {
	s.InstanceId = &v
	return s
}

type DescribeUserDataOutput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s DescribeUserDataOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeUserDataOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeUserDataOutput) SetInstanceId(v string) *DescribeUserDataOutput {
	s.InstanceId = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *DescribeUserDataOutput) SetUserData(v string) *DescribeUserDataOutput {
	s.UserData = &v
	return s
}

type ImageForDescribeImagesOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ImageForDescribeImagesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ImageForDescribeImagesOutput) GoString() string {
	return s.String()
}

type InstanceForDescribeInstancesOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s InstanceForDescribeInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceForDescribeInstancesOutput) GoString() string {
	return s.String()
}

type InstanceTypeForDescribeInstanceTypesOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s InstanceTypeForDescribeInstanceTypesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s InstanceTypeForDescribeInstanceTypesOutput) GoString() string {
	return s.String()
}

type ModifyInstanceAttributeInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceName *string `type:"string"`

	Password *string `type:"string"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceAttributeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceAttributeInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *ModifyInstanceAttributeInput) SetDescription(v string) *ModifyInstanceAttributeInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceAttributeInput) SetInstanceId(v string) *ModifyInstanceAttributeInput {
	s.InstanceId = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *ModifyInstanceAttributeInput) SetInstanceName(v string) *ModifyInstanceAttributeInput {
	s.InstanceName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ModifyInstanceAttributeInput) SetPassword(v string) *ModifyInstanceAttributeInput {
	s.Password = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ModifyInstanceAttributeInput) SetUserData(v string) *ModifyInstanceAttributeInput {
	s.UserData = &v
	return s
}

type ModifyInstanceAttributeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyInstanceAttributeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceAttributeOutput) GoString() string {
	return s.String()
}

type ModifyInstanceChargeTypeInput struct {
	_ struct{} `type:"structure"`

	AutoPay *bool `type:"boolean"`

	ClientToken *string `type:"string"`

	IncludeDataVolumes *bool `type:"boolean"`

	InstanceChargeType *string `type:"string"`

	InstanceIds []*string `type:"list"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeInput) GoString() string {
	return s.String()
}

// SetAutoPay sets the AutoPay field's value.
func (s *ModifyInstanceChargeTypeInput) SetAutoPay(v bool) *ModifyInstanceChargeTypeInput {
	s.AutoPay = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *ModifyInstanceChargeTypeInput) SetClientToken(v string) *ModifyInstanceChargeTypeInput {
	s.ClientToken = &v
	return s
}

// SetIncludeDataVolumes sets the IncludeDataVolumes field's value.
func (s *ModifyInstanceChargeTypeInput) SetIncludeDataVolumes(v bool) *ModifyInstanceChargeTypeInput {
	s.IncludeDataVolumes = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *ModifyInstanceChargeTypeInput) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *ModifyInstanceChargeTypeInput) SetInstanceIds(v []*string) *ModifyInstanceChargeTypeInput {
	s.InstanceIds = v
	return s
}

// SetPeriod sets the Period field's value.
func (s *ModifyInstanceChargeTypeInput) SetPeriod(v int32) *ModifyInstanceChargeTypeInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *ModifyInstanceChargeTypeInput) SetPeriodUnit(v string) *ModifyInstanceChargeTypeInput {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceChargeTypeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyInstanceChargeTypeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceChargeTypeOutput) GoString() string {
	return s.String()
}

type ModifyInstanceSpecInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceType *string `type:"string"`
}

// String returns the string representation
func (s ModifyInstanceSpecInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceSpecInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *ModifyInstanceSpecInput) SetClientToken(v string) *ModifyInstanceSpecInput {
	s.ClientToken = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyInstanceSpecInput) SetInstanceId(v string) *ModifyInstanceSpecInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *ModifyInstanceSpecInput) SetInstanceType(v string) *ModifyInstanceSpecInput {
	s.InstanceType = &v
	return s
}

type ModifyInstanceSpecOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyInstanceSpecOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyInstanceSpecOutput) GoString() string {
	return s.String()
}

type NetworkInterfaceForRunInstancesInput struct {
	_ struct{} `type:"structure"`

	SecurityGroupIds []*string `type:"list"`

	SubnetId *string `type:"string"`
}

// String returns the string representation
func (s NetworkInterfaceForRunInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s NetworkInterfaceForRunInstancesInput) GoString() string {
	return s.String()
}

// SetSecurityGroupIds sets the SecurityGroupIds field's value.
func (s *NetworkInterfaceForRunInstancesInput) SetSecurityGroupIds(v []*string) *NetworkInterfaceForRunInstancesInput {
	s.SecurityGroupIds = v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *NetworkInterfaceForRunInstancesInput) SetSubnetId(v string) *NetworkInterfaceForRunInstancesInput {
	s.SubnetId = &v
	return s
}

type RebootInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s RebootInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *RebootInstanceInput) SetInstanceId(v string) *RebootInstanceInput {
	s.InstanceId = &v
	return s
}

type RebootInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s RebootInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootInstanceOutput) GoString() string {
	return s.String()
}

type RenewInstanceInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	InstanceId *string `type:"string"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`
}

// String returns the string representation
func (s RenewInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewInstanceInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *RenewInstanceInput) SetClientToken(v string) *RenewInstanceInput {
	s.ClientToken = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RenewInstanceInput) SetInstanceId(v string) *RenewInstanceInput {
	s.InstanceId = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RenewInstanceInput) SetPeriod(v int32) *RenewInstanceInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewInstanceInput) SetPeriodUnit(v string) *RenewInstanceInput {
	s.PeriodUnit = &v
	return s
}

type RenewInstanceOutput struct {
	_ struct{} `type:"structure"`

	OrderId *string `type:"string"`
}

// String returns the string representation
func (s RenewInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewInstanceOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *RenewInstanceOutput) SetOrderId(v string) *RenewInstanceOutput {
	s.OrderId = &v
	return s
}

type RunInstancesInput struct {
	_ struct{} `type:"structure"`

	AutoRenew *bool `type:"boolean"`

	AutoRenewPeriod *int32 `type:"int32"`

	ClientToken *string `type:"string"`

	Count *int32 `type:"int32"`

	Description *string `type:"string"`

	HostName *string `type:"string"`

	HpcClusterId *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceChargeType *string `type:"string"`

	InstanceName *string `type:"string"`

	InstanceType *string `type:"string"`

	KeyPairName *string `type:"string"`

	NetworkInterfaces []*NetworkInterfaceForRunInstancesInput `type:"list"`

	Password *string `type:"string"`

	Period *int32 `type:"int32"`

	PeriodUnit *string `type:"string"`

	SecurityEnhancementStrategy *string `type:"string"`

	SuffixIndex *int32 `type:"int32"`

	UniqueSuffix *bool `type:"boolean"`

	UserData *string `type:"string"`

	Volumes []*VolumeForRunInstancesInput `type:"list"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s RunInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesInput) GoString() string {
	return s.String()
}

// SetAutoRenew sets the AutoRenew field's value.
func (s *RunInstancesInput) SetAutoRenew(v bool) *RunInstancesInput {
	s.AutoRenew = &v
	return s
}

// SetAutoRenewPeriod sets the AutoRenewPeriod field's value.
func (s *RunInstancesInput) SetAutoRenewPeriod(v int32) *RunInstancesInput {
	s.AutoRenewPeriod = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *RunInstancesInput) SetClientToken(v string) *RunInstancesInput {
	s.ClientToken = &v
	return s
}

// SetCount sets the Count field's value.
func (s *RunInstancesInput) SetCount(v int32) *RunInstancesInput {
	s.Count = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *RunInstancesInput) SetDescription(v string) *RunInstancesInput {
	s.Description = &v
	return s
}

// SetHostName sets the HostName field's value.
func (s *RunInstancesInput) SetHostName(v string) *RunInstancesInput {
	s.HostName = &v
	return s
}

// SetHpcClusterId sets the HpcClusterId field's value.
func (s *RunInstancesInput) SetHpcClusterId(v string) *RunInstancesInput {
	s.HpcClusterId = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *RunInstancesInput) SetImageId(v string) *RunInstancesInput {
	s.ImageId = &v
	return s
}

// SetInstanceChargeType sets the InstanceChargeType field's value.
func (s *RunInstancesInput) SetInstanceChargeType(v string) *RunInstancesInput {
	s.InstanceChargeType = &v
	return s
}

// SetInstanceName sets the InstanceName field's value.
func (s *RunInstancesInput) SetInstanceName(v string) *RunInstancesInput {
	s.InstanceName = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *RunInstancesInput) SetInstanceType(v string) *RunInstancesInput {
	s.InstanceType = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *RunInstancesInput) SetKeyPairName(v string) *RunInstancesInput {
	s.KeyPairName = &v
	return s
}

// SetNetworkInterfaces sets the NetworkInterfaces field's value.
func (s *RunInstancesInput) SetNetworkInterfaces(v []*NetworkInterfaceForRunInstancesInput) *RunInstancesInput {
	s.NetworkInterfaces = v
	return s
}

// SetPassword sets the Password field's value.
func (s *RunInstancesInput) SetPassword(v string) *RunInstancesInput {
	s.Password = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *RunInstancesInput) SetPeriod(v int32) *RunInstancesInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RunInstancesInput) SetPeriodUnit(v string) *RunInstancesInput {
	s.PeriodUnit = &v
	return s
}

// SetSecurityEnhancementStrategy sets the SecurityEnhancementStrategy field's value.
func (s *RunInstancesInput) SetSecurityEnhancementStrategy(v string) *RunInstancesInput {
	s.SecurityEnhancementStrategy = &v
	return s
}

// SetSuffixIndex sets the SuffixIndex field's value.
func (s *RunInstancesInput) SetSuffixIndex(v int32) *RunInstancesInput {
	s.SuffixIndex = &v
	return s
}

// SetUniqueSuffix sets the UniqueSuffix field's value.
func (s *RunInstancesInput) SetUniqueSuffix(v bool) *RunInstancesInput {
	s.UniqueSuffix = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *RunInstancesInput) SetUserData(v string) *RunInstancesInput {
	s.UserData = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *RunInstancesInput) SetVolumes(v []*VolumeForRunInstancesInput) *RunInstancesInput {
	s.Volumes = v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *RunInstancesInput) SetZoneId(v string) *RunInstancesInput {
	s.ZoneId = &v
	return s
}

type RunInstancesOutput struct {
	_ struct{} `type:"structure"`

	InstanceIds []*string `type:"list"`
}

// String returns the string representation
func (s RunInstancesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RunInstancesOutput) GoString() string {
	return s.String()
}

// SetInstanceIds sets the InstanceIds field's value.
func (s *RunInstancesOutput) SetInstanceIds(v []*string) *RunInstancesOutput {
	s.InstanceIds = v
	return s
}

type StartInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s StartInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *StartInstanceInput) SetInstanceId(v string) *StartInstanceInput {
	s.InstanceId = &v
	return s
}

type StartInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s StartInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StartInstanceOutput) GoString() string {
	return s.String()
}

type StopInstanceInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	StoppedMode *string `type:"string"`
}

// String returns the string representation
func (s StopInstanceInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstanceInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *StopInstanceInput) SetInstanceId(v string) *StopInstanceInput {
	s.InstanceId = &v
	return s
}

// SetStoppedMode sets the StoppedMode field's value.
func (s *StopInstanceInput) SetStoppedMode(v string) *StopInstanceInput {
	s.StoppedMode = &v
	return s
}

type StopInstanceOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s StopInstanceOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s StopInstanceOutput) GoString() string {
	return s.String()
}

type VolumeForRunInstancesInput struct {
	_ struct{} `type:"structure"`

	DeleteWithInstance *string `type:"string"`

	Size *int32 `type:"int32"`

	VolumeType *string `type:"string"`
}

// String returns the string representation
func (s VolumeForRunInstancesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s VolumeForRunInstancesInput) GoString() string {
	return s.String()
}

// SetDeleteWithInstance sets the DeleteWithInstance field's value.
func (s *VolumeForRunInstancesInput) SetDeleteWithInstance(v string) *VolumeForRunInstancesInput {
	s.DeleteWithInstance = &v
	return s
}

// SetSize sets the Size field's value.
func (s *VolumeForRunInstancesInput) SetSize(v int32) *VolumeForRunInstancesInput {
	s.Size = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *VolumeForRunInstancesInput) SetVolumeType(v string) *VolumeForRunInstancesInput {
	s.VolumeType = &v
	return s
}

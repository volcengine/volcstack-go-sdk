// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opDescribeZonesCommon = "DescribeZones"

// DescribeZonesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeZonesCommon operation. The "output" return
// value will be populated with the DescribeZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeZonesCommon Send returns without error.
//
// See DescribeZonesCommon for more information on using the DescribeZonesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeZonesCommonRequest method.
//    req, resp := client.DescribeZonesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeZonesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeZonesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeZonesCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeZonesCommon for usage and error information.
func (c *ECS) DescribeZonesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeZonesCommonRequest(input)
	return out, req.Send()
}

// DescribeZonesCommonWithContext is the same as DescribeZonesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeZonesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeZonesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeZonesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeZones = "DescribeZones"

// DescribeZonesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeZones operation. The "output" return
// value will be populated with the DescribeZonesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeZonesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeZonesCommon Send returns without error.
//
// See DescribeZones for more information on using the DescribeZones
// API call, and error handling.
//
//    // Example sending a request using the DescribeZonesRequest method.
//    req, resp := client.DescribeZonesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeZonesRequest(input *DescribeZonesInput) (req *request.Request, output *DescribeZonesOutput) {
	op := &request.Operation{
		Name:       opDescribeZones,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeZonesInput{}
	}

	output = &DescribeZonesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeZones API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeZones for usage and error information.
func (c *ECS) DescribeZones(input *DescribeZonesInput) (*DescribeZonesOutput, error) {
	req, out := c.DescribeZonesRequest(input)
	return out, req.Send()
}

// DescribeZonesWithContext is the same as DescribeZones with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeZones for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeZonesWithContext(ctx volcstack.Context, input *DescribeZonesInput, opts ...request.Option) (*DescribeZonesOutput, error) {
	req, out := c.DescribeZonesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeZonesInput struct {
	_ struct{} `type:"structure"`

	ZoneIds []*string `type:"list"`
}

// String returns the string representation
func (s DescribeZonesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeZonesInput) GoString() string {
	return s.String()
}

// SetZoneIds sets the ZoneIds field's value.
func (s *DescribeZonesInput) SetZoneIds(v []*string) *DescribeZonesInput {
	s.ZoneIds = v
	return s
}

type DescribeZonesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Zones []*ZoneForDescribeZonesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeZonesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeZonesOutput) GoString() string {
	return s.String()
}

// SetZones sets the Zones field's value.
func (s *DescribeZonesOutput) SetZones(v []*ZoneForDescribeZonesOutput) *DescribeZonesOutput {
	s.Zones = v
	return s
}

type ZoneForDescribeZonesOutput struct {
	_ struct{} `type:"structure"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s ZoneForDescribeZonesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ZoneForDescribeZonesOutput) GoString() string {
	return s.String()
}

// SetZoneId sets the ZoneId field's value.
func (s *ZoneForDescribeZonesOutput) SetZoneId(v string) *ZoneForDescribeZonesOutput {
	s.ZoneId = &v
	return s
}

// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opDescribeInstanceVncUrlCommon = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrlCommon operation. The "output" return
// value will be populated with the DescribeInstanceVncUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceVncUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceVncUrlCommon Send returns without error.
//
// See DescribeInstanceVncUrlCommon for more information on using the DescribeInstanceVncUrlCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceVncUrlCommonRequest method.
//    req, resp := client.DescribeInstanceVncUrlCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrlCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrlCommon for usage and error information.
func (c *ECS) DescribeInstanceVncUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlCommonWithContext is the same as DescribeInstanceVncUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceVncUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceVncUrl = "DescribeInstanceVncUrl"

// DescribeInstanceVncUrlRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeInstanceVncUrl operation. The "output" return
// value will be populated with the DescribeInstanceVncUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceVncUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceVncUrlCommon Send returns without error.
//
// See DescribeInstanceVncUrl for more information on using the DescribeInstanceVncUrl
// API call, and error handling.
//
//    // Example sending a request using the DescribeInstanceVncUrlRequest method.
//    req, resp := client.DescribeInstanceVncUrlRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) DescribeInstanceVncUrlRequest(input *DescribeInstanceVncUrlInput) (req *request.Request, output *DescribeInstanceVncUrlOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceVncUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceVncUrlInput{}
	}

	output = &DescribeInstanceVncUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceVncUrl API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation DescribeInstanceVncUrl for usage and error information.
func (c *ECS) DescribeInstanceVncUrl(input *DescribeInstanceVncUrlInput) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	return out, req.Send()
}

// DescribeInstanceVncUrlWithContext is the same as DescribeInstanceVncUrl with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceVncUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceVncUrlWithContext(ctx volcstack.Context, input *DescribeInstanceVncUrlInput, opts ...request.Option) (*DescribeInstanceVncUrlOutput, error) {
	req, out := c.DescribeInstanceVncUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeInstanceVncUrlInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceVncUrlInput) SetInstanceId(v string) *DescribeInstanceVncUrlInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceVncUrlOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	VncUrl *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceVncUrlOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceVncUrlOutput) GoString() string {
	return s.String()
}

// SetVncUrl sets the VncUrl field's value.
func (s *DescribeInstanceVncUrlOutput) SetVncUrl(v string) *DescribeInstanceVncUrlOutput {
	s.VncUrl = &v
	return s
}

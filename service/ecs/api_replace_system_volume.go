// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"encoding/json"

	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opReplaceSystemVolumeCommon = "ReplaceSystemVolume"

// ReplaceSystemVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemVolumeCommon operation. The "output" return
// value will be populated with the ReplaceSystemVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ReplaceSystemVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ReplaceSystemVolumeCommon Send returns without error.
//
// See ReplaceSystemVolumeCommon for more information on using the ReplaceSystemVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the ReplaceSystemVolumeCommonRequest method.
//    req, resp := client.ReplaceSystemVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opReplaceSystemVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ReplaceSystemVolumeCommon API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemVolumeCommon for usage and error information.
func (c *ECS) ReplaceSystemVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemVolumeCommonRequest(input)
	return out, req.Send()
}

// ReplaceSystemVolumeCommonWithContext is the same as ReplaceSystemVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ReplaceSystemVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opReplaceSystemVolume = "ReplaceSystemVolume"

// ReplaceSystemVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the ReplaceSystemVolume operation. The "output" return
// value will be populated with the ReplaceSystemVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ReplaceSystemVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ReplaceSystemVolumeCommon Send returns without error.
//
// See ReplaceSystemVolume for more information on using the ReplaceSystemVolume
// API call, and error handling.
//
//    // Example sending a request using the ReplaceSystemVolumeRequest method.
//    req, resp := client.ReplaceSystemVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *ECS) ReplaceSystemVolumeRequest(input *ReplaceSystemVolumeInput) (req *request.Request, output *ReplaceSystemVolumeOutput) {
	op := &request.Operation{
		Name:       opReplaceSystemVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ReplaceSystemVolumeInput{}
	}

	output = &ReplaceSystemVolumeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ReplaceSystemVolume API operation for ECS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for ECS's
// API operation ReplaceSystemVolume for usage and error information.
func (c *ECS) ReplaceSystemVolume(input *ReplaceSystemVolumeInput) (*ReplaceSystemVolumeOutput, error) {
	req, out := c.ReplaceSystemVolumeRequest(input)
	return out, req.Send()
}

// ReplaceSystemVolumeWithContext is the same as ReplaceSystemVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ReplaceSystemVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ReplaceSystemVolumeWithContext(ctx volcstack.Context, input *ReplaceSystemVolumeInput, opts ...request.Option) (*ReplaceSystemVolumeOutput, error) {
	req, out := c.ReplaceSystemVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ReplaceSystemVolumeInput struct {
	_ struct{} `type:"structure"`

	ClientToken *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceId *string `type:"string"`

	KeyPairName *string `type:"string"`

	Password *string `type:"string"`

	Size *json.Number `type:"json_number"`

	UserData *string `type:"string"`
}

// String returns the string representation
func (s ReplaceSystemVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemVolumeInput) GoString() string {
	return s.String()
}

// SetClientToken sets the ClientToken field's value.
func (s *ReplaceSystemVolumeInput) SetClientToken(v string) *ReplaceSystemVolumeInput {
	s.ClientToken = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *ReplaceSystemVolumeInput) SetImageId(v string) *ReplaceSystemVolumeInput {
	s.ImageId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ReplaceSystemVolumeInput) SetInstanceId(v string) *ReplaceSystemVolumeInput {
	s.InstanceId = &v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *ReplaceSystemVolumeInput) SetKeyPairName(v string) *ReplaceSystemVolumeInput {
	s.KeyPairName = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ReplaceSystemVolumeInput) SetPassword(v string) *ReplaceSystemVolumeInput {
	s.Password = &v
	return s
}

// SetSize sets the Size field's value.
func (s *ReplaceSystemVolumeInput) SetSize(v json.Number) *ReplaceSystemVolumeInput {
	s.Size = &v
	return s
}

// SetUserData sets the UserData field's value.
func (s *ReplaceSystemVolumeInput) SetUserData(v string) *ReplaceSystemVolumeInput {
	s.UserData = &v
	return s
}

type ReplaceSystemVolumeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ReplaceSystemVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ReplaceSystemVolumeOutput) GoString() string {
	return s.String()
}

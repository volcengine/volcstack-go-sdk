// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"encoding/json"

	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opExtendVolumeCommon = "ExtendVolume"

// ExtendVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ExtendVolumeCommon operation. The "output" return
// value will be populated with the ExtendVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExtendVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExtendVolumeCommon Send returns without error.
//
// See ExtendVolumeCommon for more information on using the ExtendVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the ExtendVolumeCommonRequest method.
//    req, resp := client.ExtendVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ExtendVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opExtendVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ExtendVolumeCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation ExtendVolumeCommon for usage and error information.
func (c *STORAGEEBS) ExtendVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ExtendVolumeCommonRequest(input)
	return out, req.Send()
}

// ExtendVolumeCommonWithContext is the same as ExtendVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ExtendVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ExtendVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ExtendVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExtendVolume = "ExtendVolume"

// ExtendVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the ExtendVolume operation. The "output" return
// value will be populated with the ExtendVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExtendVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExtendVolumeCommon Send returns without error.
//
// See ExtendVolume for more information on using the ExtendVolume
// API call, and error handling.
//
//    // Example sending a request using the ExtendVolumeRequest method.
//    req, resp := client.ExtendVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ExtendVolumeRequest(input *ExtendVolumeInput) (req *request.Request, output *ExtendVolumeOutput) {
	op := &request.Operation{
		Name:       opExtendVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ExtendVolumeInput{}
	}

	output = &ExtendVolumeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ExtendVolume API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation ExtendVolume for usage and error information.
func (c *STORAGEEBS) ExtendVolume(input *ExtendVolumeInput) (*ExtendVolumeOutput, error) {
	req, out := c.ExtendVolumeRequest(input)
	return out, req.Send()
}

// ExtendVolumeWithContext is the same as ExtendVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ExtendVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ExtendVolumeWithContext(ctx volcstack.Context, input *ExtendVolumeInput, opts ...request.Option) (*ExtendVolumeOutput, error) {
	req, out := c.ExtendVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExtendVolumeInput struct {
	_ struct{} `type:"structure"`

	NewSize *json.Number `type:"json_number"`

	VolumeId *string `type:"string"`
}

// String returns the string representation
func (s ExtendVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtendVolumeInput) GoString() string {
	return s.String()
}

// SetNewSize sets the NewSize field's value.
func (s *ExtendVolumeInput) SetNewSize(v json.Number) *ExtendVolumeInput {
	s.NewSize = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *ExtendVolumeInput) SetVolumeId(v string) *ExtendVolumeInput {
	s.VolumeId = &v
	return s
}

type ExtendVolumeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ExtendVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtendVolumeOutput) GoString() string {
	return s.String()
}

// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/volcengine/volcstack-go-sdk/private/protocol"
	"github.com/volcengine/volcstack-go-sdk/private/protocol/volcstackquery"
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opAttachVolumeCommon = "AttachVolume"

// AttachVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the AttachVolumeCommon operation. The "output" return
// value will be populated with the AttachVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachVolumeCommon Send returns without error.
//
// See AttachVolumeCommon for more information on using the AttachVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the AttachVolumeCommonRequest method.
//    req, resp := client.AttachVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) AttachVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// AttachVolumeCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation AttachVolumeCommon for usage and error information.
func (c *STORAGEEBS) AttachVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachVolumeCommonRequest(input)
	return out, req.Send()
}

// AttachVolumeCommonWithContext is the same as AttachVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) AttachVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachVolume = "AttachVolume"

// AttachVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the AttachVolume operation. The "output" return
// value will be populated with the AttachVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachVolumeCommon Send returns without error.
//
// See AttachVolume for more information on using the AttachVolume
// API call, and error handling.
//
//    // Example sending a request using the AttachVolumeRequest method.
//    req, resp := client.AttachVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) AttachVolumeRequest(input *AttachVolumeInput) (req *request.Request, output *AttachVolumeOutput) {
	op := &request.Operation{
		Name:       opAttachVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachVolumeInput{}
	}

	output = &AttachVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// AttachVolume API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation AttachVolume for usage and error information.
func (c *STORAGEEBS) AttachVolume(input *AttachVolumeInput) (*AttachVolumeOutput, error) {
	req, out := c.AttachVolumeRequest(input)
	return out, req.Send()
}

// AttachVolumeWithContext is the same as AttachVolume with the addition of
// the ability to pass a context and additional request options.
//
// See AttachVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) AttachVolumeWithContext(ctx volcstack.Context, input *AttachVolumeInput, opts ...request.Option) (*AttachVolumeOutput, error) {
	req, out := c.AttachVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVolumeCommon = "CreateVolume"

// CreateVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateVolumeCommon operation. The "output" return
// value will be populated with the CreateVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVolumeCommon Send returns without error.
//
// See CreateVolumeCommon for more information on using the CreateVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateVolumeCommonRequest method.
//    req, resp := client.CreateVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) CreateVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateVolumeCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation CreateVolumeCommon for usage and error information.
func (c *STORAGEEBS) CreateVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateVolumeCommonRequest(input)
	return out, req.Send()
}

// CreateVolumeCommonWithContext is the same as CreateVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) CreateVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVolume = "CreateVolume"

// CreateVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateVolume operation. The "output" return
// value will be populated with the CreateVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVolumeCommon Send returns without error.
//
// See CreateVolume for more information on using the CreateVolume
// API call, and error handling.
//
//    // Example sending a request using the CreateVolumeRequest method.
//    req, resp := client.CreateVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) CreateVolumeRequest(input *CreateVolumeInput) (req *request.Request, output *CreateVolumeOutput) {
	op := &request.Operation{
		Name:       opCreateVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateVolumeInput{}
	}

	output = &CreateVolumeOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateVolume API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation CreateVolume for usage and error information.
func (c *STORAGEEBS) CreateVolume(input *CreateVolumeInput) (*CreateVolumeOutput, error) {
	req, out := c.CreateVolumeRequest(input)
	return out, req.Send()
}

// CreateVolumeWithContext is the same as CreateVolume with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) CreateVolumeWithContext(ctx volcstack.Context, input *CreateVolumeInput, opts ...request.Option) (*CreateVolumeOutput, error) {
	req, out := c.CreateVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteVolumeCommon = "DeleteVolume"

// DeleteVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteVolumeCommon operation. The "output" return
// value will be populated with the DeleteVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteVolumeCommon Send returns without error.
//
// See DeleteVolumeCommon for more information on using the DeleteVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteVolumeCommonRequest method.
//    req, resp := client.DeleteVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DeleteVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteVolumeCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation DeleteVolumeCommon for usage and error information.
func (c *STORAGEEBS) DeleteVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteVolumeCommonRequest(input)
	return out, req.Send()
}

// DeleteVolumeCommonWithContext is the same as DeleteVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DeleteVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteVolume = "DeleteVolume"

// DeleteVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the DeleteVolume operation. The "output" return
// value will be populated with the DeleteVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteVolumeCommon Send returns without error.
//
// See DeleteVolume for more information on using the DeleteVolume
// API call, and error handling.
//
//    // Example sending a request using the DeleteVolumeRequest method.
//    req, resp := client.DeleteVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DeleteVolumeRequest(input *DeleteVolumeInput) (req *request.Request, output *DeleteVolumeOutput) {
	op := &request.Operation{
		Name:       opDeleteVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteVolumeInput{}
	}

	output = &DeleteVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteVolume API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation DeleteVolume for usage and error information.
func (c *STORAGEEBS) DeleteVolume(input *DeleteVolumeInput) (*DeleteVolumeOutput, error) {
	req, out := c.DeleteVolumeRequest(input)
	return out, req.Send()
}

// DeleteVolumeWithContext is the same as DeleteVolume with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DeleteVolumeWithContext(ctx volcstack.Context, input *DeleteVolumeInput, opts ...request.Option) (*DeleteVolumeOutput, error) {
	req, out := c.DeleteVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVolumesCommon = "DescribeVolumes"

// DescribeVolumesCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeVolumesCommon operation. The "output" return
// value will be populated with the DescribeVolumesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVolumesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVolumesCommon Send returns without error.
//
// See DescribeVolumesCommon for more information on using the DescribeVolumesCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeVolumesCommonRequest method.
//    req, resp := client.DescribeVolumesCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeVolumesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeVolumesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeVolumesCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation DescribeVolumesCommon for usage and error information.
func (c *STORAGEEBS) DescribeVolumesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeVolumesCommonRequest(input)
	return out, req.Send()
}

// DescribeVolumesCommonWithContext is the same as DescribeVolumesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVolumesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeVolumesCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeVolumesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeVolumes = "DescribeVolumes"

// DescribeVolumesRequest generates a "volcstack/request.Request" representing the
// client's request for the DescribeVolumes operation. The "output" return
// value will be populated with the DescribeVolumesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeVolumesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeVolumesCommon Send returns without error.
//
// See DescribeVolumes for more information on using the DescribeVolumes
// API call, and error handling.
//
//    // Example sending a request using the DescribeVolumesRequest method.
//    req, resp := client.DescribeVolumesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DescribeVolumesRequest(input *DescribeVolumesInput) (req *request.Request, output *DescribeVolumesOutput) {
	op := &request.Operation{
		Name:       opDescribeVolumes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeVolumesInput{}
	}

	output = &DescribeVolumesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeVolumes API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation DescribeVolumes for usage and error information.
func (c *STORAGEEBS) DescribeVolumes(input *DescribeVolumesInput) (*DescribeVolumesOutput, error) {
	req, out := c.DescribeVolumesRequest(input)
	return out, req.Send()
}

// DescribeVolumesWithContext is the same as DescribeVolumes with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeVolumes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DescribeVolumesWithContext(ctx volcstack.Context, input *DescribeVolumesInput, opts ...request.Option) (*DescribeVolumesOutput, error) {
	req, out := c.DescribeVolumesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetachVolumeCommon = "DetachVolume"

// DetachVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the DetachVolumeCommon operation. The "output" return
// value will be populated with the DetachVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetachVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetachVolumeCommon Send returns without error.
//
// See DetachVolumeCommon for more information on using the DetachVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the DetachVolumeCommonRequest method.
//    req, resp := client.DetachVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DetachVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDetachVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DetachVolumeCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation DetachVolumeCommon for usage and error information.
func (c *STORAGEEBS) DetachVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DetachVolumeCommonRequest(input)
	return out, req.Send()
}

// DetachVolumeCommonWithContext is the same as DetachVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DetachVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DetachVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DetachVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDetachVolume = "DetachVolume"

// DetachVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the DetachVolume operation. The "output" return
// value will be populated with the DetachVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DetachVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after DetachVolumeCommon Send returns without error.
//
// See DetachVolume for more information on using the DetachVolume
// API call, and error handling.
//
//    // Example sending a request using the DetachVolumeRequest method.
//    req, resp := client.DetachVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) DetachVolumeRequest(input *DetachVolumeInput) (req *request.Request, output *DetachVolumeOutput) {
	op := &request.Operation{
		Name:       opDetachVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DetachVolumeInput{}
	}

	output = &DetachVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// DetachVolume API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation DetachVolume for usage and error information.
func (c *STORAGEEBS) DetachVolume(input *DetachVolumeInput) (*DetachVolumeOutput, error) {
	req, out := c.DetachVolumeRequest(input)
	return out, req.Send()
}

// DetachVolumeWithContext is the same as DetachVolume with the addition of
// the ability to pass a context and additional request options.
//
// See DetachVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) DetachVolumeWithContext(ctx volcstack.Context, input *DetachVolumeInput, opts ...request.Option) (*DetachVolumeOutput, error) {
	req, out := c.DetachVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExtendVolumeCommon = "ExtendVolume"

// ExtendVolumeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ExtendVolumeCommon operation. The "output" return
// value will be populated with the ExtendVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExtendVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExtendVolumeCommon Send returns without error.
//
// See ExtendVolumeCommon for more information on using the ExtendVolumeCommon
// API call, and error handling.
//
//    // Example sending a request using the ExtendVolumeCommonRequest method.
//    req, resp := client.ExtendVolumeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ExtendVolumeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opExtendVolumeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ExtendVolumeCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation ExtendVolumeCommon for usage and error information.
func (c *STORAGEEBS) ExtendVolumeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ExtendVolumeCommonRequest(input)
	return out, req.Send()
}

// ExtendVolumeCommonWithContext is the same as ExtendVolumeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ExtendVolumeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ExtendVolumeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ExtendVolumeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExtendVolume = "ExtendVolume"

// ExtendVolumeRequest generates a "volcstack/request.Request" representing the
// client's request for the ExtendVolume operation. The "output" return
// value will be populated with the ExtendVolumeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExtendVolumeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExtendVolumeCommon Send returns without error.
//
// See ExtendVolume for more information on using the ExtendVolume
// API call, and error handling.
//
//    // Example sending a request using the ExtendVolumeRequest method.
//    req, resp := client.ExtendVolumeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ExtendVolumeRequest(input *ExtendVolumeInput) (req *request.Request, output *ExtendVolumeOutput) {
	op := &request.Operation{
		Name:       opExtendVolume,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ExtendVolumeInput{}
	}

	output = &ExtendVolumeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ExtendVolume API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation ExtendVolume for usage and error information.
func (c *STORAGEEBS) ExtendVolume(input *ExtendVolumeInput) (*ExtendVolumeOutput, error) {
	req, out := c.ExtendVolumeRequest(input)
	return out, req.Send()
}

// ExtendVolumeWithContext is the same as ExtendVolume with the addition of
// the ability to pass a context and additional request options.
//
// See ExtendVolume for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ExtendVolumeWithContext(ctx volcstack.Context, input *ExtendVolumeInput, opts ...request.Option) (*ExtendVolumeOutput, error) {
	req, out := c.ExtendVolumeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyVolumeAttributeCommon = "ModifyVolumeAttribute"

// ModifyVolumeAttributeCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyVolumeAttributeCommon operation. The "output" return
// value will be populated with the ModifyVolumeAttributeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyVolumeAttributeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyVolumeAttributeCommon Send returns without error.
//
// See ModifyVolumeAttributeCommon for more information on using the ModifyVolumeAttributeCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyVolumeAttributeCommonRequest method.
//    req, resp := client.ModifyVolumeAttributeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ModifyVolumeAttributeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyVolumeAttributeCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyVolumeAttributeCommon API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation ModifyVolumeAttributeCommon for usage and error information.
func (c *STORAGEEBS) ModifyVolumeAttributeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyVolumeAttributeCommonRequest(input)
	return out, req.Send()
}

// ModifyVolumeAttributeCommonWithContext is the same as ModifyVolumeAttributeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyVolumeAttributeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ModifyVolumeAttributeCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyVolumeAttributeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyVolumeAttribute = "ModifyVolumeAttribute"

// ModifyVolumeAttributeRequest generates a "volcstack/request.Request" representing the
// client's request for the ModifyVolumeAttribute operation. The "output" return
// value will be populated with the ModifyVolumeAttributeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyVolumeAttributeCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyVolumeAttributeCommon Send returns without error.
//
// See ModifyVolumeAttribute for more information on using the ModifyVolumeAttribute
// API call, and error handling.
//
//    // Example sending a request using the ModifyVolumeAttributeRequest method.
//    req, resp := client.ModifyVolumeAttributeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *STORAGEEBS) ModifyVolumeAttributeRequest(input *ModifyVolumeAttributeInput) (req *request.Request, output *ModifyVolumeAttributeOutput) {
	op := &request.Operation{
		Name:       opModifyVolumeAttribute,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyVolumeAttributeInput{}
	}

	output = &ModifyVolumeAttributeOutput{}
	req = c.newRequest(op, input, output)

	req.Handlers.Unmarshal.Swap(volcstackquery.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// ModifyVolumeAttribute API operation for STORAGE_EBS.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for STORAGE_EBS's
// API operation ModifyVolumeAttribute for usage and error information.
func (c *STORAGEEBS) ModifyVolumeAttribute(input *ModifyVolumeAttributeInput) (*ModifyVolumeAttributeOutput, error) {
	req, out := c.ModifyVolumeAttributeRequest(input)
	return out, req.Send()
}

// ModifyVolumeAttributeWithContext is the same as ModifyVolumeAttribute with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyVolumeAttribute for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) ModifyVolumeAttributeWithContext(ctx volcstack.Context, input *ModifyVolumeAttributeInput, opts ...request.Option) (*ModifyVolumeAttributeOutput, error) {
	req, out := c.ModifyVolumeAttributeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AttachVolumeInput struct {
	_ struct{} `type:"structure"`

	DeleteWithInstance *bool `type:"boolean"`

	InstanceId *string `type:"string"`

	VolumeId *string `type:"string"`
}

// String returns the string representation
func (s AttachVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachVolumeInput) GoString() string {
	return s.String()
}

// SetDeleteWithInstance sets the DeleteWithInstance field's value.
func (s *AttachVolumeInput) SetDeleteWithInstance(v bool) *AttachVolumeInput {
	s.DeleteWithInstance = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *AttachVolumeInput) SetInstanceId(v string) *AttachVolumeInput {
	s.InstanceId = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *AttachVolumeInput) SetVolumeId(v string) *AttachVolumeInput {
	s.VolumeId = &v
	return s
}

type AttachVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s AttachVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachVolumeOutput) GoString() string {
	return s.String()
}

type CreateVolumeInput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	Kind *string `type:"string"`

	Size *int64 `type:"int64"`

	VolumeChargeType *string `type:"string"`

	VolumeName *string `type:"string"`

	VolumeType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s CreateVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVolumeInput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *CreateVolumeInput) SetDescription(v string) *CreateVolumeInput {
	s.Description = &v
	return s
}

// SetKind sets the Kind field's value.
func (s *CreateVolumeInput) SetKind(v string) *CreateVolumeInput {
	s.Kind = &v
	return s
}

// SetSize sets the Size field's value.
func (s *CreateVolumeInput) SetSize(v int64) *CreateVolumeInput {
	s.Size = &v
	return s
}

// SetVolumeChargeType sets the VolumeChargeType field's value.
func (s *CreateVolumeInput) SetVolumeChargeType(v string) *CreateVolumeInput {
	s.VolumeChargeType = &v
	return s
}

// SetVolumeName sets the VolumeName field's value.
func (s *CreateVolumeInput) SetVolumeName(v string) *CreateVolumeInput {
	s.VolumeName = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *CreateVolumeInput) SetVolumeType(v string) *CreateVolumeInput {
	s.VolumeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *CreateVolumeInput) SetZoneId(v string) *CreateVolumeInput {
	s.ZoneId = &v
	return s
}

type CreateVolumeOutput struct {
	_ struct{} `type:"structure"`

	VolumeId *string `type:"string"`
}

// String returns the string representation
func (s CreateVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVolumeOutput) GoString() string {
	return s.String()
}

// SetVolumeId sets the VolumeId field's value.
func (s *CreateVolumeOutput) SetVolumeId(v string) *CreateVolumeOutput {
	s.VolumeId = &v
	return s
}

type DeleteVolumeInput struct {
	_ struct{} `type:"structure"`

	VolumeId *string `type:"string"`
}

// String returns the string representation
func (s DeleteVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVolumeInput) GoString() string {
	return s.String()
}

// SetVolumeId sets the VolumeId field's value.
func (s *DeleteVolumeInput) SetVolumeId(v string) *DeleteVolumeInput {
	s.VolumeId = &v
	return s
}

type DeleteVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteVolumeOutput) GoString() string {
	return s.String()
}

type DescribeVolumesInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	Kind *string `type:"string"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	VolumeIds []*string `type:"list"`

	VolumeName *string `type:"string"`

	VolumeStatus *string `type:"string"`

	VolumeType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s DescribeVolumesInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVolumesInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeVolumesInput) SetInstanceId(v string) *DescribeVolumesInput {
	s.InstanceId = &v
	return s
}

// SetKind sets the Kind field's value.
func (s *DescribeVolumesInput) SetKind(v string) *DescribeVolumesInput {
	s.Kind = &v
	return s
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeVolumesInput) SetPageNumber(v int32) *DescribeVolumesInput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeVolumesInput) SetPageSize(v int32) *DescribeVolumesInput {
	s.PageSize = &v
	return s
}

// SetVolumeIds sets the VolumeIds field's value.
func (s *DescribeVolumesInput) SetVolumeIds(v []*string) *DescribeVolumesInput {
	s.VolumeIds = v
	return s
}

// SetVolumeName sets the VolumeName field's value.
func (s *DescribeVolumesInput) SetVolumeName(v string) *DescribeVolumesInput {
	s.VolumeName = &v
	return s
}

// SetVolumeStatus sets the VolumeStatus field's value.
func (s *DescribeVolumesInput) SetVolumeStatus(v string) *DescribeVolumesInput {
	s.VolumeStatus = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *DescribeVolumesInput) SetVolumeType(v string) *DescribeVolumesInput {
	s.VolumeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DescribeVolumesInput) SetZoneId(v string) *DescribeVolumesInput {
	s.ZoneId = &v
	return s
}

type DescribeVolumesOutput struct {
	_ struct{} `type:"structure"`

	PageNumber *int32 `type:"int32"`

	PageSize *int32 `type:"int32"`

	TotalCount *int32 `type:"int32"`

	Volumes []*VolumeForDescribeVolumesOutput `type:"list"`
}

// String returns the string representation
func (s DescribeVolumesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeVolumesOutput) GoString() string {
	return s.String()
}

// SetPageNumber sets the PageNumber field's value.
func (s *DescribeVolumesOutput) SetPageNumber(v int32) *DescribeVolumesOutput {
	s.PageNumber = &v
	return s
}

// SetPageSize sets the PageSize field's value.
func (s *DescribeVolumesOutput) SetPageSize(v int32) *DescribeVolumesOutput {
	s.PageSize = &v
	return s
}

// SetTotalCount sets the TotalCount field's value.
func (s *DescribeVolumesOutput) SetTotalCount(v int32) *DescribeVolumesOutput {
	s.TotalCount = &v
	return s
}

// SetVolumes sets the Volumes field's value.
func (s *DescribeVolumesOutput) SetVolumes(v []*VolumeForDescribeVolumesOutput) *DescribeVolumesOutput {
	s.Volumes = v
	return s
}

type DetachVolumeInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`

	VolumeId *string `type:"string"`
}

// String returns the string representation
func (s DetachVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachVolumeInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DetachVolumeInput) SetInstanceId(v string) *DetachVolumeInput {
	s.InstanceId = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *DetachVolumeInput) SetVolumeId(v string) *DetachVolumeInput {
	s.VolumeId = &v
	return s
}

type DetachVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DetachVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s DetachVolumeOutput) GoString() string {
	return s.String()
}

type ExtendVolumeInput struct {
	_ struct{} `type:"structure"`

	NewSize *int64 `type:"int64"`

	VolumeId *string `type:"string"`
}

// String returns the string representation
func (s ExtendVolumeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtendVolumeInput) GoString() string {
	return s.String()
}

// SetNewSize sets the NewSize field's value.
func (s *ExtendVolumeInput) SetNewSize(v int64) *ExtendVolumeInput {
	s.NewSize = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *ExtendVolumeInput) SetVolumeId(v string) *ExtendVolumeInput {
	s.VolumeId = &v
	return s
}

type ExtendVolumeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ExtendVolumeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ExtendVolumeOutput) GoString() string {
	return s.String()
}

type ModifyVolumeAttributeInput struct {
	_ struct{} `type:"structure"`

	DeleteWithInstance *bool `type:"boolean"`

	Description *string `type:"string"`

	VolumeId *string `type:"string"`

	VolumeName *string `type:"string"`
}

// String returns the string representation
func (s ModifyVolumeAttributeInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyVolumeAttributeInput) GoString() string {
	return s.String()
}

// SetDeleteWithInstance sets the DeleteWithInstance field's value.
func (s *ModifyVolumeAttributeInput) SetDeleteWithInstance(v bool) *ModifyVolumeAttributeInput {
	s.DeleteWithInstance = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyVolumeAttributeInput) SetDescription(v string) *ModifyVolumeAttributeInput {
	s.Description = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *ModifyVolumeAttributeInput) SetVolumeId(v string) *ModifyVolumeAttributeInput {
	s.VolumeId = &v
	return s
}

// SetVolumeName sets the VolumeName field's value.
func (s *ModifyVolumeAttributeInput) SetVolumeName(v string) *ModifyVolumeAttributeInput {
	s.VolumeName = &v
	return s
}

type ModifyVolumeAttributeOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ModifyVolumeAttributeOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyVolumeAttributeOutput) GoString() string {
	return s.String()
}

type VolumeForDescribeVolumesOutput struct {
	_ struct{} `type:"structure"`

	BillingType *int32 `type:"int32"`

	CreatedAt *string `type:"string"`

	DeleteWithInstance *bool `type:"boolean"`

	Description *string `type:"string"`

	DeviceName *string `type:"string"`

	ExpiredTime *string `type:"string"`

	ImageId *string `type:"string"`

	InstanceId *string `type:"string"`

	Kind *string `type:"string"`

	PayType *string `type:"string"`

	RenewType *int32 `type:"int32"`

	Size *int64 `type:"int64"`

	Status *string `type:"string"`

	TradeStatus *int32 `type:"int32"`

	UpdatedAt *string `type:"string"`

	VolumeId *string `type:"string"`

	VolumeName *string `type:"string"`

	VolumeType *string `type:"string"`

	ZoneId *string `type:"string"`
}

// String returns the string representation
func (s VolumeForDescribeVolumesOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s VolumeForDescribeVolumesOutput) GoString() string {
	return s.String()
}

// SetBillingType sets the BillingType field's value.
func (s *VolumeForDescribeVolumesOutput) SetBillingType(v int32) *VolumeForDescribeVolumesOutput {
	s.BillingType = &v
	return s
}

// SetCreatedAt sets the CreatedAt field's value.
func (s *VolumeForDescribeVolumesOutput) SetCreatedAt(v string) *VolumeForDescribeVolumesOutput {
	s.CreatedAt = &v
	return s
}

// SetDeleteWithInstance sets the DeleteWithInstance field's value.
func (s *VolumeForDescribeVolumesOutput) SetDeleteWithInstance(v bool) *VolumeForDescribeVolumesOutput {
	s.DeleteWithInstance = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *VolumeForDescribeVolumesOutput) SetDescription(v string) *VolumeForDescribeVolumesOutput {
	s.Description = &v
	return s
}

// SetDeviceName sets the DeviceName field's value.
func (s *VolumeForDescribeVolumesOutput) SetDeviceName(v string) *VolumeForDescribeVolumesOutput {
	s.DeviceName = &v
	return s
}

// SetExpiredTime sets the ExpiredTime field's value.
func (s *VolumeForDescribeVolumesOutput) SetExpiredTime(v string) *VolumeForDescribeVolumesOutput {
	s.ExpiredTime = &v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *VolumeForDescribeVolumesOutput) SetImageId(v string) *VolumeForDescribeVolumesOutput {
	s.ImageId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *VolumeForDescribeVolumesOutput) SetInstanceId(v string) *VolumeForDescribeVolumesOutput {
	s.InstanceId = &v
	return s
}

// SetKind sets the Kind field's value.
func (s *VolumeForDescribeVolumesOutput) SetKind(v string) *VolumeForDescribeVolumesOutput {
	s.Kind = &v
	return s
}

// SetPayType sets the PayType field's value.
func (s *VolumeForDescribeVolumesOutput) SetPayType(v string) *VolumeForDescribeVolumesOutput {
	s.PayType = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *VolumeForDescribeVolumesOutput) SetRenewType(v int32) *VolumeForDescribeVolumesOutput {
	s.RenewType = &v
	return s
}

// SetSize sets the Size field's value.
func (s *VolumeForDescribeVolumesOutput) SetSize(v int64) *VolumeForDescribeVolumesOutput {
	s.Size = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *VolumeForDescribeVolumesOutput) SetStatus(v string) *VolumeForDescribeVolumesOutput {
	s.Status = &v
	return s
}

// SetTradeStatus sets the TradeStatus field's value.
func (s *VolumeForDescribeVolumesOutput) SetTradeStatus(v int32) *VolumeForDescribeVolumesOutput {
	s.TradeStatus = &v
	return s
}

// SetUpdatedAt sets the UpdatedAt field's value.
func (s *VolumeForDescribeVolumesOutput) SetUpdatedAt(v string) *VolumeForDescribeVolumesOutput {
	s.UpdatedAt = &v
	return s
}

// SetVolumeId sets the VolumeId field's value.
func (s *VolumeForDescribeVolumesOutput) SetVolumeId(v string) *VolumeForDescribeVolumesOutput {
	s.VolumeId = &v
	return s
}

// SetVolumeName sets the VolumeName field's value.
func (s *VolumeForDescribeVolumesOutput) SetVolumeName(v string) *VolumeForDescribeVolumesOutput {
	s.VolumeName = &v
	return s
}

// SetVolumeType sets the VolumeType field's value.
func (s *VolumeForDescribeVolumesOutput) SetVolumeType(v string) *VolumeForDescribeVolumesOutput {
	s.VolumeType = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *VolumeForDescribeVolumesOutput) SetZoneId(v string) *VolumeForDescribeVolumesOutput {
	s.ZoneId = &v
	return s
}

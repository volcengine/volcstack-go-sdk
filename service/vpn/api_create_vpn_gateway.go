// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opCreateVpnGatewayCommon = "CreateVpnGateway"

// CreateVpnGatewayCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateVpnGatewayCommon operation. The "output" return
// value will be populated with the CreateVpnGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVpnGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVpnGatewayCommon Send returns without error.
//
// See CreateVpnGatewayCommon for more information on using the CreateVpnGatewayCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateVpnGatewayCommonRequest method.
//    req, resp := client.CreateVpnGatewayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) CreateVpnGatewayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateVpnGatewayCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateVpnGatewayCommon API operation for VPN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for VPN's
// API operation CreateVpnGatewayCommon for usage and error information.
func (c *VPN) CreateVpnGatewayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateVpnGatewayCommonRequest(input)
	return out, req.Send()
}

// CreateVpnGatewayCommonWithContext is the same as CreateVpnGatewayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVpnGatewayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) CreateVpnGatewayCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateVpnGatewayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateVpnGateway = "CreateVpnGateway"

// CreateVpnGatewayRequest generates a "volcstack/request.Request" representing the
// client's request for the CreateVpnGateway operation. The "output" return
// value will be populated with the CreateVpnGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateVpnGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateVpnGatewayCommon Send returns without error.
//
// See CreateVpnGateway for more information on using the CreateVpnGateway
// API call, and error handling.
//
//    // Example sending a request using the CreateVpnGatewayRequest method.
//    req, resp := client.CreateVpnGatewayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) CreateVpnGatewayRequest(input *CreateVpnGatewayInput) (req *request.Request, output *CreateVpnGatewayOutput) {
	op := &request.Operation{
		Name:       opCreateVpnGateway,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateVpnGatewayInput{}
	}

	output = &CreateVpnGatewayOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateVpnGateway API operation for VPN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for VPN's
// API operation CreateVpnGateway for usage and error information.
func (c *VPN) CreateVpnGateway(input *CreateVpnGatewayInput) (*CreateVpnGatewayOutput, error) {
	req, out := c.CreateVpnGatewayRequest(input)
	return out, req.Send()
}

// CreateVpnGatewayWithContext is the same as CreateVpnGateway with the addition of
// the ability to pass a context and additional request options.
//
// See CreateVpnGateway for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) CreateVpnGatewayWithContext(ctx volcstack.Context, input *CreateVpnGatewayInput, opts ...request.Option) (*CreateVpnGatewayOutput, error) {
	req, out := c.CreateVpnGatewayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateVpnGatewayInput struct {
	_ struct{} `type:"structure"`

	// Bandwidth is a required field
	Bandwidth *int64 `min:"5" max:"200" type:"integer" required:"true"`

	BillingType *int64 `min:"1" max:"1" type:"integer"`

	Description *string `min:"1" max:"255" type:"string"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string" enum:"PeriodUnitForCreateVpnGatewayInput"`

	RemainRenewTimes *int64 `type:"integer"`

	RenewPeriod *int64 `type:"integer"`

	RenewType *int64 `min:"1" max:"3" type:"integer"`

	// SubnetId is a required field
	SubnetId *string `type:"string" required:"true"`

	// VpcId is a required field
	VpcId *string `type:"string" required:"true"`

	VpnGatewayName *string `min:"1" max:"128" type:"string"`
}

// String returns the string representation
func (s CreateVpnGatewayInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpnGatewayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateVpnGatewayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateVpnGatewayInput"}
	if s.Bandwidth == nil {
		invalidParams.Add(request.NewErrParamRequired("Bandwidth"))
	}
	if s.Bandwidth != nil && *s.Bandwidth < 5 {
		invalidParams.Add(request.NewErrParamMinValue("Bandwidth", 5))
	}
	if s.Bandwidth != nil && *s.Bandwidth > 200 {
		invalidParams.Add(request.NewErrParamMaxValue("Bandwidth", 200))
	}
	if s.BillingType != nil && *s.BillingType < 1 {
		invalidParams.Add(request.NewErrParamMinValue("BillingType", 1))
	}
	if s.BillingType != nil && *s.BillingType > 1 {
		invalidParams.Add(request.NewErrParamMaxValue("BillingType", 1))
	}
	if s.Description != nil && len(*s.Description) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Description", 1))
	}
	if s.Description != nil && len(*s.Description) > 255 {
		invalidParams.Add(request.NewErrParamMaxLen("Description", 255, *s.Description))
	}
	if s.RenewType != nil && *s.RenewType < 1 {
		invalidParams.Add(request.NewErrParamMinValue("RenewType", 1))
	}
	if s.RenewType != nil && *s.RenewType > 3 {
		invalidParams.Add(request.NewErrParamMaxValue("RenewType", 3))
	}
	if s.SubnetId == nil {
		invalidParams.Add(request.NewErrParamRequired("SubnetId"))
	}
	if s.VpcId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpcId"))
	}
	if s.VpnGatewayName != nil && len(*s.VpnGatewayName) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("VpnGatewayName", 1))
	}
	if s.VpnGatewayName != nil && len(*s.VpnGatewayName) > 128 {
		invalidParams.Add(request.NewErrParamMaxLen("VpnGatewayName", 128, *s.VpnGatewayName))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBandwidth sets the Bandwidth field's value.
func (s *CreateVpnGatewayInput) SetBandwidth(v int64) *CreateVpnGatewayInput {
	s.Bandwidth = &v
	return s
}

// SetBillingType sets the BillingType field's value.
func (s *CreateVpnGatewayInput) SetBillingType(v int64) *CreateVpnGatewayInput {
	s.BillingType = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateVpnGatewayInput) SetDescription(v string) *CreateVpnGatewayInput {
	s.Description = &v
	return s
}

// SetPeriod sets the Period field's value.
func (s *CreateVpnGatewayInput) SetPeriod(v int64) *CreateVpnGatewayInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *CreateVpnGatewayInput) SetPeriodUnit(v string) *CreateVpnGatewayInput {
	s.PeriodUnit = &v
	return s
}

// SetRemainRenewTimes sets the RemainRenewTimes field's value.
func (s *CreateVpnGatewayInput) SetRemainRenewTimes(v int64) *CreateVpnGatewayInput {
	s.RemainRenewTimes = &v
	return s
}

// SetRenewPeriod sets the RenewPeriod field's value.
func (s *CreateVpnGatewayInput) SetRenewPeriod(v int64) *CreateVpnGatewayInput {
	s.RenewPeriod = &v
	return s
}

// SetRenewType sets the RenewType field's value.
func (s *CreateVpnGatewayInput) SetRenewType(v int64) *CreateVpnGatewayInput {
	s.RenewType = &v
	return s
}

// SetSubnetId sets the SubnetId field's value.
func (s *CreateVpnGatewayInput) SetSubnetId(v string) *CreateVpnGatewayInput {
	s.SubnetId = &v
	return s
}

// SetVpcId sets the VpcId field's value.
func (s *CreateVpnGatewayInput) SetVpcId(v string) *CreateVpnGatewayInput {
	s.VpcId = &v
	return s
}

// SetVpnGatewayName sets the VpnGatewayName field's value.
func (s *CreateVpnGatewayInput) SetVpnGatewayName(v string) *CreateVpnGatewayInput {
	s.VpnGatewayName = &v
	return s
}

type CreateVpnGatewayOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OrderId *string `type:"string"`

	PreOrderNumber *string `type:"string"`

	RequestId *string `type:"string"`

	VpnGatewayId *string `type:"string"`
}

// String returns the string representation
func (s CreateVpnGatewayOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateVpnGatewayOutput) GoString() string {
	return s.String()
}

// SetOrderId sets the OrderId field's value.
func (s *CreateVpnGatewayOutput) SetOrderId(v string) *CreateVpnGatewayOutput {
	s.OrderId = &v
	return s
}

// SetPreOrderNumber sets the PreOrderNumber field's value.
func (s *CreateVpnGatewayOutput) SetPreOrderNumber(v string) *CreateVpnGatewayOutput {
	s.PreOrderNumber = &v
	return s
}

// SetRequestId sets the RequestId field's value.
func (s *CreateVpnGatewayOutput) SetRequestId(v string) *CreateVpnGatewayOutput {
	s.RequestId = &v
	return s
}

// SetVpnGatewayId sets the VpnGatewayId field's value.
func (s *CreateVpnGatewayOutput) SetVpnGatewayId(v string) *CreateVpnGatewayOutput {
	s.VpnGatewayId = &v
	return s
}

const (
	// PeriodUnitForCreateVpnGatewayInputMonth is a PeriodUnitForCreateVpnGatewayInput enum value
	PeriodUnitForCreateVpnGatewayInputMonth = "Month"

	// PeriodUnitForCreateVpnGatewayInputYear is a PeriodUnitForCreateVpnGatewayInput enum value
	PeriodUnitForCreateVpnGatewayInputYear = "Year"
)

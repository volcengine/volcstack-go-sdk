// Code generated by volcstack with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vpn

import (
	"github.com/volcengine/volcstack-go-sdk/volcstack"
	"github.com/volcengine/volcstack-go-sdk/volcstack/request"
	"github.com/volcengine/volcstack-go-sdk/volcstack/response"
	"github.com/volcengine/volcstack-go-sdk/volcstack/volcstackutil"
)

const opRenewVpnGatewayCommon = "RenewVpnGateway"

// RenewVpnGatewayCommonRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewVpnGatewayCommon operation. The "output" return
// value will be populated with the RenewVpnGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewVpnGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewVpnGatewayCommon Send returns without error.
//
// See RenewVpnGatewayCommon for more information on using the RenewVpnGatewayCommon
// API call, and error handling.
//
//    // Example sending a request using the RenewVpnGatewayCommonRequest method.
//    req, resp := client.RenewVpnGatewayCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) RenewVpnGatewayCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRenewVpnGatewayCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// RenewVpnGatewayCommon API operation for VPN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for VPN's
// API operation RenewVpnGatewayCommon for usage and error information.
func (c *VPN) RenewVpnGatewayCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RenewVpnGatewayCommonRequest(input)
	return out, req.Send()
}

// RenewVpnGatewayCommonWithContext is the same as RenewVpnGatewayCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RenewVpnGatewayCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) RenewVpnGatewayCommonWithContext(ctx volcstack.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RenewVpnGatewayCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRenewVpnGateway = "RenewVpnGateway"

// RenewVpnGatewayRequest generates a "volcstack/request.Request" representing the
// client's request for the RenewVpnGateway operation. The "output" return
// value will be populated with the RenewVpnGatewayCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RenewVpnGatewayCommon Request to send the API call to the service.
// the "output" return value is not valid until after RenewVpnGatewayCommon Send returns without error.
//
// See RenewVpnGateway for more information on using the RenewVpnGateway
// API call, and error handling.
//
//    // Example sending a request using the RenewVpnGatewayRequest method.
//    req, resp := client.RenewVpnGatewayRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *VPN) RenewVpnGatewayRequest(input *RenewVpnGatewayInput) (req *request.Request, output *RenewVpnGatewayOutput) {
	op := &request.Operation{
		Name:       opRenewVpnGateway,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RenewVpnGatewayInput{}
	}

	output = &RenewVpnGatewayOutput{}
	req = c.newRequest(op, input, output)

	return
}

// RenewVpnGateway API operation for VPN.
//
// Returns volcstackerr.Error for service API and SDK errors. Use runtime type assertions
// with volcstackerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCSTACK API reference guide for VPN's
// API operation RenewVpnGateway for usage and error information.
func (c *VPN) RenewVpnGateway(input *RenewVpnGatewayInput) (*RenewVpnGatewayOutput, error) {
	req, out := c.RenewVpnGatewayRequest(input)
	return out, req.Send()
}

// RenewVpnGatewayWithContext is the same as RenewVpnGateway with the addition of
// the ability to pass a context and additional request options.
//
// See RenewVpnGateway for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VPN) RenewVpnGatewayWithContext(ctx volcstack.Context, input *RenewVpnGatewayInput, opts ...request.Option) (*RenewVpnGatewayOutput, error) {
	req, out := c.RenewVpnGatewayRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RenewVpnGatewayInput struct {
	_ struct{} `type:"structure"`

	Period *int64 `type:"integer"`

	PeriodUnit *string `type:"string" enum:"PeriodUnitForRenewVpnGatewayInput"`

	// VpnGatewayId is a required field
	VpnGatewayId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s RenewVpnGatewayInput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewVpnGatewayInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RenewVpnGatewayInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "RenewVpnGatewayInput"}
	if s.VpnGatewayId == nil {
		invalidParams.Add(request.NewErrParamRequired("VpnGatewayId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetPeriod sets the Period field's value.
func (s *RenewVpnGatewayInput) SetPeriod(v int64) *RenewVpnGatewayInput {
	s.Period = &v
	return s
}

// SetPeriodUnit sets the PeriodUnit field's value.
func (s *RenewVpnGatewayInput) SetPeriodUnit(v string) *RenewVpnGatewayInput {
	s.PeriodUnit = &v
	return s
}

// SetVpnGatewayId sets the VpnGatewayId field's value.
func (s *RenewVpnGatewayInput) SetVpnGatewayId(v string) *RenewVpnGatewayInput {
	s.VpnGatewayId = &v
	return s
}

type RenewVpnGatewayOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s RenewVpnGatewayOutput) String() string {
	return volcstackutil.Prettify(s)
}

// GoString returns the string representation
func (s RenewVpnGatewayOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *RenewVpnGatewayOutput) SetRequestId(v string) *RenewVpnGatewayOutput {
	s.RequestId = &v
	return s
}

const (
	// PeriodUnitForRenewVpnGatewayInputMonth is a PeriodUnitForRenewVpnGatewayInput enum value
	PeriodUnitForRenewVpnGatewayInputMonth = "Month"

	// PeriodUnitForRenewVpnGatewayInputYear is a PeriodUnitForRenewVpnGatewayInput enum value
	PeriodUnitForRenewVpnGatewayInputYear = "Year"
)
